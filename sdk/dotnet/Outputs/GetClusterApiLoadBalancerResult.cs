// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kops.Outputs
{

    [OutputType]
    public sealed class GetClusterApiLoadBalancerResult
    {
        public readonly ImmutableArray<Outputs.GetClusterApiLoadBalancerAccessLogResult> AccessLogs;
        public readonly ImmutableArray<string> AdditionalSecurityGroups;
        public readonly string Class;
        public readonly bool CrossZoneLoadBalancing;
        public readonly int IdleTimeoutSeconds;
        public readonly string SecurityGroupOverride;
        public readonly string SslCertificate;
        public readonly string SslPolicy;
        public readonly ImmutableArray<Outputs.GetClusterApiLoadBalancerSubnetResult> Subnets;
        public readonly string Type;
        public readonly bool UseForInternalApi;

        [OutputConstructor]
        private GetClusterApiLoadBalancerResult(
            ImmutableArray<Outputs.GetClusterApiLoadBalancerAccessLogResult> accessLogs,

            ImmutableArray<string> additionalSecurityGroups,

            string @class,

            bool crossZoneLoadBalancing,

            int idleTimeoutSeconds,

            string securityGroupOverride,

            string sslCertificate,

            string sslPolicy,

            ImmutableArray<Outputs.GetClusterApiLoadBalancerSubnetResult> subnets,

            string type,

            bool useForInternalApi)
        {
            AccessLogs = accessLogs;
            AdditionalSecurityGroups = additionalSecurityGroups;
            Class = @class;
            CrossZoneLoadBalancing = crossZoneLoadBalancing;
            IdleTimeoutSeconds = idleTimeoutSeconds;
            SecurityGroupOverride = securityGroupOverride;
            SslCertificate = sslCertificate;
            SslPolicy = sslPolicy;
            Subnets = subnets;
            Type = type;
            UseForInternalApi = useForInternalApi;
        }
    }
}
