// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kops.Outputs
{

    [OutputType]
    public sealed class GetClusterNetworkingCalicoResult
    {
        public readonly bool AllowIpForwarding;
        public readonly string AwsSrcDstCheck;
        public readonly bool BpfEnabled;
        public readonly string BpfExternalServiceMode;
        public readonly bool BpfKubeProxyIptablesCleanupEnabled;
        public readonly string BpfLogLevel;
        public readonly string ChainInsertMode;
        public readonly string CpuRequest;
        public readonly bool CrossSubnet;
        public readonly string EncapsulationMode;
        public readonly string IpIpMode;
        public readonly string IptablesBackend;
        public readonly string Ipv4AutoDetectionMethod;
        public readonly string Ipv6AutoDetectionMethod;
        public readonly string LogSeverityScreen;
        public readonly int Mtu;
        public readonly bool PrometheusGoMetricsEnabled;
        public readonly bool PrometheusMetricsEnabled;
        public readonly int PrometheusMetricsPort;
        public readonly bool PrometheusProcessMetricsEnabled;
        public readonly string Registry;
        public readonly bool TyphaPrometheusMetricsEnabled;
        public readonly int TyphaPrometheusMetricsPort;
        public readonly int TyphaReplicas;
        public readonly string Version;
        public readonly string VxlanMode;
        public readonly bool WireguardEnabled;

        [OutputConstructor]
        private GetClusterNetworkingCalicoResult(
            bool allowIpForwarding,

            string awsSrcDstCheck,

            bool bpfEnabled,

            string bpfExternalServiceMode,

            bool bpfKubeProxyIptablesCleanupEnabled,

            string bpfLogLevel,

            string chainInsertMode,

            string cpuRequest,

            bool crossSubnet,

            string encapsulationMode,

            string ipIpMode,

            string iptablesBackend,

            string ipv4AutoDetectionMethod,

            string ipv6AutoDetectionMethod,

            string logSeverityScreen,

            int mtu,

            bool prometheusGoMetricsEnabled,

            bool prometheusMetricsEnabled,

            int prometheusMetricsPort,

            bool prometheusProcessMetricsEnabled,

            string registry,

            bool typhaPrometheusMetricsEnabled,

            int typhaPrometheusMetricsPort,

            int typhaReplicas,

            string version,

            string vxlanMode,

            bool wireguardEnabled)
        {
            AllowIpForwarding = allowIpForwarding;
            AwsSrcDstCheck = awsSrcDstCheck;
            BpfEnabled = bpfEnabled;
            BpfExternalServiceMode = bpfExternalServiceMode;
            BpfKubeProxyIptablesCleanupEnabled = bpfKubeProxyIptablesCleanupEnabled;
            BpfLogLevel = bpfLogLevel;
            ChainInsertMode = chainInsertMode;
            CpuRequest = cpuRequest;
            CrossSubnet = crossSubnet;
            EncapsulationMode = encapsulationMode;
            IpIpMode = ipIpMode;
            IptablesBackend = iptablesBackend;
            Ipv4AutoDetectionMethod = ipv4AutoDetectionMethod;
            Ipv6AutoDetectionMethod = ipv6AutoDetectionMethod;
            LogSeverityScreen = logSeverityScreen;
            Mtu = mtu;
            PrometheusGoMetricsEnabled = prometheusGoMetricsEnabled;
            PrometheusMetricsEnabled = prometheusMetricsEnabled;
            PrometheusMetricsPort = prometheusMetricsPort;
            PrometheusProcessMetricsEnabled = prometheusProcessMetricsEnabled;
            Registry = registry;
            TyphaPrometheusMetricsEnabled = typhaPrometheusMetricsEnabled;
            TyphaPrometheusMetricsPort = typhaPrometheusMetricsPort;
            TyphaReplicas = typhaReplicas;
            Version = version;
            VxlanMode = vxlanMode;
            WireguardEnabled = wireguardEnabled;
        }
    }
}
