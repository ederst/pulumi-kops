// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kops.Outputs
{

    [OutputType]
    public sealed class ClusterDocker
    {
        public readonly ImmutableArray<string> AuthorizationPlugins;
        public readonly string? Bridge;
        public readonly string? BridgeIp;
        public readonly string? DataRoot;
        public readonly string? DefaultRuntime;
        public readonly ImmutableArray<string> DefaultUlimits;
        public readonly ImmutableArray<string> Dns;
        public readonly ImmutableArray<string> ExecOpts;
        public readonly string? ExecRoot;
        public readonly bool? Experimental;
        public readonly bool? HealthCheck;
        public readonly ImmutableArray<string> Hosts;
        public readonly ImmutableArray<string> InsecureRegistries;
        public readonly string? InsecureRegistry;
        public readonly bool? IpMasq;
        public readonly bool? IpTables;
        public readonly bool? LiveRestore;
        public readonly string? LogDriver;
        public readonly string? LogLevel;
        public readonly ImmutableArray<string> LogOpts;
        public readonly int? MaxConcurrentDownloads;
        public readonly int? MaxConcurrentUploads;
        public readonly int? MaxDownloadAttempts;
        public readonly string? MetricsAddress;
        public readonly int? Mtu;
        public readonly Outputs.ClusterDockerPackages? Packages;
        public readonly ImmutableArray<string> RegistryMirrors;
        public readonly ImmutableArray<string> Runtimes;
        public readonly bool? SelinuxEnabled;
        public readonly bool? SkipInstall;
        public readonly string? Storage;
        public readonly ImmutableArray<string> StorageOpts;
        public readonly string? UserNamespaceRemap;
        public readonly string? Version;

        [OutputConstructor]
        private ClusterDocker(
            ImmutableArray<string> authorizationPlugins,

            string? bridge,

            string? bridgeIp,

            string? dataRoot,

            string? defaultRuntime,

            ImmutableArray<string> defaultUlimits,

            ImmutableArray<string> dns,

            ImmutableArray<string> execOpts,

            string? execRoot,

            bool? experimental,

            bool? healthCheck,

            ImmutableArray<string> hosts,

            ImmutableArray<string> insecureRegistries,

            string? insecureRegistry,

            bool? ipMasq,

            bool? ipTables,

            bool? liveRestore,

            string? logDriver,

            string? logLevel,

            ImmutableArray<string> logOpts,

            int? maxConcurrentDownloads,

            int? maxConcurrentUploads,

            int? maxDownloadAttempts,

            string? metricsAddress,

            int? mtu,

            Outputs.ClusterDockerPackages? packages,

            ImmutableArray<string> registryMirrors,

            ImmutableArray<string> runtimes,

            bool? selinuxEnabled,

            bool? skipInstall,

            string? storage,

            ImmutableArray<string> storageOpts,

            string? userNamespaceRemap,

            string? version)
        {
            AuthorizationPlugins = authorizationPlugins;
            Bridge = bridge;
            BridgeIp = bridgeIp;
            DataRoot = dataRoot;
            DefaultRuntime = defaultRuntime;
            DefaultUlimits = defaultUlimits;
            Dns = dns;
            ExecOpts = execOpts;
            ExecRoot = execRoot;
            Experimental = experimental;
            HealthCheck = healthCheck;
            Hosts = hosts;
            InsecureRegistries = insecureRegistries;
            InsecureRegistry = insecureRegistry;
            IpMasq = ipMasq;
            IpTables = ipTables;
            LiveRestore = liveRestore;
            LogDriver = logDriver;
            LogLevel = logLevel;
            LogOpts = logOpts;
            MaxConcurrentDownloads = maxConcurrentDownloads;
            MaxConcurrentUploads = maxConcurrentUploads;
            MaxDownloadAttempts = maxDownloadAttempts;
            MetricsAddress = metricsAddress;
            Mtu = mtu;
            Packages = packages;
            RegistryMirrors = registryMirrors;
            Runtimes = runtimes;
            SelinuxEnabled = selinuxEnabled;
            SkipInstall = skipInstall;
            Storage = storage;
            StorageOpts = storageOpts;
            UserNamespaceRemap = userNamespaceRemap;
            Version = version;
        }
    }
}
