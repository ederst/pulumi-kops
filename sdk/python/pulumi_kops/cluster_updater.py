# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ClusterUpdaterArgs', 'ClusterUpdater']

@pulumi.input_type
class ClusterUpdaterArgs:
    def __init__(__self__, *,
                 cluster_name: pulumi.Input[str],
                 apply: Optional[pulumi.Input['ClusterUpdaterApplyArgs']] = None,
                 keepers: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 rolling_update: Optional[pulumi.Input['ClusterUpdaterRollingUpdateArgs']] = None,
                 validate: Optional[pulumi.Input['ClusterUpdaterValidateArgs']] = None):
        """
        The set of arguments for constructing a ClusterUpdater resource.
        :param pulumi.Input[str] cluster_name: - String - ClusterName is the target cluster name.
        :param pulumi.Input['ClusterUpdaterApplyArgs'] apply: - apply_options - Apply holds cluster apply options.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] keepers: - Map(String) - Keepers contains arbitrary strings used to update the resource when one changes.
        :param pulumi.Input['ClusterUpdaterRollingUpdateArgs'] rolling_update: - rolling_update_options - RollingUpdate holds cluster rolling update options.
        :param pulumi.Input['ClusterUpdaterValidateArgs'] validate: - validate_options - Validate holds cluster validation options.
        """
        pulumi.set(__self__, "cluster_name", cluster_name)
        if apply is not None:
            pulumi.set(__self__, "apply", apply)
        if keepers is not None:
            pulumi.set(__self__, "keepers", keepers)
        if rolling_update is not None:
            pulumi.set(__self__, "rolling_update", rolling_update)
        if validate is not None:
            pulumi.set(__self__, "validate", validate)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Input[str]:
        """
        - String - ClusterName is the target cluster name.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter
    def apply(self) -> Optional[pulumi.Input['ClusterUpdaterApplyArgs']]:
        """
        - apply_options - Apply holds cluster apply options.
        """
        return pulumi.get(self, "apply")

    @apply.setter
    def apply(self, value: Optional[pulumi.Input['ClusterUpdaterApplyArgs']]):
        pulumi.set(self, "apply", value)

    @property
    @pulumi.getter
    def keepers(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        - Map(String) - Keepers contains arbitrary strings used to update the resource when one changes.
        """
        return pulumi.get(self, "keepers")

    @keepers.setter
    def keepers(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "keepers", value)

    @property
    @pulumi.getter(name="rollingUpdate")
    def rolling_update(self) -> Optional[pulumi.Input['ClusterUpdaterRollingUpdateArgs']]:
        """
        - rolling_update_options - RollingUpdate holds cluster rolling update options.
        """
        return pulumi.get(self, "rolling_update")

    @rolling_update.setter
    def rolling_update(self, value: Optional[pulumi.Input['ClusterUpdaterRollingUpdateArgs']]):
        pulumi.set(self, "rolling_update", value)

    @property
    @pulumi.getter
    def validate(self) -> Optional[pulumi.Input['ClusterUpdaterValidateArgs']]:
        """
        - validate_options - Validate holds cluster validation options.
        """
        return pulumi.get(self, "validate")

    @validate.setter
    def validate(self, value: Optional[pulumi.Input['ClusterUpdaterValidateArgs']]):
        pulumi.set(self, "validate", value)


@pulumi.input_type
class _ClusterUpdaterState:
    def __init__(__self__, *,
                 apply: Optional[pulumi.Input['ClusterUpdaterApplyArgs']] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 keepers: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 provider_version: Optional[pulumi.Input[str]] = None,
                 revision: Optional[pulumi.Input[int]] = None,
                 rolling_update: Optional[pulumi.Input['ClusterUpdaterRollingUpdateArgs']] = None,
                 validate: Optional[pulumi.Input['ClusterUpdaterValidateArgs']] = None):
        """
        Input properties used for looking up and filtering ClusterUpdater resources.
        :param pulumi.Input['ClusterUpdaterApplyArgs'] apply: - apply_options - Apply holds cluster apply options.
        :param pulumi.Input[str] cluster_name: - String - ClusterName is the target cluster name.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] keepers: - Map(String) - Keepers contains arbitrary strings used to update the resource when one changes.
        :param pulumi.Input[str] provider_version: - String - ProviderVersion is set to the currently running provider version, this will trigger cluster updater on version changes.
        :param pulumi.Input[int] revision: - Int - Revision is incremented every time the resource changes, this is useful for triggering cluster updater.
        :param pulumi.Input['ClusterUpdaterRollingUpdateArgs'] rolling_update: - rolling_update_options - RollingUpdate holds cluster rolling update options.
        :param pulumi.Input['ClusterUpdaterValidateArgs'] validate: - validate_options - Validate holds cluster validation options.
        """
        if apply is not None:
            pulumi.set(__self__, "apply", apply)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if keepers is not None:
            pulumi.set(__self__, "keepers", keepers)
        if provider_version is not None:
            pulumi.set(__self__, "provider_version", provider_version)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)
        if rolling_update is not None:
            pulumi.set(__self__, "rolling_update", rolling_update)
        if validate is not None:
            pulumi.set(__self__, "validate", validate)

    @property
    @pulumi.getter
    def apply(self) -> Optional[pulumi.Input['ClusterUpdaterApplyArgs']]:
        """
        - apply_options - Apply holds cluster apply options.
        """
        return pulumi.get(self, "apply")

    @apply.setter
    def apply(self, value: Optional[pulumi.Input['ClusterUpdaterApplyArgs']]):
        pulumi.set(self, "apply", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[str]]:
        """
        - String - ClusterName is the target cluster name.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter
    def keepers(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        - Map(String) - Keepers contains arbitrary strings used to update the resource when one changes.
        """
        return pulumi.get(self, "keepers")

    @keepers.setter
    def keepers(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "keepers", value)

    @property
    @pulumi.getter(name="providerVersion")
    def provider_version(self) -> Optional[pulumi.Input[str]]:
        """
        - String - ProviderVersion is set to the currently running provider version, this will trigger cluster updater on version changes.
        """
        return pulumi.get(self, "provider_version")

    @provider_version.setter
    def provider_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider_version", value)

    @property
    @pulumi.getter
    def revision(self) -> Optional[pulumi.Input[int]]:
        """
        - Int - Revision is incremented every time the resource changes, this is useful for triggering cluster updater.
        """
        return pulumi.get(self, "revision")

    @revision.setter
    def revision(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "revision", value)

    @property
    @pulumi.getter(name="rollingUpdate")
    def rolling_update(self) -> Optional[pulumi.Input['ClusterUpdaterRollingUpdateArgs']]:
        """
        - rolling_update_options - RollingUpdate holds cluster rolling update options.
        """
        return pulumi.get(self, "rolling_update")

    @rolling_update.setter
    def rolling_update(self, value: Optional[pulumi.Input['ClusterUpdaterRollingUpdateArgs']]):
        pulumi.set(self, "rolling_update", value)

    @property
    @pulumi.getter
    def validate(self) -> Optional[pulumi.Input['ClusterUpdaterValidateArgs']]:
        """
        - validate_options - Validate holds cluster validation options.
        """
        return pulumi.get(self, "validate")

    @validate.setter
    def validate(self, value: Optional[pulumi.Input['ClusterUpdaterValidateArgs']]):
        pulumi.set(self, "validate", value)


class ClusterUpdater(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 apply: Optional[pulumi.Input[pulumi.InputType['ClusterUpdaterApplyArgs']]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 keepers: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 rolling_update: Optional[pulumi.Input[pulumi.InputType['ClusterUpdaterRollingUpdateArgs']]] = None,
                 validate: Optional[pulumi.Input[pulumi.InputType['ClusterUpdaterValidateArgs']]] = None,
                 __props__=None):
        """
        ## # ClusterUpdater

        This resource applies the cluster state on the target cloud provider and performs a rolling update.

        The rolling update and cluster validation can be disabled and/or configured through resource attributes.

        > This resource will trigger based on the `keepers` map attribute.
        Thats is, if something changes in the attribute, the resource update handler will fire and an apply/rolling update/validate cycle will run.
        A good candidate for `keepers` is to use the `revision` coming from `Cluster` and `InstanceGroup` resources.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_kops as kops

        cluster = kops.Cluster("cluster")
        # ....
        master_0 = kops.InstanceGroup("master-0",
            cluster_name=cluster.name,
            role="Master",
            min_size=1,
            max_size=1,
            machine_type="t3.medium",
            subnets=["private-0"],
            opts=pulumi.ResourceOptions(depends_on=[cluster]))
        master_1 = kops.InstanceGroup("master-1",
            cluster_name=cluster.name,
            role="Master",
            min_size=1,
            max_size=1,
            machine_type="t3.medium",
            subnets=["private-1"],
            opts=pulumi.ResourceOptions(depends_on=[cluster]))
        master_2 = kops.InstanceGroup("master-2",
            cluster_name=cluster.name,
            role="Master",
            min_size=1,
            max_size=1,
            machine_type="t3.medium",
            subnets=["private-2"],
            opts=pulumi.ResourceOptions(depends_on=[cluster]))
        updater = kops.ClusterUpdater("updater",
            cluster_name=cluster.name,
            keepers={
                "cluster": cluster.revision,
                "master-0": master_0.revision,
                "master-1": master_1.revision,
                "master-2": master_2.revision,
            },
            rolling_update=kops.ClusterUpdaterRollingUpdateArgs(
                skip=False,
                fail_on_drain_error=True,
                fail_on_validate=True,
                validate_count=1,
            ),
            validate=kops.ClusterUpdaterValidateArgs(
                skip=False,
            ),
            opts=pulumi.ResourceOptions(depends_on=[
                    cluster,
                    master_0,
                    master_1,
                    master_2,
                ]))
        ```
        ## Nested resources

        ### apply_options

        #### Argument Reference

        The following arguments are supported:

        - `skip` - (Optional) - Bool - Skip allows skipping cluster apply.
        - `allow_kops_downgrade` - (Optional) - Bool - AllowKopsDowngrade permits applying with a kops version older than what was last used to apply to the cluster.
        - `lifecycle_overrides` - (Optional) - Map(String) - LifecycleOverrides is passed in to override the lifecycle for one of more tasks.<br />The key value is the task name such as InternetGateway and the value is the fi.Lifecycle<br />that is re-mapped.

        ### rolling_update_options

        #### Argument Reference

        The following arguments are supported:

        - `skip` - (Optional) - Bool - Skip allows skipping cluster rolling update.
        - `master_interval` - (Optional) - Duration - MasterInterval is the amount of time to wait after stopping a master instance.
        - `node_interval` - (Optional) - Duration - NodeInterval is the amount of time to wait after stopping a non-master instance.
        - `bastion_interval` - (Optional) - Duration - BastionInterval is the amount of time to wait after stopping a bastion instance.
        - `fail_on_drain_error` - (Optional) - Bool - FailOnDrainError will fail when a drain error occurs.
        - `fail_on_validate` - (Optional) - Bool - FailOnValidate will fail when a validation error occurs.
        - `post_drain_delay` - (Optional) - Duration - PostDrainDelay is the duration we wait after draining each node.
        - `validation_timeout` - (Optional) - Duration - ValidationTimeout is the maximum time to wait for the cluster to validate, once we start validation.
        - `validate_count` - (Optional) - Int - ValidateCount is the amount of time that a cluster needs to be validated after single node update.
        - `cloud_only` - (Optional) - Bool - CloudOnly perform rolling update without confirming progress with k8s.
        - `force` - (Optional) - Bool - Force forces a rolling update.

        ### validate_options

        #### Argument Reference

        The following arguments are supported:

        - `skip` - (Optional) - Bool - Skip allows skipping cluster validation.
        - `timeout` - (Optional) - Duration - Timeout defines the maximum time to wait until the cluster becomes valid.
        - `poll_interval` - (Optional) - Duration - PollInterval defines the interval between validation attempts.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ClusterUpdaterApplyArgs']] apply: - apply_options - Apply holds cluster apply options.
        :param pulumi.Input[str] cluster_name: - String - ClusterName is the target cluster name.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] keepers: - Map(String) - Keepers contains arbitrary strings used to update the resource when one changes.
        :param pulumi.Input[pulumi.InputType['ClusterUpdaterRollingUpdateArgs']] rolling_update: - rolling_update_options - RollingUpdate holds cluster rolling update options.
        :param pulumi.Input[pulumi.InputType['ClusterUpdaterValidateArgs']] validate: - validate_options - Validate holds cluster validation options.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ClusterUpdaterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## # ClusterUpdater

        This resource applies the cluster state on the target cloud provider and performs a rolling update.

        The rolling update and cluster validation can be disabled and/or configured through resource attributes.

        > This resource will trigger based on the `keepers` map attribute.
        Thats is, if something changes in the attribute, the resource update handler will fire and an apply/rolling update/validate cycle will run.
        A good candidate for `keepers` is to use the `revision` coming from `Cluster` and `InstanceGroup` resources.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_kops as kops

        cluster = kops.Cluster("cluster")
        # ....
        master_0 = kops.InstanceGroup("master-0",
            cluster_name=cluster.name,
            role="Master",
            min_size=1,
            max_size=1,
            machine_type="t3.medium",
            subnets=["private-0"],
            opts=pulumi.ResourceOptions(depends_on=[cluster]))
        master_1 = kops.InstanceGroup("master-1",
            cluster_name=cluster.name,
            role="Master",
            min_size=1,
            max_size=1,
            machine_type="t3.medium",
            subnets=["private-1"],
            opts=pulumi.ResourceOptions(depends_on=[cluster]))
        master_2 = kops.InstanceGroup("master-2",
            cluster_name=cluster.name,
            role="Master",
            min_size=1,
            max_size=1,
            machine_type="t3.medium",
            subnets=["private-2"],
            opts=pulumi.ResourceOptions(depends_on=[cluster]))
        updater = kops.ClusterUpdater("updater",
            cluster_name=cluster.name,
            keepers={
                "cluster": cluster.revision,
                "master-0": master_0.revision,
                "master-1": master_1.revision,
                "master-2": master_2.revision,
            },
            rolling_update=kops.ClusterUpdaterRollingUpdateArgs(
                skip=False,
                fail_on_drain_error=True,
                fail_on_validate=True,
                validate_count=1,
            ),
            validate=kops.ClusterUpdaterValidateArgs(
                skip=False,
            ),
            opts=pulumi.ResourceOptions(depends_on=[
                    cluster,
                    master_0,
                    master_1,
                    master_2,
                ]))
        ```
        ## Nested resources

        ### apply_options

        #### Argument Reference

        The following arguments are supported:

        - `skip` - (Optional) - Bool - Skip allows skipping cluster apply.
        - `allow_kops_downgrade` - (Optional) - Bool - AllowKopsDowngrade permits applying with a kops version older than what was last used to apply to the cluster.
        - `lifecycle_overrides` - (Optional) - Map(String) - LifecycleOverrides is passed in to override the lifecycle for one of more tasks.<br />The key value is the task name such as InternetGateway and the value is the fi.Lifecycle<br />that is re-mapped.

        ### rolling_update_options

        #### Argument Reference

        The following arguments are supported:

        - `skip` - (Optional) - Bool - Skip allows skipping cluster rolling update.
        - `master_interval` - (Optional) - Duration - MasterInterval is the amount of time to wait after stopping a master instance.
        - `node_interval` - (Optional) - Duration - NodeInterval is the amount of time to wait after stopping a non-master instance.
        - `bastion_interval` - (Optional) - Duration - BastionInterval is the amount of time to wait after stopping a bastion instance.
        - `fail_on_drain_error` - (Optional) - Bool - FailOnDrainError will fail when a drain error occurs.
        - `fail_on_validate` - (Optional) - Bool - FailOnValidate will fail when a validation error occurs.
        - `post_drain_delay` - (Optional) - Duration - PostDrainDelay is the duration we wait after draining each node.
        - `validation_timeout` - (Optional) - Duration - ValidationTimeout is the maximum time to wait for the cluster to validate, once we start validation.
        - `validate_count` - (Optional) - Int - ValidateCount is the amount of time that a cluster needs to be validated after single node update.
        - `cloud_only` - (Optional) - Bool - CloudOnly perform rolling update without confirming progress with k8s.
        - `force` - (Optional) - Bool - Force forces a rolling update.

        ### validate_options

        #### Argument Reference

        The following arguments are supported:

        - `skip` - (Optional) - Bool - Skip allows skipping cluster validation.
        - `timeout` - (Optional) - Duration - Timeout defines the maximum time to wait until the cluster becomes valid.
        - `poll_interval` - (Optional) - Duration - PollInterval defines the interval between validation attempts.

        :param str resource_name: The name of the resource.
        :param ClusterUpdaterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ClusterUpdaterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 apply: Optional[pulumi.Input[pulumi.InputType['ClusterUpdaterApplyArgs']]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 keepers: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 rolling_update: Optional[pulumi.Input[pulumi.InputType['ClusterUpdaterRollingUpdateArgs']]] = None,
                 validate: Optional[pulumi.Input[pulumi.InputType['ClusterUpdaterValidateArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ClusterUpdaterArgs.__new__(ClusterUpdaterArgs)

            __props__.__dict__["apply"] = apply
            if cluster_name is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_name'")
            __props__.__dict__["cluster_name"] = cluster_name
            __props__.__dict__["keepers"] = keepers
            __props__.__dict__["rolling_update"] = rolling_update
            __props__.__dict__["validate"] = validate
            __props__.__dict__["provider_version"] = None
            __props__.__dict__["revision"] = None
        super(ClusterUpdater, __self__).__init__(
            'kops:index/clusterUpdater:ClusterUpdater',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            apply: Optional[pulumi.Input[pulumi.InputType['ClusterUpdaterApplyArgs']]] = None,
            cluster_name: Optional[pulumi.Input[str]] = None,
            keepers: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            provider_version: Optional[pulumi.Input[str]] = None,
            revision: Optional[pulumi.Input[int]] = None,
            rolling_update: Optional[pulumi.Input[pulumi.InputType['ClusterUpdaterRollingUpdateArgs']]] = None,
            validate: Optional[pulumi.Input[pulumi.InputType['ClusterUpdaterValidateArgs']]] = None) -> 'ClusterUpdater':
        """
        Get an existing ClusterUpdater resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ClusterUpdaterApplyArgs']] apply: - apply_options - Apply holds cluster apply options.
        :param pulumi.Input[str] cluster_name: - String - ClusterName is the target cluster name.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] keepers: - Map(String) - Keepers contains arbitrary strings used to update the resource when one changes.
        :param pulumi.Input[str] provider_version: - String - ProviderVersion is set to the currently running provider version, this will trigger cluster updater on version changes.
        :param pulumi.Input[int] revision: - Int - Revision is incremented every time the resource changes, this is useful for triggering cluster updater.
        :param pulumi.Input[pulumi.InputType['ClusterUpdaterRollingUpdateArgs']] rolling_update: - rolling_update_options - RollingUpdate holds cluster rolling update options.
        :param pulumi.Input[pulumi.InputType['ClusterUpdaterValidateArgs']] validate: - validate_options - Validate holds cluster validation options.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ClusterUpdaterState.__new__(_ClusterUpdaterState)

        __props__.__dict__["apply"] = apply
        __props__.__dict__["cluster_name"] = cluster_name
        __props__.__dict__["keepers"] = keepers
        __props__.__dict__["provider_version"] = provider_version
        __props__.__dict__["revision"] = revision
        __props__.__dict__["rolling_update"] = rolling_update
        __props__.__dict__["validate"] = validate
        return ClusterUpdater(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def apply(self) -> pulumi.Output[Optional['outputs.ClusterUpdaterApply']]:
        """
        - apply_options - Apply holds cluster apply options.
        """
        return pulumi.get(self, "apply")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Output[str]:
        """
        - String - ClusterName is the target cluster name.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter
    def keepers(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        - Map(String) - Keepers contains arbitrary strings used to update the resource when one changes.
        """
        return pulumi.get(self, "keepers")

    @property
    @pulumi.getter(name="providerVersion")
    def provider_version(self) -> pulumi.Output[str]:
        """
        - String - ProviderVersion is set to the currently running provider version, this will trigger cluster updater on version changes.
        """
        return pulumi.get(self, "provider_version")

    @property
    @pulumi.getter
    def revision(self) -> pulumi.Output[int]:
        """
        - Int - Revision is incremented every time the resource changes, this is useful for triggering cluster updater.
        """
        return pulumi.get(self, "revision")

    @property
    @pulumi.getter(name="rollingUpdate")
    def rolling_update(self) -> pulumi.Output[Optional['outputs.ClusterUpdaterRollingUpdate']]:
        """
        - rolling_update_options - RollingUpdate holds cluster rolling update options.
        """
        return pulumi.get(self, "rolling_update")

    @property
    @pulumi.getter
    def validate(self) -> pulumi.Output[Optional['outputs.ClusterUpdaterValidate']]:
        """
        - validate_options - Validate holds cluster validation options.
        """
        return pulumi.get(self, "validate")

