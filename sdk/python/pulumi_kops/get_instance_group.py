# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetInstanceGroupResult',
    'AwaitableGetInstanceGroupResult',
    'get_instance_group',
    'get_instance_group_output',
]

@pulumi.output_type
class GetInstanceGroupResult:
    """
    A collection of values returned by getInstanceGroup.
    """
    def __init__(__self__, additional_security_groups=None, additional_user_datas=None, annotations=None, associate_public_ip=None, autoscale=None, cloud_labels=None, cluster_name=None, compress_user_data=None, containerds=None, cpu_credits=None, detailed_instance_monitoring=None, external_load_balancers=None, file_assets=None, gcp_provisioning_model=None, guest_accelerators=None, hooks=None, iams=None, id=None, image=None, instance_interruption_behavior=None, instance_metadatas=None, instance_protection=None, kubelets=None, labels=None, machine_type=None, manager=None, max_instance_lifetime=None, max_price=None, max_size=None, min_size=None, mixed_instances_policies=None, name=None, node_labels=None, packages=None, role=None, rolling_updates=None, root_volume_encryption=None, root_volume_encryption_key=None, root_volume_iops=None, root_volume_optimization=None, root_volume_size=None, root_volume_throughput=None, root_volume_type=None, security_group_override=None, spot_duration_in_minutes=None, subnets=None, suspend_processes=None, sysctl_parameters=None, taints=None, tenancy=None, update_policy=None, volume_mounts=None, volumes=None, warm_pools=None, zones=None):
        if additional_security_groups and not isinstance(additional_security_groups, list):
            raise TypeError("Expected argument 'additional_security_groups' to be a list")
        pulumi.set(__self__, "additional_security_groups", additional_security_groups)
        if additional_user_datas and not isinstance(additional_user_datas, list):
            raise TypeError("Expected argument 'additional_user_datas' to be a list")
        pulumi.set(__self__, "additional_user_datas", additional_user_datas)
        if annotations and not isinstance(annotations, dict):
            raise TypeError("Expected argument 'annotations' to be a dict")
        pulumi.set(__self__, "annotations", annotations)
        if associate_public_ip and not isinstance(associate_public_ip, bool):
            raise TypeError("Expected argument 'associate_public_ip' to be a bool")
        pulumi.set(__self__, "associate_public_ip", associate_public_ip)
        if autoscale and not isinstance(autoscale, bool):
            raise TypeError("Expected argument 'autoscale' to be a bool")
        pulumi.set(__self__, "autoscale", autoscale)
        if cloud_labels and not isinstance(cloud_labels, dict):
            raise TypeError("Expected argument 'cloud_labels' to be a dict")
        pulumi.set(__self__, "cloud_labels", cloud_labels)
        if cluster_name and not isinstance(cluster_name, str):
            raise TypeError("Expected argument 'cluster_name' to be a str")
        pulumi.set(__self__, "cluster_name", cluster_name)
        if compress_user_data and not isinstance(compress_user_data, bool):
            raise TypeError("Expected argument 'compress_user_data' to be a bool")
        pulumi.set(__self__, "compress_user_data", compress_user_data)
        if containerds and not isinstance(containerds, list):
            raise TypeError("Expected argument 'containerds' to be a list")
        pulumi.set(__self__, "containerds", containerds)
        if cpu_credits and not isinstance(cpu_credits, str):
            raise TypeError("Expected argument 'cpu_credits' to be a str")
        pulumi.set(__self__, "cpu_credits", cpu_credits)
        if detailed_instance_monitoring and not isinstance(detailed_instance_monitoring, bool):
            raise TypeError("Expected argument 'detailed_instance_monitoring' to be a bool")
        pulumi.set(__self__, "detailed_instance_monitoring", detailed_instance_monitoring)
        if external_load_balancers and not isinstance(external_load_balancers, list):
            raise TypeError("Expected argument 'external_load_balancers' to be a list")
        pulumi.set(__self__, "external_load_balancers", external_load_balancers)
        if file_assets and not isinstance(file_assets, list):
            raise TypeError("Expected argument 'file_assets' to be a list")
        pulumi.set(__self__, "file_assets", file_assets)
        if gcp_provisioning_model and not isinstance(gcp_provisioning_model, str):
            raise TypeError("Expected argument 'gcp_provisioning_model' to be a str")
        pulumi.set(__self__, "gcp_provisioning_model", gcp_provisioning_model)
        if guest_accelerators and not isinstance(guest_accelerators, list):
            raise TypeError("Expected argument 'guest_accelerators' to be a list")
        pulumi.set(__self__, "guest_accelerators", guest_accelerators)
        if hooks and not isinstance(hooks, list):
            raise TypeError("Expected argument 'hooks' to be a list")
        pulumi.set(__self__, "hooks", hooks)
        if iams and not isinstance(iams, list):
            raise TypeError("Expected argument 'iams' to be a list")
        pulumi.set(__self__, "iams", iams)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if image and not isinstance(image, str):
            raise TypeError("Expected argument 'image' to be a str")
        pulumi.set(__self__, "image", image)
        if instance_interruption_behavior and not isinstance(instance_interruption_behavior, str):
            raise TypeError("Expected argument 'instance_interruption_behavior' to be a str")
        pulumi.set(__self__, "instance_interruption_behavior", instance_interruption_behavior)
        if instance_metadatas and not isinstance(instance_metadatas, list):
            raise TypeError("Expected argument 'instance_metadatas' to be a list")
        pulumi.set(__self__, "instance_metadatas", instance_metadatas)
        if instance_protection and not isinstance(instance_protection, bool):
            raise TypeError("Expected argument 'instance_protection' to be a bool")
        pulumi.set(__self__, "instance_protection", instance_protection)
        if kubelets and not isinstance(kubelets, list):
            raise TypeError("Expected argument 'kubelets' to be a list")
        pulumi.set(__self__, "kubelets", kubelets)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if machine_type and not isinstance(machine_type, str):
            raise TypeError("Expected argument 'machine_type' to be a str")
        pulumi.set(__self__, "machine_type", machine_type)
        if manager and not isinstance(manager, str):
            raise TypeError("Expected argument 'manager' to be a str")
        pulumi.set(__self__, "manager", manager)
        if max_instance_lifetime and not isinstance(max_instance_lifetime, str):
            raise TypeError("Expected argument 'max_instance_lifetime' to be a str")
        pulumi.set(__self__, "max_instance_lifetime", max_instance_lifetime)
        if max_price and not isinstance(max_price, str):
            raise TypeError("Expected argument 'max_price' to be a str")
        pulumi.set(__self__, "max_price", max_price)
        if max_size and not isinstance(max_size, int):
            raise TypeError("Expected argument 'max_size' to be a int")
        pulumi.set(__self__, "max_size", max_size)
        if min_size and not isinstance(min_size, int):
            raise TypeError("Expected argument 'min_size' to be a int")
        pulumi.set(__self__, "min_size", min_size)
        if mixed_instances_policies and not isinstance(mixed_instances_policies, list):
            raise TypeError("Expected argument 'mixed_instances_policies' to be a list")
        pulumi.set(__self__, "mixed_instances_policies", mixed_instances_policies)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if node_labels and not isinstance(node_labels, dict):
            raise TypeError("Expected argument 'node_labels' to be a dict")
        pulumi.set(__self__, "node_labels", node_labels)
        if packages and not isinstance(packages, list):
            raise TypeError("Expected argument 'packages' to be a list")
        pulumi.set(__self__, "packages", packages)
        if role and not isinstance(role, str):
            raise TypeError("Expected argument 'role' to be a str")
        pulumi.set(__self__, "role", role)
        if rolling_updates and not isinstance(rolling_updates, list):
            raise TypeError("Expected argument 'rolling_updates' to be a list")
        pulumi.set(__self__, "rolling_updates", rolling_updates)
        if root_volume_encryption and not isinstance(root_volume_encryption, bool):
            raise TypeError("Expected argument 'root_volume_encryption' to be a bool")
        pulumi.set(__self__, "root_volume_encryption", root_volume_encryption)
        if root_volume_encryption_key and not isinstance(root_volume_encryption_key, str):
            raise TypeError("Expected argument 'root_volume_encryption_key' to be a str")
        pulumi.set(__self__, "root_volume_encryption_key", root_volume_encryption_key)
        if root_volume_iops and not isinstance(root_volume_iops, int):
            raise TypeError("Expected argument 'root_volume_iops' to be a int")
        pulumi.set(__self__, "root_volume_iops", root_volume_iops)
        if root_volume_optimization and not isinstance(root_volume_optimization, bool):
            raise TypeError("Expected argument 'root_volume_optimization' to be a bool")
        pulumi.set(__self__, "root_volume_optimization", root_volume_optimization)
        if root_volume_size and not isinstance(root_volume_size, int):
            raise TypeError("Expected argument 'root_volume_size' to be a int")
        pulumi.set(__self__, "root_volume_size", root_volume_size)
        if root_volume_throughput and not isinstance(root_volume_throughput, int):
            raise TypeError("Expected argument 'root_volume_throughput' to be a int")
        pulumi.set(__self__, "root_volume_throughput", root_volume_throughput)
        if root_volume_type and not isinstance(root_volume_type, str):
            raise TypeError("Expected argument 'root_volume_type' to be a str")
        pulumi.set(__self__, "root_volume_type", root_volume_type)
        if security_group_override and not isinstance(security_group_override, str):
            raise TypeError("Expected argument 'security_group_override' to be a str")
        pulumi.set(__self__, "security_group_override", security_group_override)
        if spot_duration_in_minutes and not isinstance(spot_duration_in_minutes, int):
            raise TypeError("Expected argument 'spot_duration_in_minutes' to be a int")
        pulumi.set(__self__, "spot_duration_in_minutes", spot_duration_in_minutes)
        if subnets and not isinstance(subnets, list):
            raise TypeError("Expected argument 'subnets' to be a list")
        pulumi.set(__self__, "subnets", subnets)
        if suspend_processes and not isinstance(suspend_processes, list):
            raise TypeError("Expected argument 'suspend_processes' to be a list")
        pulumi.set(__self__, "suspend_processes", suspend_processes)
        if sysctl_parameters and not isinstance(sysctl_parameters, list):
            raise TypeError("Expected argument 'sysctl_parameters' to be a list")
        pulumi.set(__self__, "sysctl_parameters", sysctl_parameters)
        if taints and not isinstance(taints, list):
            raise TypeError("Expected argument 'taints' to be a list")
        pulumi.set(__self__, "taints", taints)
        if tenancy and not isinstance(tenancy, str):
            raise TypeError("Expected argument 'tenancy' to be a str")
        pulumi.set(__self__, "tenancy", tenancy)
        if update_policy and not isinstance(update_policy, str):
            raise TypeError("Expected argument 'update_policy' to be a str")
        pulumi.set(__self__, "update_policy", update_policy)
        if volume_mounts and not isinstance(volume_mounts, list):
            raise TypeError("Expected argument 'volume_mounts' to be a list")
        pulumi.set(__self__, "volume_mounts", volume_mounts)
        if volumes and not isinstance(volumes, list):
            raise TypeError("Expected argument 'volumes' to be a list")
        pulumi.set(__self__, "volumes", volumes)
        if warm_pools and not isinstance(warm_pools, list):
            raise TypeError("Expected argument 'warm_pools' to be a list")
        pulumi.set(__self__, "warm_pools", warm_pools)
        if zones and not isinstance(zones, list):
            raise TypeError("Expected argument 'zones' to be a list")
        pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter(name="additionalSecurityGroups")
    def additional_security_groups(self) -> Sequence[str]:
        return pulumi.get(self, "additional_security_groups")

    @property
    @pulumi.getter(name="additionalUserDatas")
    def additional_user_datas(self) -> Sequence['outputs.GetInstanceGroupAdditionalUserDataResult']:
        return pulumi.get(self, "additional_user_datas")

    @property
    @pulumi.getter
    def annotations(self) -> Mapping[str, str]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter(name="associatePublicIp")
    def associate_public_ip(self) -> bool:
        return pulumi.get(self, "associate_public_ip")

    @property
    @pulumi.getter
    def autoscale(self) -> bool:
        return pulumi.get(self, "autoscale")

    @property
    @pulumi.getter(name="cloudLabels")
    def cloud_labels(self) -> Mapping[str, str]:
        return pulumi.get(self, "cloud_labels")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="compressUserData")
    def compress_user_data(self) -> bool:
        return pulumi.get(self, "compress_user_data")

    @property
    @pulumi.getter
    def containerds(self) -> Sequence['outputs.GetInstanceGroupContainerdResult']:
        return pulumi.get(self, "containerds")

    @property
    @pulumi.getter(name="cpuCredits")
    def cpu_credits(self) -> str:
        return pulumi.get(self, "cpu_credits")

    @property
    @pulumi.getter(name="detailedInstanceMonitoring")
    def detailed_instance_monitoring(self) -> bool:
        return pulumi.get(self, "detailed_instance_monitoring")

    @property
    @pulumi.getter(name="externalLoadBalancers")
    def external_load_balancers(self) -> Sequence['outputs.GetInstanceGroupExternalLoadBalancerResult']:
        return pulumi.get(self, "external_load_balancers")

    @property
    @pulumi.getter(name="fileAssets")
    def file_assets(self) -> Sequence['outputs.GetInstanceGroupFileAssetResult']:
        return pulumi.get(self, "file_assets")

    @property
    @pulumi.getter(name="gcpProvisioningModel")
    def gcp_provisioning_model(self) -> str:
        return pulumi.get(self, "gcp_provisioning_model")

    @property
    @pulumi.getter(name="guestAccelerators")
    def guest_accelerators(self) -> Sequence['outputs.GetInstanceGroupGuestAcceleratorResult']:
        return pulumi.get(self, "guest_accelerators")

    @property
    @pulumi.getter
    def hooks(self) -> Sequence['outputs.GetInstanceGroupHookResult']:
        return pulumi.get(self, "hooks")

    @property
    @pulumi.getter
    def iams(self) -> Sequence['outputs.GetInstanceGroupIamResult']:
        return pulumi.get(self, "iams")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def image(self) -> str:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="instanceInterruptionBehavior")
    def instance_interruption_behavior(self) -> str:
        return pulumi.get(self, "instance_interruption_behavior")

    @property
    @pulumi.getter(name="instanceMetadatas")
    def instance_metadatas(self) -> Sequence['outputs.GetInstanceGroupInstanceMetadataResult']:
        return pulumi.get(self, "instance_metadatas")

    @property
    @pulumi.getter(name="instanceProtection")
    def instance_protection(self) -> bool:
        return pulumi.get(self, "instance_protection")

    @property
    @pulumi.getter
    def kubelets(self) -> Sequence['outputs.GetInstanceGroupKubeletResult']:
        return pulumi.get(self, "kubelets")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> str:
        return pulumi.get(self, "machine_type")

    @property
    @pulumi.getter
    def manager(self) -> str:
        return pulumi.get(self, "manager")

    @property
    @pulumi.getter(name="maxInstanceLifetime")
    def max_instance_lifetime(self) -> str:
        return pulumi.get(self, "max_instance_lifetime")

    @property
    @pulumi.getter(name="maxPrice")
    def max_price(self) -> str:
        return pulumi.get(self, "max_price")

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> int:
        return pulumi.get(self, "max_size")

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> int:
        return pulumi.get(self, "min_size")

    @property
    @pulumi.getter(name="mixedInstancesPolicies")
    def mixed_instances_policies(self) -> Sequence['outputs.GetInstanceGroupMixedInstancesPolicyResult']:
        return pulumi.get(self, "mixed_instances_policies")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeLabels")
    def node_labels(self) -> Mapping[str, str]:
        return pulumi.get(self, "node_labels")

    @property
    @pulumi.getter
    def packages(self) -> Sequence[str]:
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter
    def role(self) -> str:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="rollingUpdates")
    def rolling_updates(self) -> Sequence['outputs.GetInstanceGroupRollingUpdateResult']:
        return pulumi.get(self, "rolling_updates")

    @property
    @pulumi.getter(name="rootVolumeEncryption")
    def root_volume_encryption(self) -> bool:
        return pulumi.get(self, "root_volume_encryption")

    @property
    @pulumi.getter(name="rootVolumeEncryptionKey")
    def root_volume_encryption_key(self) -> str:
        return pulumi.get(self, "root_volume_encryption_key")

    @property
    @pulumi.getter(name="rootVolumeIops")
    def root_volume_iops(self) -> int:
        return pulumi.get(self, "root_volume_iops")

    @property
    @pulumi.getter(name="rootVolumeOptimization")
    def root_volume_optimization(self) -> bool:
        return pulumi.get(self, "root_volume_optimization")

    @property
    @pulumi.getter(name="rootVolumeSize")
    def root_volume_size(self) -> int:
        return pulumi.get(self, "root_volume_size")

    @property
    @pulumi.getter(name="rootVolumeThroughput")
    def root_volume_throughput(self) -> int:
        return pulumi.get(self, "root_volume_throughput")

    @property
    @pulumi.getter(name="rootVolumeType")
    def root_volume_type(self) -> str:
        return pulumi.get(self, "root_volume_type")

    @property
    @pulumi.getter(name="securityGroupOverride")
    def security_group_override(self) -> str:
        return pulumi.get(self, "security_group_override")

    @property
    @pulumi.getter(name="spotDurationInMinutes")
    def spot_duration_in_minutes(self) -> int:
        return pulumi.get(self, "spot_duration_in_minutes")

    @property
    @pulumi.getter
    def subnets(self) -> Sequence[str]:
        return pulumi.get(self, "subnets")

    @property
    @pulumi.getter(name="suspendProcesses")
    def suspend_processes(self) -> Sequence[str]:
        return pulumi.get(self, "suspend_processes")

    @property
    @pulumi.getter(name="sysctlParameters")
    def sysctl_parameters(self) -> Sequence[str]:
        return pulumi.get(self, "sysctl_parameters")

    @property
    @pulumi.getter
    def taints(self) -> Sequence[str]:
        return pulumi.get(self, "taints")

    @property
    @pulumi.getter
    def tenancy(self) -> str:
        return pulumi.get(self, "tenancy")

    @property
    @pulumi.getter(name="updatePolicy")
    def update_policy(self) -> str:
        return pulumi.get(self, "update_policy")

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Sequence['outputs.GetInstanceGroupVolumeMountResult']:
        return pulumi.get(self, "volume_mounts")

    @property
    @pulumi.getter
    def volumes(self) -> Sequence['outputs.GetInstanceGroupVolumeResult']:
        return pulumi.get(self, "volumes")

    @property
    @pulumi.getter(name="warmPools")
    def warm_pools(self) -> Sequence['outputs.GetInstanceGroupWarmPoolResult']:
        return pulumi.get(self, "warm_pools")

    @property
    @pulumi.getter
    def zones(self) -> Sequence[str]:
        return pulumi.get(self, "zones")


class AwaitableGetInstanceGroupResult(GetInstanceGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInstanceGroupResult(
            additional_security_groups=self.additional_security_groups,
            additional_user_datas=self.additional_user_datas,
            annotations=self.annotations,
            associate_public_ip=self.associate_public_ip,
            autoscale=self.autoscale,
            cloud_labels=self.cloud_labels,
            cluster_name=self.cluster_name,
            compress_user_data=self.compress_user_data,
            containerds=self.containerds,
            cpu_credits=self.cpu_credits,
            detailed_instance_monitoring=self.detailed_instance_monitoring,
            external_load_balancers=self.external_load_balancers,
            file_assets=self.file_assets,
            gcp_provisioning_model=self.gcp_provisioning_model,
            guest_accelerators=self.guest_accelerators,
            hooks=self.hooks,
            iams=self.iams,
            id=self.id,
            image=self.image,
            instance_interruption_behavior=self.instance_interruption_behavior,
            instance_metadatas=self.instance_metadatas,
            instance_protection=self.instance_protection,
            kubelets=self.kubelets,
            labels=self.labels,
            machine_type=self.machine_type,
            manager=self.manager,
            max_instance_lifetime=self.max_instance_lifetime,
            max_price=self.max_price,
            max_size=self.max_size,
            min_size=self.min_size,
            mixed_instances_policies=self.mixed_instances_policies,
            name=self.name,
            node_labels=self.node_labels,
            packages=self.packages,
            role=self.role,
            rolling_updates=self.rolling_updates,
            root_volume_encryption=self.root_volume_encryption,
            root_volume_encryption_key=self.root_volume_encryption_key,
            root_volume_iops=self.root_volume_iops,
            root_volume_optimization=self.root_volume_optimization,
            root_volume_size=self.root_volume_size,
            root_volume_throughput=self.root_volume_throughput,
            root_volume_type=self.root_volume_type,
            security_group_override=self.security_group_override,
            spot_duration_in_minutes=self.spot_duration_in_minutes,
            subnets=self.subnets,
            suspend_processes=self.suspend_processes,
            sysctl_parameters=self.sysctl_parameters,
            taints=self.taints,
            tenancy=self.tenancy,
            update_policy=self.update_policy,
            volume_mounts=self.volume_mounts,
            volumes=self.volumes,
            warm_pools=self.warm_pools,
            zones=self.zones)


def get_instance_group(cluster_name: Optional[str] = None,
                       name: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInstanceGroupResult:
    """
    Use this data source to access information about an existing resource.

    :param str cluster_name: - String - ClusterName defines the cluster name the instance group belongs to.
    :param str name: - String - Name defines the instance group name.
    """
    __args__ = dict()
    __args__['clusterName'] = cluster_name
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('kops:index/getInstanceGroup:getInstanceGroup', __args__, opts=opts, typ=GetInstanceGroupResult).value

    return AwaitableGetInstanceGroupResult(
        additional_security_groups=__ret__.additional_security_groups,
        additional_user_datas=__ret__.additional_user_datas,
        annotations=__ret__.annotations,
        associate_public_ip=__ret__.associate_public_ip,
        autoscale=__ret__.autoscale,
        cloud_labels=__ret__.cloud_labels,
        cluster_name=__ret__.cluster_name,
        compress_user_data=__ret__.compress_user_data,
        containerds=__ret__.containerds,
        cpu_credits=__ret__.cpu_credits,
        detailed_instance_monitoring=__ret__.detailed_instance_monitoring,
        external_load_balancers=__ret__.external_load_balancers,
        file_assets=__ret__.file_assets,
        gcp_provisioning_model=__ret__.gcp_provisioning_model,
        guest_accelerators=__ret__.guest_accelerators,
        hooks=__ret__.hooks,
        iams=__ret__.iams,
        id=__ret__.id,
        image=__ret__.image,
        instance_interruption_behavior=__ret__.instance_interruption_behavior,
        instance_metadatas=__ret__.instance_metadatas,
        instance_protection=__ret__.instance_protection,
        kubelets=__ret__.kubelets,
        labels=__ret__.labels,
        machine_type=__ret__.machine_type,
        manager=__ret__.manager,
        max_instance_lifetime=__ret__.max_instance_lifetime,
        max_price=__ret__.max_price,
        max_size=__ret__.max_size,
        min_size=__ret__.min_size,
        mixed_instances_policies=__ret__.mixed_instances_policies,
        name=__ret__.name,
        node_labels=__ret__.node_labels,
        packages=__ret__.packages,
        role=__ret__.role,
        rolling_updates=__ret__.rolling_updates,
        root_volume_encryption=__ret__.root_volume_encryption,
        root_volume_encryption_key=__ret__.root_volume_encryption_key,
        root_volume_iops=__ret__.root_volume_iops,
        root_volume_optimization=__ret__.root_volume_optimization,
        root_volume_size=__ret__.root_volume_size,
        root_volume_throughput=__ret__.root_volume_throughput,
        root_volume_type=__ret__.root_volume_type,
        security_group_override=__ret__.security_group_override,
        spot_duration_in_minutes=__ret__.spot_duration_in_minutes,
        subnets=__ret__.subnets,
        suspend_processes=__ret__.suspend_processes,
        sysctl_parameters=__ret__.sysctl_parameters,
        taints=__ret__.taints,
        tenancy=__ret__.tenancy,
        update_policy=__ret__.update_policy,
        volume_mounts=__ret__.volume_mounts,
        volumes=__ret__.volumes,
        warm_pools=__ret__.warm_pools,
        zones=__ret__.zones)


@_utilities.lift_output_func(get_instance_group)
def get_instance_group_output(cluster_name: Optional[pulumi.Input[str]] = None,
                              name: Optional[pulumi.Input[str]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetInstanceGroupResult]:
    """
    Use this data source to access information about an existing resource.

    :param str cluster_name: - String - ClusterName defines the cluster name the instance group belongs to.
    :param str name: - String - Name defines the instance group name.
    """
    ...
