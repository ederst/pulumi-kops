# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'ClusterAddonArgs',
    'ClusterApiArgs',
    'ClusterApiDnsArgs',
    'ClusterApiLoadBalancerArgs',
    'ClusterApiLoadBalancerAccessLogArgs',
    'ClusterApiLoadBalancerSubnetArgs',
    'ClusterAssetsArgs',
    'ClusterAuthenticationArgs',
    'ClusterAuthenticationAwsArgs',
    'ClusterAuthenticationAwsIdentityMappingArgs',
    'ClusterAuthenticationKopeioArgs',
    'ClusterAuthorizationArgs',
    'ClusterAuthorizationAlwaysAllowArgs',
    'ClusterAuthorizationRbacArgs',
    'ClusterAwsLoadBalancerControllerArgs',
    'ClusterCertManagerArgs',
    'ClusterCloudConfigArgs',
    'ClusterCloudConfigAwsEbsCsiDriverArgs',
    'ClusterCloudConfigGcpPdCsiDriverArgs',
    'ClusterCloudProviderArgs',
    'ClusterCloudProviderAwsArgs',
    'ClusterCloudProviderAzureArgs',
    'ClusterCloudProviderDoArgs',
    'ClusterCloudProviderGceArgs',
    'ClusterCloudProviderHetznerArgs',
    'ClusterCloudProviderOpenstackArgs',
    'ClusterCloudProviderOpenstackBlockStorageArgs',
    'ClusterCloudProviderOpenstackLoadbalancerArgs',
    'ClusterCloudProviderOpenstackMetadataArgs',
    'ClusterCloudProviderOpenstackMonitorArgs',
    'ClusterCloudProviderOpenstackNetworkArgs',
    'ClusterCloudProviderOpenstackRouterArgs',
    'ClusterClusterAutoscalerArgs',
    'ClusterContainerdArgs',
    'ClusterContainerdNvidiaGpuArgs',
    'ClusterContainerdPackagesArgs',
    'ClusterContainerdRegistryMirrorArgs',
    'ClusterContainerdRuncArgs',
    'ClusterContainerdRuncPackagesArgs',
    'ClusterDockerArgs',
    'ClusterDockerPackagesArgs',
    'ClusterEgressProxyArgs',
    'ClusterEgressProxyHttpProxyArgs',
    'ClusterEtcdClusterArgs',
    'ClusterEtcdClusterBackupsArgs',
    'ClusterEtcdClusterManagerArgs',
    'ClusterEtcdClusterManagerEnvArgs',
    'ClusterEtcdClusterMemberArgs',
    'ClusterExternalCloudControllerManagerArgs',
    'ClusterExternalCloudControllerManagerLeaderElectionArgs',
    'ClusterExternalDnsArgs',
    'ClusterExternalPolicyArgs',
    'ClusterFileAssetArgs',
    'ClusterHookArgs',
    'ClusterHookExecContainerArgs',
    'ClusterIamArgs',
    'ClusterIamServiceAccountExternalPermissionArgs',
    'ClusterIamServiceAccountExternalPermissionAwsArgs',
    'ClusterKarpenterArgs',
    'ClusterKubeApiServerArgs',
    'ClusterKubeApiServerAnonymousAuthArgs',
    'ClusterKubeControllerManagerArgs',
    'ClusterKubeControllerManagerLeaderElectionArgs',
    'ClusterKubeDnsArgs',
    'ClusterKubeDnsAffinityArgs',
    'ClusterKubeDnsAffinityNodeAffinityArgs',
    'ClusterKubeDnsAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs',
    'ClusterKubeDnsAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs',
    'ClusterKubeDnsAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionArgs',
    'ClusterKubeDnsAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldArgs',
    'ClusterKubeDnsAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs',
    'ClusterKubeDnsAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermArgs',
    'ClusterKubeDnsAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpressionArgs',
    'ClusterKubeDnsAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchFieldArgs',
    'ClusterKubeDnsAffinityPodAffinityArgs',
    'ClusterKubeDnsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs',
    'ClusterKubeDnsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs',
    'ClusterKubeDnsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs',
    'ClusterKubeDnsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionArgs',
    'ClusterKubeDnsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs',
    'ClusterKubeDnsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionArgs',
    'ClusterKubeDnsAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs',
    'ClusterKubeDnsAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs',
    'ClusterKubeDnsAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionArgs',
    'ClusterKubeDnsAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs',
    'ClusterKubeDnsAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionArgs',
    'ClusterKubeDnsAffinityPodAntiAffinityArgs',
    'ClusterKubeDnsAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs',
    'ClusterKubeDnsAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs',
    'ClusterKubeDnsAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs',
    'ClusterKubeDnsAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionArgs',
    'ClusterKubeDnsAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs',
    'ClusterKubeDnsAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionArgs',
    'ClusterKubeDnsAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs',
    'ClusterKubeDnsAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs',
    'ClusterKubeDnsAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionArgs',
    'ClusterKubeDnsAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs',
    'ClusterKubeDnsAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionArgs',
    'ClusterKubeDnsNodeLocalDnsArgs',
    'ClusterKubeDnsStubDomainArgs',
    'ClusterKubeDnsTolerationArgs',
    'ClusterKubeProxyArgs',
    'ClusterKubeSchedulerArgs',
    'ClusterKubeSchedulerLeaderElectionArgs',
    'ClusterKubeletArgs',
    'ClusterKubeletAnonymousAuthArgs',
    'ClusterKubeletCpuCfsQuotaArgs',
    'ClusterMasterKubeletArgs',
    'ClusterMasterKubeletAnonymousAuthArgs',
    'ClusterMasterKubeletCpuCfsQuotaArgs',
    'ClusterMetricsServerArgs',
    'ClusterNetworkingArgs',
    'ClusterNetworkingAmazonVpcArgs',
    'ClusterNetworkingAmazonVpcEnvArgs',
    'ClusterNetworkingCalicoArgs',
    'ClusterNetworkingCanalArgs',
    'ClusterNetworkingCiliumArgs',
    'ClusterNetworkingCiliumHubbleArgs',
    'ClusterNetworkingClassicArgs',
    'ClusterNetworkingCniArgs',
    'ClusterNetworkingExternalArgs',
    'ClusterNetworkingFlannelArgs',
    'ClusterNetworkingGceArgs',
    'ClusterNetworkingKopeioArgs',
    'ClusterNetworkingKubenetArgs',
    'ClusterNetworkingKuberouterArgs',
    'ClusterNetworkingLyftVpcArgs',
    'ClusterNetworkingRomanaArgs',
    'ClusterNetworkingWeaveArgs',
    'ClusterNodeAuthorizationArgs',
    'ClusterNodeAuthorizationNodeAuthorizerArgs',
    'ClusterNodeProblemDetectorArgs',
    'ClusterNodeTerminationHandlerArgs',
    'ClusterNtpArgs',
    'ClusterPodIdentityWebhookArgs',
    'ClusterRollingUpdateArgs',
    'ClusterSecretsArgs',
    'ClusterServiceAccountIssuerDiscoveryArgs',
    'ClusterSnapshotControllerArgs',
    'ClusterSubnetArgs',
    'ClusterSubnetAdditionalRouteArgs',
    'ClusterTagSubnetsArgs',
    'ClusterTopologyArgs',
    'ClusterTopologyBastionArgs',
    'ClusterTopologyBastionLoadBalancerArgs',
    'ClusterTopologyDnsArgs',
    'ClusterUpdaterApplyArgs',
    'ClusterUpdaterRollingUpdateArgs',
    'ClusterUpdaterValidateArgs',
    'ClusterWarmPoolArgs',
    'InstanceGroupAdditionalUserDataArgs',
    'InstanceGroupContainerdArgs',
    'InstanceGroupContainerdNvidiaGpuArgs',
    'InstanceGroupContainerdPackagesArgs',
    'InstanceGroupContainerdRegistryMirrorArgs',
    'InstanceGroupContainerdRuncArgs',
    'InstanceGroupContainerdRuncPackagesArgs',
    'InstanceGroupExternalLoadBalancerArgs',
    'InstanceGroupFileAssetArgs',
    'InstanceGroupGuestAcceleratorArgs',
    'InstanceGroupHookArgs',
    'InstanceGroupHookExecContainerArgs',
    'InstanceGroupIamArgs',
    'InstanceGroupInstanceMetadataArgs',
    'InstanceGroupKubeletArgs',
    'InstanceGroupKubeletAnonymousAuthArgs',
    'InstanceGroupKubeletCpuCfsQuotaArgs',
    'InstanceGroupMixedInstancesPolicyArgs',
    'InstanceGroupMixedInstancesPolicyInstanceRequirementsArgs',
    'InstanceGroupMixedInstancesPolicyInstanceRequirementsCpuArgs',
    'InstanceGroupMixedInstancesPolicyInstanceRequirementsMemoryArgs',
    'InstanceGroupMixedInstancesPolicyOnDemandAboveBaseArgs',
    'InstanceGroupMixedInstancesPolicyOnDemandBaseArgs',
    'InstanceGroupRollingUpdateArgs',
    'InstanceGroupVolumeArgs',
    'InstanceGroupVolumeMountArgs',
    'InstanceGroupWarmPoolArgs',
    'ProviderAwsArgs',
    'ProviderAwsAssumeRoleArgs',
    'ProviderKlogArgs',
    'ProviderKlogVerbosityArgs',
    'ProviderOpenstackArgs',
    'GetClusterExternalPolicyArgs',
    'GetClusterTagSubnetsArgs',
]

@pulumi.input_type
class ClusterAddonArgs:
    def __init__(__self__, *,
                 manifest: pulumi.Input[str]):
        pulumi.set(__self__, "manifest", manifest)

    @property
    @pulumi.getter
    def manifest(self) -> pulumi.Input[str]:
        return pulumi.get(self, "manifest")

    @manifest.setter
    def manifest(self, value: pulumi.Input[str]):
        pulumi.set(self, "manifest", value)


@pulumi.input_type
class ClusterApiArgs:
    def __init__(__self__, *,
                 dns: Optional[pulumi.Input['ClusterApiDnsArgs']] = None,
                 load_balancer: Optional[pulumi.Input['ClusterApiLoadBalancerArgs']] = None):
        if dns is not None:
            pulumi.set(__self__, "dns", dns)
        if load_balancer is not None:
            pulumi.set(__self__, "load_balancer", load_balancer)

    @property
    @pulumi.getter
    def dns(self) -> Optional[pulumi.Input['ClusterApiDnsArgs']]:
        return pulumi.get(self, "dns")

    @dns.setter
    def dns(self, value: Optional[pulumi.Input['ClusterApiDnsArgs']]):
        pulumi.set(self, "dns", value)

    @property
    @pulumi.getter(name="loadBalancer")
    def load_balancer(self) -> Optional[pulumi.Input['ClusterApiLoadBalancerArgs']]:
        return pulumi.get(self, "load_balancer")

    @load_balancer.setter
    def load_balancer(self, value: Optional[pulumi.Input['ClusterApiLoadBalancerArgs']]):
        pulumi.set(self, "load_balancer", value)


@pulumi.input_type
class ClusterApiDnsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ClusterApiLoadBalancerArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 access_log: Optional[pulumi.Input['ClusterApiLoadBalancerAccessLogArgs']] = None,
                 additional_security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 class_: Optional[pulumi.Input[str]] = None,
                 cross_zone_load_balancing: Optional[pulumi.Input[bool]] = None,
                 idle_timeout_seconds: Optional[pulumi.Input[int]] = None,
                 security_group_override: Optional[pulumi.Input[str]] = None,
                 ssl_certificate: Optional[pulumi.Input[str]] = None,
                 ssl_policy: Optional[pulumi.Input[str]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterApiLoadBalancerSubnetArgs']]]] = None,
                 use_for_internal_api: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "type", type)
        if access_log is not None:
            pulumi.set(__self__, "access_log", access_log)
        if additional_security_groups is not None:
            pulumi.set(__self__, "additional_security_groups", additional_security_groups)
        if class_ is not None:
            pulumi.set(__self__, "class_", class_)
        if cross_zone_load_balancing is not None:
            pulumi.set(__self__, "cross_zone_load_balancing", cross_zone_load_balancing)
        if idle_timeout_seconds is not None:
            pulumi.set(__self__, "idle_timeout_seconds", idle_timeout_seconds)
        if security_group_override is not None:
            pulumi.set(__self__, "security_group_override", security_group_override)
        if ssl_certificate is not None:
            pulumi.set(__self__, "ssl_certificate", ssl_certificate)
        if ssl_policy is not None:
            pulumi.set(__self__, "ssl_policy", ssl_policy)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)
        if use_for_internal_api is not None:
            pulumi.set(__self__, "use_for_internal_api", use_for_internal_api)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="accessLog")
    def access_log(self) -> Optional[pulumi.Input['ClusterApiLoadBalancerAccessLogArgs']]:
        return pulumi.get(self, "access_log")

    @access_log.setter
    def access_log(self, value: Optional[pulumi.Input['ClusterApiLoadBalancerAccessLogArgs']]):
        pulumi.set(self, "access_log", value)

    @property
    @pulumi.getter(name="additionalSecurityGroups")
    def additional_security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "additional_security_groups")

    @additional_security_groups.setter
    def additional_security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "additional_security_groups", value)

    @property
    @pulumi.getter(name="class")
    def class_(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "class_")

    @class_.setter
    def class_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "class_", value)

    @property
    @pulumi.getter(name="crossZoneLoadBalancing")
    def cross_zone_load_balancing(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "cross_zone_load_balancing")

    @cross_zone_load_balancing.setter
    def cross_zone_load_balancing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cross_zone_load_balancing", value)

    @property
    @pulumi.getter(name="idleTimeoutSeconds")
    def idle_timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "idle_timeout_seconds")

    @idle_timeout_seconds.setter
    def idle_timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "idle_timeout_seconds", value)

    @property
    @pulumi.getter(name="securityGroupOverride")
    def security_group_override(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_group_override")

    @security_group_override.setter
    def security_group_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_group_override", value)

    @property
    @pulumi.getter(name="sslCertificate")
    def ssl_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_certificate")

    @ssl_certificate.setter
    def ssl_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_certificate", value)

    @property
    @pulumi.getter(name="sslPolicy")
    def ssl_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_policy")

    @ssl_policy.setter
    def ssl_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_policy", value)

    @property
    @pulumi.getter
    def subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterApiLoadBalancerSubnetArgs']]]]:
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterApiLoadBalancerSubnetArgs']]]]):
        pulumi.set(self, "subnets", value)

    @property
    @pulumi.getter(name="useForInternalApi")
    def use_for_internal_api(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_for_internal_api")

    @use_for_internal_api.setter
    def use_for_internal_api(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_for_internal_api", value)


@pulumi.input_type
class ClusterApiLoadBalancerAccessLogArgs:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 bucket_prefix: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if bucket_prefix is not None:
            pulumi.set(__self__, "bucket_prefix", bucket_prefix)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="bucketPrefix")
    def bucket_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket_prefix")

    @bucket_prefix.setter
    def bucket_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_prefix", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class ClusterApiLoadBalancerSubnetArgs:
    def __init__(__self__, *,
                 allocation_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 private_ipv4_address: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: - (Force new) - String - Name defines the cluster name.
        """
        if allocation_id is not None:
            pulumi.set(__self__, "allocation_id", allocation_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_ipv4_address is not None:
            pulumi.set(__self__, "private_ipv4_address", private_ipv4_address)

    @property
    @pulumi.getter(name="allocationId")
    def allocation_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allocation_id")

    @allocation_id.setter
    def allocation_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allocation_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - (Force new) - String - Name defines the cluster name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="privateIpv4Address")
    def private_ipv4_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "private_ipv4_address")

    @private_ipv4_address.setter
    def private_ipv4_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_ipv4_address", value)


@pulumi.input_type
class ClusterAssetsArgs:
    def __init__(__self__, *,
                 container_proxy: Optional[pulumi.Input[str]] = None,
                 container_registry: Optional[pulumi.Input[str]] = None,
                 file_repository: Optional[pulumi.Input[str]] = None):
        if container_proxy is not None:
            pulumi.set(__self__, "container_proxy", container_proxy)
        if container_registry is not None:
            pulumi.set(__self__, "container_registry", container_registry)
        if file_repository is not None:
            pulumi.set(__self__, "file_repository", file_repository)

    @property
    @pulumi.getter(name="containerProxy")
    def container_proxy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "container_proxy")

    @container_proxy.setter
    def container_proxy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_proxy", value)

    @property
    @pulumi.getter(name="containerRegistry")
    def container_registry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "container_registry")

    @container_registry.setter
    def container_registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_registry", value)

    @property
    @pulumi.getter(name="fileRepository")
    def file_repository(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file_repository")

    @file_repository.setter
    def file_repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_repository", value)


@pulumi.input_type
class ClusterAuthenticationArgs:
    def __init__(__self__, *,
                 aws: Optional[pulumi.Input['ClusterAuthenticationAwsArgs']] = None,
                 kopeio: Optional[pulumi.Input['ClusterAuthenticationKopeioArgs']] = None):
        if aws is not None:
            pulumi.set(__self__, "aws", aws)
        if kopeio is not None:
            pulumi.set(__self__, "kopeio", kopeio)

    @property
    @pulumi.getter
    def aws(self) -> Optional[pulumi.Input['ClusterAuthenticationAwsArgs']]:
        return pulumi.get(self, "aws")

    @aws.setter
    def aws(self, value: Optional[pulumi.Input['ClusterAuthenticationAwsArgs']]):
        pulumi.set(self, "aws", value)

    @property
    @pulumi.getter
    def kopeio(self) -> Optional[pulumi.Input['ClusterAuthenticationKopeioArgs']]:
        return pulumi.get(self, "kopeio")

    @kopeio.setter
    def kopeio(self, value: Optional[pulumi.Input['ClusterAuthenticationKopeioArgs']]):
        pulumi.set(self, "kopeio", value)


@pulumi.input_type
class ClusterAuthenticationAwsArgs:
    def __init__(__self__, *,
                 backend_mode: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 cpu_limit: Optional[pulumi.Input[str]] = None,
                 cpu_request: Optional[pulumi.Input[str]] = None,
                 identity_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterAuthenticationAwsIdentityMappingArgs']]]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 memory_limit: Optional[pulumi.Input[str]] = None,
                 memory_request: Optional[pulumi.Input[str]] = None):
        if backend_mode is not None:
            pulumi.set(__self__, "backend_mode", backend_mode)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if cpu_limit is not None:
            pulumi.set(__self__, "cpu_limit", cpu_limit)
        if cpu_request is not None:
            pulumi.set(__self__, "cpu_request", cpu_request)
        if identity_mappings is not None:
            pulumi.set(__self__, "identity_mappings", identity_mappings)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if memory_limit is not None:
            pulumi.set(__self__, "memory_limit", memory_limit)
        if memory_request is not None:
            pulumi.set(__self__, "memory_request", memory_request)

    @property
    @pulumi.getter(name="backendMode")
    def backend_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "backend_mode")

    @backend_mode.setter
    def backend_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backend_mode", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="cpuLimit")
    def cpu_limit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpu_limit")

    @cpu_limit.setter
    def cpu_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_limit", value)

    @property
    @pulumi.getter(name="cpuRequest")
    def cpu_request(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpu_request")

    @cpu_request.setter
    def cpu_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_request", value)

    @property
    @pulumi.getter(name="identityMappings")
    def identity_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterAuthenticationAwsIdentityMappingArgs']]]]:
        return pulumi.get(self, "identity_mappings")

    @identity_mappings.setter
    def identity_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterAuthenticationAwsIdentityMappingArgs']]]]):
        pulumi.set(self, "identity_mappings", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="memoryLimit")
    def memory_limit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "memory_limit")

    @memory_limit.setter
    def memory_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory_limit", value)

    @property
    @pulumi.getter(name="memoryRequest")
    def memory_request(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "memory_request")

    @memory_request.setter
    def memory_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory_request", value)


@pulumi.input_type
class ClusterAuthenticationAwsIdentityMappingArgs:
    def __init__(__self__, *,
                 arn: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arn", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ClusterAuthenticationKopeioArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ClusterAuthorizationArgs:
    def __init__(__self__, *,
                 always_allow: Optional[pulumi.Input['ClusterAuthorizationAlwaysAllowArgs']] = None,
                 rbac: Optional[pulumi.Input['ClusterAuthorizationRbacArgs']] = None):
        if always_allow is not None:
            pulumi.set(__self__, "always_allow", always_allow)
        if rbac is not None:
            pulumi.set(__self__, "rbac", rbac)

    @property
    @pulumi.getter(name="alwaysAllow")
    def always_allow(self) -> Optional[pulumi.Input['ClusterAuthorizationAlwaysAllowArgs']]:
        return pulumi.get(self, "always_allow")

    @always_allow.setter
    def always_allow(self, value: Optional[pulumi.Input['ClusterAuthorizationAlwaysAllowArgs']]):
        pulumi.set(self, "always_allow", value)

    @property
    @pulumi.getter
    def rbac(self) -> Optional[pulumi.Input['ClusterAuthorizationRbacArgs']]:
        return pulumi.get(self, "rbac")

    @rbac.setter
    def rbac(self, value: Optional[pulumi.Input['ClusterAuthorizationRbacArgs']]):
        pulumi.set(self, "rbac", value)


@pulumi.input_type
class ClusterAuthorizationAlwaysAllowArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ClusterAuthorizationRbacArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ClusterAwsLoadBalancerControllerArgs:
    def __init__(__self__, *,
                 enable_shield: Optional[pulumi.Input[bool]] = None,
                 enable_wa_fv2: Optional[pulumi.Input[bool]] = None,
                 enable_waf: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        if enable_shield is not None:
            pulumi.set(__self__, "enable_shield", enable_shield)
        if enable_wa_fv2 is not None:
            pulumi.set(__self__, "enable_wa_fv2", enable_wa_fv2)
        if enable_waf is not None:
            pulumi.set(__self__, "enable_waf", enable_waf)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="enableShield")
    def enable_shield(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_shield")

    @enable_shield.setter
    def enable_shield(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_shield", value)

    @property
    @pulumi.getter(name="enableWaFv2")
    def enable_wa_fv2(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_wa_fv2")

    @enable_wa_fv2.setter
    def enable_wa_fv2(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_wa_fv2", value)

    @property
    @pulumi.getter(name="enableWaf")
    def enable_waf(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_waf")

    @enable_waf.setter
    def enable_waf(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_waf", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ClusterCertManagerArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 managed: pulumi.Input[bool],
                 default_issuer: Optional[pulumi.Input[str]] = None,
                 hosted_zone_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 nameservers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "managed", managed)
        if default_issuer is not None:
            pulumi.set(__self__, "default_issuer", default_issuer)
        if hosted_zone_ids is not None:
            pulumi.set(__self__, "hosted_zone_ids", hosted_zone_ids)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if nameservers is not None:
            pulumi.set(__self__, "nameservers", nameservers)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def managed(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "managed")

    @managed.setter
    def managed(self, value: pulumi.Input[bool]):
        pulumi.set(self, "managed", value)

    @property
    @pulumi.getter(name="defaultIssuer")
    def default_issuer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_issuer")

    @default_issuer.setter
    def default_issuer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_issuer", value)

    @property
    @pulumi.getter(name="hostedZoneIds")
    def hosted_zone_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "hosted_zone_ids")

    @hosted_zone_ids.setter
    def hosted_zone_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hosted_zone_ids", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def nameservers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "nameservers")

    @nameservers.setter
    def nameservers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "nameservers", value)


@pulumi.input_type
class ClusterCloudConfigArgs:
    def __init__(__self__, *,
                 aws_ebs_csi_driver: Optional[pulumi.Input['ClusterCloudConfigAwsEbsCsiDriverArgs']] = None,
                 disable_security_group_ingress: Optional[pulumi.Input[bool]] = None,
                 elb_security_group: Optional[pulumi.Input[str]] = None,
                 gce_service_account: Optional[pulumi.Input[str]] = None,
                 gcp_pd_csi_driver: Optional[pulumi.Input['ClusterCloudConfigGcpPdCsiDriverArgs']] = None,
                 manage_storage_classes: Optional[pulumi.Input[bool]] = None,
                 multizone: Optional[pulumi.Input[bool]] = None,
                 node_instance_prefix: Optional[pulumi.Input[str]] = None,
                 node_ip_families: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 node_tags: Optional[pulumi.Input[str]] = None,
                 spotinst_orientation: Optional[pulumi.Input[str]] = None,
                 spotinst_product: Optional[pulumi.Input[str]] = None):
        if aws_ebs_csi_driver is not None:
            pulumi.set(__self__, "aws_ebs_csi_driver", aws_ebs_csi_driver)
        if disable_security_group_ingress is not None:
            pulumi.set(__self__, "disable_security_group_ingress", disable_security_group_ingress)
        if elb_security_group is not None:
            pulumi.set(__self__, "elb_security_group", elb_security_group)
        if gce_service_account is not None:
            pulumi.set(__self__, "gce_service_account", gce_service_account)
        if gcp_pd_csi_driver is not None:
            pulumi.set(__self__, "gcp_pd_csi_driver", gcp_pd_csi_driver)
        if manage_storage_classes is not None:
            pulumi.set(__self__, "manage_storage_classes", manage_storage_classes)
        if multizone is not None:
            pulumi.set(__self__, "multizone", multizone)
        if node_instance_prefix is not None:
            pulumi.set(__self__, "node_instance_prefix", node_instance_prefix)
        if node_ip_families is not None:
            pulumi.set(__self__, "node_ip_families", node_ip_families)
        if node_tags is not None:
            pulumi.set(__self__, "node_tags", node_tags)
        if spotinst_orientation is not None:
            pulumi.set(__self__, "spotinst_orientation", spotinst_orientation)
        if spotinst_product is not None:
            pulumi.set(__self__, "spotinst_product", spotinst_product)

    @property
    @pulumi.getter(name="awsEbsCsiDriver")
    def aws_ebs_csi_driver(self) -> Optional[pulumi.Input['ClusterCloudConfigAwsEbsCsiDriverArgs']]:
        return pulumi.get(self, "aws_ebs_csi_driver")

    @aws_ebs_csi_driver.setter
    def aws_ebs_csi_driver(self, value: Optional[pulumi.Input['ClusterCloudConfigAwsEbsCsiDriverArgs']]):
        pulumi.set(self, "aws_ebs_csi_driver", value)

    @property
    @pulumi.getter(name="disableSecurityGroupIngress")
    def disable_security_group_ingress(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disable_security_group_ingress")

    @disable_security_group_ingress.setter
    def disable_security_group_ingress(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_security_group_ingress", value)

    @property
    @pulumi.getter(name="elbSecurityGroup")
    def elb_security_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "elb_security_group")

    @elb_security_group.setter
    def elb_security_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elb_security_group", value)

    @property
    @pulumi.getter(name="gceServiceAccount")
    def gce_service_account(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gce_service_account")

    @gce_service_account.setter
    def gce_service_account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gce_service_account", value)

    @property
    @pulumi.getter(name="gcpPdCsiDriver")
    def gcp_pd_csi_driver(self) -> Optional[pulumi.Input['ClusterCloudConfigGcpPdCsiDriverArgs']]:
        return pulumi.get(self, "gcp_pd_csi_driver")

    @gcp_pd_csi_driver.setter
    def gcp_pd_csi_driver(self, value: Optional[pulumi.Input['ClusterCloudConfigGcpPdCsiDriverArgs']]):
        pulumi.set(self, "gcp_pd_csi_driver", value)

    @property
    @pulumi.getter(name="manageStorageClasses")
    def manage_storage_classes(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "manage_storage_classes")

    @manage_storage_classes.setter
    def manage_storage_classes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "manage_storage_classes", value)

    @property
    @pulumi.getter
    def multizone(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "multizone")

    @multizone.setter
    def multizone(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "multizone", value)

    @property
    @pulumi.getter(name="nodeInstancePrefix")
    def node_instance_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "node_instance_prefix")

    @node_instance_prefix.setter
    def node_instance_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_instance_prefix", value)

    @property
    @pulumi.getter(name="nodeIpFamilies")
    def node_ip_families(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "node_ip_families")

    @node_ip_families.setter
    def node_ip_families(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "node_ip_families", value)

    @property
    @pulumi.getter(name="nodeTags")
    def node_tags(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "node_tags")

    @node_tags.setter
    def node_tags(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_tags", value)

    @property
    @pulumi.getter(name="spotinstOrientation")
    def spotinst_orientation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spotinst_orientation")

    @spotinst_orientation.setter
    def spotinst_orientation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spotinst_orientation", value)

    @property
    @pulumi.getter(name="spotinstProduct")
    def spotinst_product(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spotinst_product")

    @spotinst_product.setter
    def spotinst_product(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spotinst_product", value)


@pulumi.input_type
class ClusterCloudConfigAwsEbsCsiDriverArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 managed: Optional[pulumi.Input[bool]] = None,
                 pod_annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 volume_attach_limit: Optional[pulumi.Input[int]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if managed is not None:
            pulumi.set(__self__, "managed", managed)
        if pod_annotations is not None:
            pulumi.set(__self__, "pod_annotations", pod_annotations)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if volume_attach_limit is not None:
            pulumi.set(__self__, "volume_attach_limit", volume_attach_limit)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def managed(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "managed")

    @managed.setter
    def managed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "managed", value)

    @property
    @pulumi.getter(name="podAnnotations")
    def pod_annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "pod_annotations")

    @pod_annotations.setter
    def pod_annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "pod_annotations", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="volumeAttachLimit")
    def volume_attach_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "volume_attach_limit")

    @volume_attach_limit.setter
    def volume_attach_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "volume_attach_limit", value)


@pulumi.input_type
class ClusterCloudConfigGcpPdCsiDriverArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class ClusterCloudProviderArgs:
    def __init__(__self__, *,
                 aws: Optional[pulumi.Input['ClusterCloudProviderAwsArgs']] = None,
                 azure: Optional[pulumi.Input['ClusterCloudProviderAzureArgs']] = None,
                 do: Optional[pulumi.Input['ClusterCloudProviderDoArgs']] = None,
                 gce: Optional[pulumi.Input['ClusterCloudProviderGceArgs']] = None,
                 hetzner: Optional[pulumi.Input['ClusterCloudProviderHetznerArgs']] = None,
                 openstack: Optional[pulumi.Input['ClusterCloudProviderOpenstackArgs']] = None):
        if aws is not None:
            pulumi.set(__self__, "aws", aws)
        if azure is not None:
            pulumi.set(__self__, "azure", azure)
        if do is not None:
            pulumi.set(__self__, "do", do)
        if gce is not None:
            pulumi.set(__self__, "gce", gce)
        if hetzner is not None:
            pulumi.set(__self__, "hetzner", hetzner)
        if openstack is not None:
            pulumi.set(__self__, "openstack", openstack)

    @property
    @pulumi.getter
    def aws(self) -> Optional[pulumi.Input['ClusterCloudProviderAwsArgs']]:
        return pulumi.get(self, "aws")

    @aws.setter
    def aws(self, value: Optional[pulumi.Input['ClusterCloudProviderAwsArgs']]):
        pulumi.set(self, "aws", value)

    @property
    @pulumi.getter
    def azure(self) -> Optional[pulumi.Input['ClusterCloudProviderAzureArgs']]:
        return pulumi.get(self, "azure")

    @azure.setter
    def azure(self, value: Optional[pulumi.Input['ClusterCloudProviderAzureArgs']]):
        pulumi.set(self, "azure", value)

    @property
    @pulumi.getter
    def do(self) -> Optional[pulumi.Input['ClusterCloudProviderDoArgs']]:
        return pulumi.get(self, "do")

    @do.setter
    def do(self, value: Optional[pulumi.Input['ClusterCloudProviderDoArgs']]):
        pulumi.set(self, "do", value)

    @property
    @pulumi.getter
    def gce(self) -> Optional[pulumi.Input['ClusterCloudProviderGceArgs']]:
        return pulumi.get(self, "gce")

    @gce.setter
    def gce(self, value: Optional[pulumi.Input['ClusterCloudProviderGceArgs']]):
        pulumi.set(self, "gce", value)

    @property
    @pulumi.getter
    def hetzner(self) -> Optional[pulumi.Input['ClusterCloudProviderHetznerArgs']]:
        return pulumi.get(self, "hetzner")

    @hetzner.setter
    def hetzner(self, value: Optional[pulumi.Input['ClusterCloudProviderHetznerArgs']]):
        pulumi.set(self, "hetzner", value)

    @property
    @pulumi.getter
    def openstack(self) -> Optional[pulumi.Input['ClusterCloudProviderOpenstackArgs']]:
        return pulumi.get(self, "openstack")

    @openstack.setter
    def openstack(self, value: Optional[pulumi.Input['ClusterCloudProviderOpenstackArgs']]):
        pulumi.set(self, "openstack", value)


@pulumi.input_type
class ClusterCloudProviderAwsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ClusterCloudProviderAzureArgs:
    def __init__(__self__, *,
                 admin_user: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 route_table_name: Optional[pulumi.Input[str]] = None,
                 subscription_id: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None):
        if admin_user is not None:
            pulumi.set(__self__, "admin_user", admin_user)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if route_table_name is not None:
            pulumi.set(__self__, "route_table_name", route_table_name)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="adminUser")
    def admin_user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_user")

    @admin_user.setter
    def admin_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_user", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="routeTableName")
    def route_table_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_table_name")

    @route_table_name.setter
    def route_table_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_table_name", value)

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscription_id", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)


@pulumi.input_type
class ClusterCloudProviderDoArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ClusterCloudProviderGceArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ClusterCloudProviderHetznerArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ClusterCloudProviderOpenstackArgs:
    def __init__(__self__, *,
                 block_storage: Optional[pulumi.Input['ClusterCloudProviderOpenstackBlockStorageArgs']] = None,
                 insecure_skip_verify: Optional[pulumi.Input[bool]] = None,
                 loadbalancer: Optional[pulumi.Input['ClusterCloudProviderOpenstackLoadbalancerArgs']] = None,
                 metadata: Optional[pulumi.Input['ClusterCloudProviderOpenstackMetadataArgs']] = None,
                 monitor: Optional[pulumi.Input['ClusterCloudProviderOpenstackMonitorArgs']] = None,
                 network: Optional[pulumi.Input['ClusterCloudProviderOpenstackNetworkArgs']] = None,
                 router: Optional[pulumi.Input['ClusterCloudProviderOpenstackRouterArgs']] = None):
        if block_storage is not None:
            pulumi.set(__self__, "block_storage", block_storage)
        if insecure_skip_verify is not None:
            pulumi.set(__self__, "insecure_skip_verify", insecure_skip_verify)
        if loadbalancer is not None:
            pulumi.set(__self__, "loadbalancer", loadbalancer)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if monitor is not None:
            pulumi.set(__self__, "monitor", monitor)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if router is not None:
            pulumi.set(__self__, "router", router)

    @property
    @pulumi.getter(name="blockStorage")
    def block_storage(self) -> Optional[pulumi.Input['ClusterCloudProviderOpenstackBlockStorageArgs']]:
        return pulumi.get(self, "block_storage")

    @block_storage.setter
    def block_storage(self, value: Optional[pulumi.Input['ClusterCloudProviderOpenstackBlockStorageArgs']]):
        pulumi.set(self, "block_storage", value)

    @property
    @pulumi.getter(name="insecureSkipVerify")
    def insecure_skip_verify(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "insecure_skip_verify")

    @insecure_skip_verify.setter
    def insecure_skip_verify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "insecure_skip_verify", value)

    @property
    @pulumi.getter
    def loadbalancer(self) -> Optional[pulumi.Input['ClusterCloudProviderOpenstackLoadbalancerArgs']]:
        return pulumi.get(self, "loadbalancer")

    @loadbalancer.setter
    def loadbalancer(self, value: Optional[pulumi.Input['ClusterCloudProviderOpenstackLoadbalancerArgs']]):
        pulumi.set(self, "loadbalancer", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ClusterCloudProviderOpenstackMetadataArgs']]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ClusterCloudProviderOpenstackMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def monitor(self) -> Optional[pulumi.Input['ClusterCloudProviderOpenstackMonitorArgs']]:
        return pulumi.get(self, "monitor")

    @monitor.setter
    def monitor(self, value: Optional[pulumi.Input['ClusterCloudProviderOpenstackMonitorArgs']]):
        pulumi.set(self, "monitor", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input['ClusterCloudProviderOpenstackNetworkArgs']]:
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input['ClusterCloudProviderOpenstackNetworkArgs']]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter
    def router(self) -> Optional[pulumi.Input['ClusterCloudProviderOpenstackRouterArgs']]:
        return pulumi.get(self, "router")

    @router.setter
    def router(self, value: Optional[pulumi.Input['ClusterCloudProviderOpenstackRouterArgs']]):
        pulumi.set(self, "router", value)


@pulumi.input_type
class ClusterCloudProviderOpenstackBlockStorageArgs:
    def __init__(__self__, *,
                 create_storage_class: Optional[pulumi.Input[bool]] = None,
                 csi_plugin_image: Optional[pulumi.Input[str]] = None,
                 csi_topology_support: Optional[pulumi.Input[bool]] = None,
                 ignore_az: Optional[pulumi.Input[bool]] = None,
                 override_az: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        if create_storage_class is not None:
            pulumi.set(__self__, "create_storage_class", create_storage_class)
        if csi_plugin_image is not None:
            pulumi.set(__self__, "csi_plugin_image", csi_plugin_image)
        if csi_topology_support is not None:
            pulumi.set(__self__, "csi_topology_support", csi_topology_support)
        if ignore_az is not None:
            pulumi.set(__self__, "ignore_az", ignore_az)
        if override_az is not None:
            pulumi.set(__self__, "override_az", override_az)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="createStorageClass")
    def create_storage_class(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "create_storage_class")

    @create_storage_class.setter
    def create_storage_class(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_storage_class", value)

    @property
    @pulumi.getter(name="csiPluginImage")
    def csi_plugin_image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "csi_plugin_image")

    @csi_plugin_image.setter
    def csi_plugin_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "csi_plugin_image", value)

    @property
    @pulumi.getter(name="csiTopologySupport")
    def csi_topology_support(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "csi_topology_support")

    @csi_topology_support.setter
    def csi_topology_support(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "csi_topology_support", value)

    @property
    @pulumi.getter(name="ignoreAz")
    def ignore_az(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ignore_az")

    @ignore_az.setter
    def ignore_az(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_az", value)

    @property
    @pulumi.getter(name="overrideAz")
    def override_az(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_az")

    @override_az.setter
    def override_az(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_az", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ClusterCloudProviderOpenstackLoadbalancerArgs:
    def __init__(__self__, *,
                 enable_ingress_hostname: Optional[pulumi.Input[bool]] = None,
                 floating_network: Optional[pulumi.Input[str]] = None,
                 floating_network_id: Optional[pulumi.Input[str]] = None,
                 floating_subnet: Optional[pulumi.Input[str]] = None,
                 ingress_hostname_suffix: Optional[pulumi.Input[str]] = None,
                 manage_sec_groups: Optional[pulumi.Input[bool]] = None,
                 method: Optional[pulumi.Input[str]] = None,
                 provider: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 use_octavia: Optional[pulumi.Input[bool]] = None):
        if enable_ingress_hostname is not None:
            pulumi.set(__self__, "enable_ingress_hostname", enable_ingress_hostname)
        if floating_network is not None:
            pulumi.set(__self__, "floating_network", floating_network)
        if floating_network_id is not None:
            pulumi.set(__self__, "floating_network_id", floating_network_id)
        if floating_subnet is not None:
            pulumi.set(__self__, "floating_subnet", floating_subnet)
        if ingress_hostname_suffix is not None:
            pulumi.set(__self__, "ingress_hostname_suffix", ingress_hostname_suffix)
        if manage_sec_groups is not None:
            pulumi.set(__self__, "manage_sec_groups", manage_sec_groups)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if provider is not None:
            pulumi.set(__self__, "provider", provider)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if use_octavia is not None:
            pulumi.set(__self__, "use_octavia", use_octavia)

    @property
    @pulumi.getter(name="enableIngressHostname")
    def enable_ingress_hostname(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_ingress_hostname")

    @enable_ingress_hostname.setter
    def enable_ingress_hostname(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_ingress_hostname", value)

    @property
    @pulumi.getter(name="floatingNetwork")
    def floating_network(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "floating_network")

    @floating_network.setter
    def floating_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "floating_network", value)

    @property
    @pulumi.getter(name="floatingNetworkId")
    def floating_network_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "floating_network_id")

    @floating_network_id.setter
    def floating_network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "floating_network_id", value)

    @property
    @pulumi.getter(name="floatingSubnet")
    def floating_subnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "floating_subnet")

    @floating_subnet.setter
    def floating_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "floating_subnet", value)

    @property
    @pulumi.getter(name="ingressHostnameSuffix")
    def ingress_hostname_suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ingress_hostname_suffix")

    @ingress_hostname_suffix.setter
    def ingress_hostname_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ingress_hostname_suffix", value)

    @property
    @pulumi.getter(name="manageSecGroups")
    def manage_sec_groups(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "manage_sec_groups")

    @manage_sec_groups.setter
    def manage_sec_groups(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "manage_sec_groups", value)

    @property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter
    def provider(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "provider")

    @provider.setter
    def provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="useOctavia")
    def use_octavia(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_octavia")

    @use_octavia.setter
    def use_octavia(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_octavia", value)


@pulumi.input_type
class ClusterCloudProviderOpenstackMetadataArgs:
    def __init__(__self__, *,
                 config_drive: Optional[pulumi.Input[bool]] = None):
        if config_drive is not None:
            pulumi.set(__self__, "config_drive", config_drive)

    @property
    @pulumi.getter(name="configDrive")
    def config_drive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "config_drive")

    @config_drive.setter
    def config_drive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "config_drive", value)


@pulumi.input_type
class ClusterCloudProviderOpenstackMonitorArgs:
    def __init__(__self__, *,
                 delay: Optional[pulumi.Input[str]] = None,
                 max_retries: Optional[pulumi.Input[int]] = None,
                 timeout: Optional[pulumi.Input[str]] = None):
        if delay is not None:
            pulumi.set(__self__, "delay", delay)
        if max_retries is not None:
            pulumi.set(__self__, "max_retries", max_retries)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def delay(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "delay")

    @delay.setter
    def delay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delay", value)

    @property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_retries")

    @max_retries.setter
    def max_retries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_retries", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class ClusterCloudProviderOpenstackNetworkArgs:
    def __init__(__self__, *,
                 availability_zone_hints: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 internal_network_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ipv6_support_disabled: Optional[pulumi.Input[bool]] = None,
                 public_network_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if availability_zone_hints is not None:
            pulumi.set(__self__, "availability_zone_hints", availability_zone_hints)
        if internal_network_names is not None:
            pulumi.set(__self__, "internal_network_names", internal_network_names)
        if ipv6_support_disabled is not None:
            pulumi.set(__self__, "ipv6_support_disabled", ipv6_support_disabled)
        if public_network_names is not None:
            pulumi.set(__self__, "public_network_names", public_network_names)

    @property
    @pulumi.getter(name="availabilityZoneHints")
    def availability_zone_hints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "availability_zone_hints")

    @availability_zone_hints.setter
    def availability_zone_hints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "availability_zone_hints", value)

    @property
    @pulumi.getter(name="internalNetworkNames")
    def internal_network_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "internal_network_names")

    @internal_network_names.setter
    def internal_network_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "internal_network_names", value)

    @property
    @pulumi.getter(name="ipv6SupportDisabled")
    def ipv6_support_disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ipv6_support_disabled")

    @ipv6_support_disabled.setter
    def ipv6_support_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ipv6_support_disabled", value)

    @property
    @pulumi.getter(name="publicNetworkNames")
    def public_network_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "public_network_names")

    @public_network_names.setter
    def public_network_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "public_network_names", value)


@pulumi.input_type
class ClusterCloudProviderOpenstackRouterArgs:
    def __init__(__self__, *,
                 availability_zone_hints: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dns_servers: Optional[pulumi.Input[str]] = None,
                 external_network: Optional[pulumi.Input[str]] = None,
                 external_subnet: Optional[pulumi.Input[str]] = None):
        if availability_zone_hints is not None:
            pulumi.set(__self__, "availability_zone_hints", availability_zone_hints)
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)
        if external_network is not None:
            pulumi.set(__self__, "external_network", external_network)
        if external_subnet is not None:
            pulumi.set(__self__, "external_subnet", external_subnet)

    @property
    @pulumi.getter(name="availabilityZoneHints")
    def availability_zone_hints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "availability_zone_hints")

    @availability_zone_hints.setter
    def availability_zone_hints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "availability_zone_hints", value)

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_servers")

    @dns_servers.setter
    def dns_servers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_servers", value)

    @property
    @pulumi.getter(name="externalNetwork")
    def external_network(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_network")

    @external_network.setter
    def external_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_network", value)

    @property
    @pulumi.getter(name="externalSubnet")
    def external_subnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_subnet")

    @external_subnet.setter
    def external_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_subnet", value)


@pulumi.input_type
class ClusterClusterAutoscalerArgs:
    def __init__(__self__, *,
                 skip_nodes_with_local_storage: pulumi.Input[bool],
                 skip_nodes_with_system_pods: pulumi.Input[bool],
                 aws_use_static_instance_list: Optional[pulumi.Input[bool]] = None,
                 balance_similar_node_groups: Optional[pulumi.Input[bool]] = None,
                 cordon_node_before_terminating: Optional[pulumi.Input[bool]] = None,
                 cpu_request: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 expander: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 max_node_provision_time: Optional[pulumi.Input[str]] = None,
                 memory_request: Optional[pulumi.Input[str]] = None,
                 new_pod_scale_up_delay: Optional[pulumi.Input[str]] = None,
                 pod_annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 scale_down_delay_after_add: Optional[pulumi.Input[str]] = None,
                 scale_down_unneeded_time: Optional[pulumi.Input[str]] = None,
                 scale_down_unready_time: Optional[pulumi.Input[str]] = None,
                 scale_down_utilization_threshold: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "skip_nodes_with_local_storage", skip_nodes_with_local_storage)
        pulumi.set(__self__, "skip_nodes_with_system_pods", skip_nodes_with_system_pods)
        if aws_use_static_instance_list is not None:
            pulumi.set(__self__, "aws_use_static_instance_list", aws_use_static_instance_list)
        if balance_similar_node_groups is not None:
            pulumi.set(__self__, "balance_similar_node_groups", balance_similar_node_groups)
        if cordon_node_before_terminating is not None:
            pulumi.set(__self__, "cordon_node_before_terminating", cordon_node_before_terminating)
        if cpu_request is not None:
            pulumi.set(__self__, "cpu_request", cpu_request)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if expander is not None:
            pulumi.set(__self__, "expander", expander)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if max_node_provision_time is not None:
            pulumi.set(__self__, "max_node_provision_time", max_node_provision_time)
        if memory_request is not None:
            pulumi.set(__self__, "memory_request", memory_request)
        if new_pod_scale_up_delay is not None:
            pulumi.set(__self__, "new_pod_scale_up_delay", new_pod_scale_up_delay)
        if pod_annotations is not None:
            pulumi.set(__self__, "pod_annotations", pod_annotations)
        if scale_down_delay_after_add is not None:
            pulumi.set(__self__, "scale_down_delay_after_add", scale_down_delay_after_add)
        if scale_down_unneeded_time is not None:
            pulumi.set(__self__, "scale_down_unneeded_time", scale_down_unneeded_time)
        if scale_down_unready_time is not None:
            pulumi.set(__self__, "scale_down_unready_time", scale_down_unready_time)
        if scale_down_utilization_threshold is not None:
            pulumi.set(__self__, "scale_down_utilization_threshold", scale_down_utilization_threshold)

    @property
    @pulumi.getter(name="skipNodesWithLocalStorage")
    def skip_nodes_with_local_storage(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "skip_nodes_with_local_storage")

    @skip_nodes_with_local_storage.setter
    def skip_nodes_with_local_storage(self, value: pulumi.Input[bool]):
        pulumi.set(self, "skip_nodes_with_local_storage", value)

    @property
    @pulumi.getter(name="skipNodesWithSystemPods")
    def skip_nodes_with_system_pods(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "skip_nodes_with_system_pods")

    @skip_nodes_with_system_pods.setter
    def skip_nodes_with_system_pods(self, value: pulumi.Input[bool]):
        pulumi.set(self, "skip_nodes_with_system_pods", value)

    @property
    @pulumi.getter(name="awsUseStaticInstanceList")
    def aws_use_static_instance_list(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "aws_use_static_instance_list")

    @aws_use_static_instance_list.setter
    def aws_use_static_instance_list(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "aws_use_static_instance_list", value)

    @property
    @pulumi.getter(name="balanceSimilarNodeGroups")
    def balance_similar_node_groups(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "balance_similar_node_groups")

    @balance_similar_node_groups.setter
    def balance_similar_node_groups(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "balance_similar_node_groups", value)

    @property
    @pulumi.getter(name="cordonNodeBeforeTerminating")
    def cordon_node_before_terminating(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "cordon_node_before_terminating")

    @cordon_node_before_terminating.setter
    def cordon_node_before_terminating(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cordon_node_before_terminating", value)

    @property
    @pulumi.getter(name="cpuRequest")
    def cpu_request(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpu_request")

    @cpu_request.setter
    def cpu_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_request", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def expander(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expander")

    @expander.setter
    def expander(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expander", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="maxNodeProvisionTime")
    def max_node_provision_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_node_provision_time")

    @max_node_provision_time.setter
    def max_node_provision_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_node_provision_time", value)

    @property
    @pulumi.getter(name="memoryRequest")
    def memory_request(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "memory_request")

    @memory_request.setter
    def memory_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory_request", value)

    @property
    @pulumi.getter(name="newPodScaleUpDelay")
    def new_pod_scale_up_delay(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "new_pod_scale_up_delay")

    @new_pod_scale_up_delay.setter
    def new_pod_scale_up_delay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "new_pod_scale_up_delay", value)

    @property
    @pulumi.getter(name="podAnnotations")
    def pod_annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "pod_annotations")

    @pod_annotations.setter
    def pod_annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "pod_annotations", value)

    @property
    @pulumi.getter(name="scaleDownDelayAfterAdd")
    def scale_down_delay_after_add(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scale_down_delay_after_add")

    @scale_down_delay_after_add.setter
    def scale_down_delay_after_add(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scale_down_delay_after_add", value)

    @property
    @pulumi.getter(name="scaleDownUnneededTime")
    def scale_down_unneeded_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scale_down_unneeded_time")

    @scale_down_unneeded_time.setter
    def scale_down_unneeded_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scale_down_unneeded_time", value)

    @property
    @pulumi.getter(name="scaleDownUnreadyTime")
    def scale_down_unready_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scale_down_unready_time")

    @scale_down_unready_time.setter
    def scale_down_unready_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scale_down_unready_time", value)

    @property
    @pulumi.getter(name="scaleDownUtilizationThreshold")
    def scale_down_utilization_threshold(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scale_down_utilization_threshold")

    @scale_down_utilization_threshold.setter
    def scale_down_utilization_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scale_down_utilization_threshold", value)


@pulumi.input_type
class ClusterContainerdArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None,
                 config_override: Optional[pulumi.Input[str]] = None,
                 log_level: Optional[pulumi.Input[str]] = None,
                 nvidia_gpu: Optional[pulumi.Input['ClusterContainerdNvidiaGpuArgs']] = None,
                 packages: Optional[pulumi.Input['ClusterContainerdPackagesArgs']] = None,
                 registry_mirrors: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterContainerdRegistryMirrorArgs']]]] = None,
                 root: Optional[pulumi.Input[str]] = None,
                 runc: Optional[pulumi.Input['ClusterContainerdRuncArgs']] = None,
                 skip_install: Optional[pulumi.Input[bool]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if config_override is not None:
            pulumi.set(__self__, "config_override", config_override)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)
        if nvidia_gpu is not None:
            pulumi.set(__self__, "nvidia_gpu", nvidia_gpu)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if registry_mirrors is not None:
            pulumi.set(__self__, "registry_mirrors", registry_mirrors)
        if root is not None:
            pulumi.set(__self__, "root", root)
        if runc is not None:
            pulumi.set(__self__, "runc", runc)
        if skip_install is not None:
            pulumi.set(__self__, "skip_install", skip_install)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="configOverride")
    def config_override(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "config_override")

    @config_override.setter
    def config_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_override", value)

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_level")

    @log_level.setter
    def log_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_level", value)

    @property
    @pulumi.getter(name="nvidiaGpu")
    def nvidia_gpu(self) -> Optional[pulumi.Input['ClusterContainerdNvidiaGpuArgs']]:
        return pulumi.get(self, "nvidia_gpu")

    @nvidia_gpu.setter
    def nvidia_gpu(self, value: Optional[pulumi.Input['ClusterContainerdNvidiaGpuArgs']]):
        pulumi.set(self, "nvidia_gpu", value)

    @property
    @pulumi.getter
    def packages(self) -> Optional[pulumi.Input['ClusterContainerdPackagesArgs']]:
        return pulumi.get(self, "packages")

    @packages.setter
    def packages(self, value: Optional[pulumi.Input['ClusterContainerdPackagesArgs']]):
        pulumi.set(self, "packages", value)

    @property
    @pulumi.getter(name="registryMirrors")
    def registry_mirrors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterContainerdRegistryMirrorArgs']]]]:
        return pulumi.get(self, "registry_mirrors")

    @registry_mirrors.setter
    def registry_mirrors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterContainerdRegistryMirrorArgs']]]]):
        pulumi.set(self, "registry_mirrors", value)

    @property
    @pulumi.getter
    def root(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "root")

    @root.setter
    def root(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root", value)

    @property
    @pulumi.getter
    def runc(self) -> Optional[pulumi.Input['ClusterContainerdRuncArgs']]:
        return pulumi.get(self, "runc")

    @runc.setter
    def runc(self, value: Optional[pulumi.Input['ClusterContainerdRuncArgs']]):
        pulumi.set(self, "runc", value)

    @property
    @pulumi.getter(name="skipInstall")
    def skip_install(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "skip_install")

    @skip_install.setter
    def skip_install(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_install", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ClusterContainerdNvidiaGpuArgs:
    def __init__(__self__, *,
                 driver_package: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if driver_package is not None:
            pulumi.set(__self__, "driver_package", driver_package)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="driverPackage")
    def driver_package(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "driver_package")

    @driver_package.setter
    def driver_package(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "driver_package", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class ClusterContainerdPackagesArgs:
    def __init__(__self__, *,
                 hash_amd64: Optional[pulumi.Input[str]] = None,
                 hash_arm64: Optional[pulumi.Input[str]] = None,
                 url_amd64: Optional[pulumi.Input[str]] = None,
                 url_arm64: Optional[pulumi.Input[str]] = None):
        if hash_amd64 is not None:
            pulumi.set(__self__, "hash_amd64", hash_amd64)
        if hash_arm64 is not None:
            pulumi.set(__self__, "hash_arm64", hash_arm64)
        if url_amd64 is not None:
            pulumi.set(__self__, "url_amd64", url_amd64)
        if url_arm64 is not None:
            pulumi.set(__self__, "url_arm64", url_arm64)

    @property
    @pulumi.getter(name="hashAmd64")
    def hash_amd64(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hash_amd64")

    @hash_amd64.setter
    def hash_amd64(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hash_amd64", value)

    @property
    @pulumi.getter(name="hashArm64")
    def hash_arm64(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hash_arm64")

    @hash_arm64.setter
    def hash_arm64(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hash_arm64", value)

    @property
    @pulumi.getter(name="urlAmd64")
    def url_amd64(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url_amd64")

    @url_amd64.setter
    def url_amd64(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_amd64", value)

    @property
    @pulumi.getter(name="urlArm64")
    def url_arm64(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url_arm64")

    @url_arm64.setter
    def url_arm64(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_arm64", value)


@pulumi.input_type
class ClusterContainerdRegistryMirrorArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ClusterContainerdRuncArgs:
    def __init__(__self__, *,
                 packages: Optional[pulumi.Input['ClusterContainerdRuncPackagesArgs']] = None,
                 version: Optional[pulumi.Input[str]] = None):
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def packages(self) -> Optional[pulumi.Input['ClusterContainerdRuncPackagesArgs']]:
        return pulumi.get(self, "packages")

    @packages.setter
    def packages(self, value: Optional[pulumi.Input['ClusterContainerdRuncPackagesArgs']]):
        pulumi.set(self, "packages", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ClusterContainerdRuncPackagesArgs:
    def __init__(__self__, *,
                 hash_amd64: Optional[pulumi.Input[str]] = None,
                 hash_arm64: Optional[pulumi.Input[str]] = None,
                 url_amd64: Optional[pulumi.Input[str]] = None,
                 url_arm64: Optional[pulumi.Input[str]] = None):
        if hash_amd64 is not None:
            pulumi.set(__self__, "hash_amd64", hash_amd64)
        if hash_arm64 is not None:
            pulumi.set(__self__, "hash_arm64", hash_arm64)
        if url_amd64 is not None:
            pulumi.set(__self__, "url_amd64", url_amd64)
        if url_arm64 is not None:
            pulumi.set(__self__, "url_arm64", url_arm64)

    @property
    @pulumi.getter(name="hashAmd64")
    def hash_amd64(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hash_amd64")

    @hash_amd64.setter
    def hash_amd64(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hash_amd64", value)

    @property
    @pulumi.getter(name="hashArm64")
    def hash_arm64(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hash_arm64")

    @hash_arm64.setter
    def hash_arm64(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hash_arm64", value)

    @property
    @pulumi.getter(name="urlAmd64")
    def url_amd64(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url_amd64")

    @url_amd64.setter
    def url_amd64(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_amd64", value)

    @property
    @pulumi.getter(name="urlArm64")
    def url_arm64(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url_arm64")

    @url_arm64.setter
    def url_arm64(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_arm64", value)


@pulumi.input_type
class ClusterDockerArgs:
    def __init__(__self__, *,
                 authorization_plugins: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 bridge: Optional[pulumi.Input[str]] = None,
                 bridge_ip: Optional[pulumi.Input[str]] = None,
                 data_root: Optional[pulumi.Input[str]] = None,
                 default_runtime: Optional[pulumi.Input[str]] = None,
                 default_ulimits: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exec_opts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exec_root: Optional[pulumi.Input[str]] = None,
                 experimental: Optional[pulumi.Input[bool]] = None,
                 health_check: Optional[pulumi.Input[bool]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 insecure_registries: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 insecure_registry: Optional[pulumi.Input[str]] = None,
                 ip_masq: Optional[pulumi.Input[bool]] = None,
                 ip_tables: Optional[pulumi.Input[bool]] = None,
                 live_restore: Optional[pulumi.Input[bool]] = None,
                 log_driver: Optional[pulumi.Input[str]] = None,
                 log_level: Optional[pulumi.Input[str]] = None,
                 log_opts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 max_concurrent_downloads: Optional[pulumi.Input[int]] = None,
                 max_concurrent_uploads: Optional[pulumi.Input[int]] = None,
                 max_download_attempts: Optional[pulumi.Input[int]] = None,
                 metrics_address: Optional[pulumi.Input[str]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 packages: Optional[pulumi.Input['ClusterDockerPackagesArgs']] = None,
                 registry_mirrors: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 runtimes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 selinux_enabled: Optional[pulumi.Input[bool]] = None,
                 skip_install: Optional[pulumi.Input[bool]] = None,
                 storage: Optional[pulumi.Input[str]] = None,
                 storage_opts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 user_namespace_remap: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        if authorization_plugins is not None:
            pulumi.set(__self__, "authorization_plugins", authorization_plugins)
        if bridge is not None:
            pulumi.set(__self__, "bridge", bridge)
        if bridge_ip is not None:
            pulumi.set(__self__, "bridge_ip", bridge_ip)
        if data_root is not None:
            pulumi.set(__self__, "data_root", data_root)
        if default_runtime is not None:
            pulumi.set(__self__, "default_runtime", default_runtime)
        if default_ulimits is not None:
            pulumi.set(__self__, "default_ulimits", default_ulimits)
        if dns is not None:
            pulumi.set(__self__, "dns", dns)
        if exec_opts is not None:
            pulumi.set(__self__, "exec_opts", exec_opts)
        if exec_root is not None:
            pulumi.set(__self__, "exec_root", exec_root)
        if experimental is not None:
            pulumi.set(__self__, "experimental", experimental)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if insecure_registries is not None:
            pulumi.set(__self__, "insecure_registries", insecure_registries)
        if insecure_registry is not None:
            pulumi.set(__self__, "insecure_registry", insecure_registry)
        if ip_masq is not None:
            pulumi.set(__self__, "ip_masq", ip_masq)
        if ip_tables is not None:
            pulumi.set(__self__, "ip_tables", ip_tables)
        if live_restore is not None:
            pulumi.set(__self__, "live_restore", live_restore)
        if log_driver is not None:
            pulumi.set(__self__, "log_driver", log_driver)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)
        if log_opts is not None:
            pulumi.set(__self__, "log_opts", log_opts)
        if max_concurrent_downloads is not None:
            pulumi.set(__self__, "max_concurrent_downloads", max_concurrent_downloads)
        if max_concurrent_uploads is not None:
            pulumi.set(__self__, "max_concurrent_uploads", max_concurrent_uploads)
        if max_download_attempts is not None:
            pulumi.set(__self__, "max_download_attempts", max_download_attempts)
        if metrics_address is not None:
            pulumi.set(__self__, "metrics_address", metrics_address)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if registry_mirrors is not None:
            pulumi.set(__self__, "registry_mirrors", registry_mirrors)
        if runtimes is not None:
            pulumi.set(__self__, "runtimes", runtimes)
        if selinux_enabled is not None:
            pulumi.set(__self__, "selinux_enabled", selinux_enabled)
        if skip_install is not None:
            pulumi.set(__self__, "skip_install", skip_install)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)
        if storage_opts is not None:
            pulumi.set(__self__, "storage_opts", storage_opts)
        if user_namespace_remap is not None:
            pulumi.set(__self__, "user_namespace_remap", user_namespace_remap)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="authorizationPlugins")
    def authorization_plugins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "authorization_plugins")

    @authorization_plugins.setter
    def authorization_plugins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "authorization_plugins", value)

    @property
    @pulumi.getter
    def bridge(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bridge")

    @bridge.setter
    def bridge(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bridge", value)

    @property
    @pulumi.getter(name="bridgeIp")
    def bridge_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bridge_ip")

    @bridge_ip.setter
    def bridge_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bridge_ip", value)

    @property
    @pulumi.getter(name="dataRoot")
    def data_root(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_root")

    @data_root.setter
    def data_root(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_root", value)

    @property
    @pulumi.getter(name="defaultRuntime")
    def default_runtime(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_runtime")

    @default_runtime.setter
    def default_runtime(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_runtime", value)

    @property
    @pulumi.getter(name="defaultUlimits")
    def default_ulimits(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "default_ulimits")

    @default_ulimits.setter
    def default_ulimits(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "default_ulimits", value)

    @property
    @pulumi.getter
    def dns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "dns")

    @dns.setter
    def dns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns", value)

    @property
    @pulumi.getter(name="execOpts")
    def exec_opts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exec_opts")

    @exec_opts.setter
    def exec_opts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exec_opts", value)

    @property
    @pulumi.getter(name="execRoot")
    def exec_root(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "exec_root")

    @exec_root.setter
    def exec_root(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exec_root", value)

    @property
    @pulumi.getter
    def experimental(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "experimental")

    @experimental.setter
    def experimental(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "experimental", value)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "health_check", value)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter(name="insecureRegistries")
    def insecure_registries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "insecure_registries")

    @insecure_registries.setter
    def insecure_registries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "insecure_registries", value)

    @property
    @pulumi.getter(name="insecureRegistry")
    def insecure_registry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "insecure_registry")

    @insecure_registry.setter
    def insecure_registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "insecure_registry", value)

    @property
    @pulumi.getter(name="ipMasq")
    def ip_masq(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ip_masq")

    @ip_masq.setter
    def ip_masq(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ip_masq", value)

    @property
    @pulumi.getter(name="ipTables")
    def ip_tables(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ip_tables")

    @ip_tables.setter
    def ip_tables(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ip_tables", value)

    @property
    @pulumi.getter(name="liveRestore")
    def live_restore(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "live_restore")

    @live_restore.setter
    def live_restore(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "live_restore", value)

    @property
    @pulumi.getter(name="logDriver")
    def log_driver(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_driver")

    @log_driver.setter
    def log_driver(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_driver", value)

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_level")

    @log_level.setter
    def log_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_level", value)

    @property
    @pulumi.getter(name="logOpts")
    def log_opts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "log_opts")

    @log_opts.setter
    def log_opts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "log_opts", value)

    @property
    @pulumi.getter(name="maxConcurrentDownloads")
    def max_concurrent_downloads(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_concurrent_downloads")

    @max_concurrent_downloads.setter
    def max_concurrent_downloads(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_concurrent_downloads", value)

    @property
    @pulumi.getter(name="maxConcurrentUploads")
    def max_concurrent_uploads(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_concurrent_uploads")

    @max_concurrent_uploads.setter
    def max_concurrent_uploads(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_concurrent_uploads", value)

    @property
    @pulumi.getter(name="maxDownloadAttempts")
    def max_download_attempts(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_download_attempts")

    @max_download_attempts.setter
    def max_download_attempts(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_download_attempts", value)

    @property
    @pulumi.getter(name="metricsAddress")
    def metrics_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "metrics_address")

    @metrics_address.setter
    def metrics_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metrics_address", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter
    def packages(self) -> Optional[pulumi.Input['ClusterDockerPackagesArgs']]:
        return pulumi.get(self, "packages")

    @packages.setter
    def packages(self, value: Optional[pulumi.Input['ClusterDockerPackagesArgs']]):
        pulumi.set(self, "packages", value)

    @property
    @pulumi.getter(name="registryMirrors")
    def registry_mirrors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "registry_mirrors")

    @registry_mirrors.setter
    def registry_mirrors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "registry_mirrors", value)

    @property
    @pulumi.getter
    def runtimes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "runtimes")

    @runtimes.setter
    def runtimes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "runtimes", value)

    @property
    @pulumi.getter(name="selinuxEnabled")
    def selinux_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "selinux_enabled")

    @selinux_enabled.setter
    def selinux_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "selinux_enabled", value)

    @property
    @pulumi.getter(name="skipInstall")
    def skip_install(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "skip_install")

    @skip_install.setter
    def skip_install(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_install", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter(name="storageOpts")
    def storage_opts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "storage_opts")

    @storage_opts.setter
    def storage_opts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "storage_opts", value)

    @property
    @pulumi.getter(name="userNamespaceRemap")
    def user_namespace_remap(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_namespace_remap")

    @user_namespace_remap.setter
    def user_namespace_remap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_namespace_remap", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ClusterDockerPackagesArgs:
    def __init__(__self__, *,
                 hash_amd64: Optional[pulumi.Input[str]] = None,
                 hash_arm64: Optional[pulumi.Input[str]] = None,
                 url_amd64: Optional[pulumi.Input[str]] = None,
                 url_arm64: Optional[pulumi.Input[str]] = None):
        if hash_amd64 is not None:
            pulumi.set(__self__, "hash_amd64", hash_amd64)
        if hash_arm64 is not None:
            pulumi.set(__self__, "hash_arm64", hash_arm64)
        if url_amd64 is not None:
            pulumi.set(__self__, "url_amd64", url_amd64)
        if url_arm64 is not None:
            pulumi.set(__self__, "url_arm64", url_arm64)

    @property
    @pulumi.getter(name="hashAmd64")
    def hash_amd64(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hash_amd64")

    @hash_amd64.setter
    def hash_amd64(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hash_amd64", value)

    @property
    @pulumi.getter(name="hashArm64")
    def hash_arm64(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hash_arm64")

    @hash_arm64.setter
    def hash_arm64(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hash_arm64", value)

    @property
    @pulumi.getter(name="urlAmd64")
    def url_amd64(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url_amd64")

    @url_amd64.setter
    def url_amd64(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_amd64", value)

    @property
    @pulumi.getter(name="urlArm64")
    def url_arm64(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url_arm64")

    @url_arm64.setter
    def url_arm64(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_arm64", value)


@pulumi.input_type
class ClusterEgressProxyArgs:
    def __init__(__self__, *,
                 http_proxy: pulumi.Input['ClusterEgressProxyHttpProxyArgs'],
                 proxy_excludes: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "http_proxy", http_proxy)
        if proxy_excludes is not None:
            pulumi.set(__self__, "proxy_excludes", proxy_excludes)

    @property
    @pulumi.getter(name="httpProxy")
    def http_proxy(self) -> pulumi.Input['ClusterEgressProxyHttpProxyArgs']:
        return pulumi.get(self, "http_proxy")

    @http_proxy.setter
    def http_proxy(self, value: pulumi.Input['ClusterEgressProxyHttpProxyArgs']):
        pulumi.set(self, "http_proxy", value)

    @property
    @pulumi.getter(name="proxyExcludes")
    def proxy_excludes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy_excludes")

    @proxy_excludes.setter
    def proxy_excludes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_excludes", value)


@pulumi.input_type
class ClusterEgressProxyHttpProxyArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[str],
                 port: pulumi.Input[int]):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class ClusterEtcdClusterArgs:
    def __init__(__self__, *,
                 members: pulumi.Input[Sequence[pulumi.Input['ClusterEtcdClusterMemberArgs']]],
                 name: pulumi.Input[str],
                 backups: Optional[pulumi.Input['ClusterEtcdClusterBackupsArgs']] = None,
                 cpu_request: Optional[pulumi.Input[str]] = None,
                 heartbeat_interval: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 leader_election_timeout: Optional[pulumi.Input[str]] = None,
                 manager: Optional[pulumi.Input['ClusterEtcdClusterManagerArgs']] = None,
                 memory_request: Optional[pulumi.Input[str]] = None,
                 provider: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: - (Force new) - String - Name defines the cluster name.
        """
        pulumi.set(__self__, "members", members)
        pulumi.set(__self__, "name", name)
        if backups is not None:
            pulumi.set(__self__, "backups", backups)
        if cpu_request is not None:
            pulumi.set(__self__, "cpu_request", cpu_request)
        if heartbeat_interval is not None:
            pulumi.set(__self__, "heartbeat_interval", heartbeat_interval)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if leader_election_timeout is not None:
            pulumi.set(__self__, "leader_election_timeout", leader_election_timeout)
        if manager is not None:
            pulumi.set(__self__, "manager", manager)
        if memory_request is not None:
            pulumi.set(__self__, "memory_request", memory_request)
        if provider is not None:
            pulumi.set(__self__, "provider", provider)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def members(self) -> pulumi.Input[Sequence[pulumi.Input['ClusterEtcdClusterMemberArgs']]]:
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: pulumi.Input[Sequence[pulumi.Input['ClusterEtcdClusterMemberArgs']]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        - (Force new) - String - Name defines the cluster name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def backups(self) -> Optional[pulumi.Input['ClusterEtcdClusterBackupsArgs']]:
        return pulumi.get(self, "backups")

    @backups.setter
    def backups(self, value: Optional[pulumi.Input['ClusterEtcdClusterBackupsArgs']]):
        pulumi.set(self, "backups", value)

    @property
    @pulumi.getter(name="cpuRequest")
    def cpu_request(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpu_request")

    @cpu_request.setter
    def cpu_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_request", value)

    @property
    @pulumi.getter(name="heartbeatInterval")
    def heartbeat_interval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "heartbeat_interval")

    @heartbeat_interval.setter
    def heartbeat_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "heartbeat_interval", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="leaderElectionTimeout")
    def leader_election_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "leader_election_timeout")

    @leader_election_timeout.setter
    def leader_election_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "leader_election_timeout", value)

    @property
    @pulumi.getter
    def manager(self) -> Optional[pulumi.Input['ClusterEtcdClusterManagerArgs']]:
        return pulumi.get(self, "manager")

    @manager.setter
    def manager(self, value: Optional[pulumi.Input['ClusterEtcdClusterManagerArgs']]):
        pulumi.set(self, "manager", value)

    @property
    @pulumi.getter(name="memoryRequest")
    def memory_request(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "memory_request")

    @memory_request.setter
    def memory_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory_request", value)

    @property
    @pulumi.getter
    def provider(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "provider")

    @provider.setter
    def provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ClusterEtcdClusterBackupsArgs:
    def __init__(__self__, *,
                 backup_store: pulumi.Input[str],
                 image: pulumi.Input[str]):
        pulumi.set(__self__, "backup_store", backup_store)
        pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="backupStore")
    def backup_store(self) -> pulumi.Input[str]:
        return pulumi.get(self, "backup_store")

    @backup_store.setter
    def backup_store(self, value: pulumi.Input[str]):
        pulumi.set(self, "backup_store", value)

    @property
    @pulumi.getter
    def image(self) -> pulumi.Input[str]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: pulumi.Input[str]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class ClusterEtcdClusterManagerArgs:
    def __init__(__self__, *,
                 backup_interval: Optional[pulumi.Input[str]] = None,
                 discovery_poll_interval: Optional[pulumi.Input[str]] = None,
                 envs: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterEtcdClusterManagerEnvArgs']]]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 log_level: Optional[pulumi.Input[int]] = None):
        if backup_interval is not None:
            pulumi.set(__self__, "backup_interval", backup_interval)
        if discovery_poll_interval is not None:
            pulumi.set(__self__, "discovery_poll_interval", discovery_poll_interval)
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)

    @property
    @pulumi.getter(name="backupInterval")
    def backup_interval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "backup_interval")

    @backup_interval.setter
    def backup_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_interval", value)

    @property
    @pulumi.getter(name="discoveryPollInterval")
    def discovery_poll_interval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "discovery_poll_interval")

    @discovery_poll_interval.setter
    def discovery_poll_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "discovery_poll_interval", value)

    @property
    @pulumi.getter
    def envs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterEtcdClusterManagerEnvArgs']]]]:
        return pulumi.get(self, "envs")

    @envs.setter
    def envs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterEtcdClusterManagerEnvArgs']]]]):
        pulumi.set(self, "envs", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "log_level")

    @log_level.setter
    def log_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "log_level", value)


@pulumi.input_type
class ClusterEtcdClusterManagerEnvArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: - (Force new) - String - Name defines the cluster name.
        """
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        - (Force new) - String - Name defines the cluster name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ClusterEtcdClusterMemberArgs:
    def __init__(__self__, *,
                 instance_group: pulumi.Input[str],
                 name: pulumi.Input[str],
                 encrypted_volume: Optional[pulumi.Input[bool]] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 volume_iops: Optional[pulumi.Input[int]] = None,
                 volume_size: Optional[pulumi.Input[int]] = None,
                 volume_throughput: Optional[pulumi.Input[int]] = None,
                 volume_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: - (Force new) - String - Name defines the cluster name.
        """
        pulumi.set(__self__, "instance_group", instance_group)
        pulumi.set(__self__, "name", name)
        if encrypted_volume is not None:
            pulumi.set(__self__, "encrypted_volume", encrypted_volume)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if volume_iops is not None:
            pulumi.set(__self__, "volume_iops", volume_iops)
        if volume_size is not None:
            pulumi.set(__self__, "volume_size", volume_size)
        if volume_throughput is not None:
            pulumi.set(__self__, "volume_throughput", volume_throughput)
        if volume_type is not None:
            pulumi.set(__self__, "volume_type", volume_type)

    @property
    @pulumi.getter(name="instanceGroup")
    def instance_group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "instance_group")

    @instance_group.setter
    def instance_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_group", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        - (Force new) - String - Name defines the cluster name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="encryptedVolume")
    def encrypted_volume(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "encrypted_volume")

    @encrypted_volume.setter
    def encrypted_volume(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "encrypted_volume", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)

    @property
    @pulumi.getter(name="volumeIops")
    def volume_iops(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "volume_iops")

    @volume_iops.setter
    def volume_iops(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "volume_iops", value)

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "volume_size")

    @volume_size.setter
    def volume_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "volume_size", value)

    @property
    @pulumi.getter(name="volumeThroughput")
    def volume_throughput(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "volume_throughput")

    @volume_throughput.setter
    def volume_throughput(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "volume_throughput", value)

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "volume_type")

    @volume_type.setter
    def volume_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_type", value)


@pulumi.input_type
class ClusterExternalCloudControllerManagerArgs:
    def __init__(__self__, *,
                 allocate_node_cidrs: Optional[pulumi.Input[bool]] = None,
                 allow_untagged_cloud: Optional[pulumi.Input[bool]] = None,
                 cidr_allocator_type: Optional[pulumi.Input[str]] = None,
                 cloud_provider: Optional[pulumi.Input[str]] = None,
                 cluster_cidr: Optional[pulumi.Input[str]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 configure_cloud_routes: Optional[pulumi.Input[bool]] = None,
                 controllers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cpu_request: Optional[pulumi.Input[str]] = None,
                 enable_leader_migration: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 leader_election: Optional[pulumi.Input['ClusterExternalCloudControllerManagerLeaderElectionArgs']] = None,
                 log_level: Optional[pulumi.Input[int]] = None,
                 master: Optional[pulumi.Input[str]] = None,
                 use_service_account_credentials: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] cloud_provider: - cloud_provider_spec - CloudProvider configures the cloud provider to use.
        """
        if allocate_node_cidrs is not None:
            pulumi.set(__self__, "allocate_node_cidrs", allocate_node_cidrs)
        if allow_untagged_cloud is not None:
            pulumi.set(__self__, "allow_untagged_cloud", allow_untagged_cloud)
        if cidr_allocator_type is not None:
            pulumi.set(__self__, "cidr_allocator_type", cidr_allocator_type)
        if cloud_provider is not None:
            pulumi.set(__self__, "cloud_provider", cloud_provider)
        if cluster_cidr is not None:
            pulumi.set(__self__, "cluster_cidr", cluster_cidr)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if configure_cloud_routes is not None:
            pulumi.set(__self__, "configure_cloud_routes", configure_cloud_routes)
        if controllers is not None:
            pulumi.set(__self__, "controllers", controllers)
        if cpu_request is not None:
            pulumi.set(__self__, "cpu_request", cpu_request)
        if enable_leader_migration is not None:
            pulumi.set(__self__, "enable_leader_migration", enable_leader_migration)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if leader_election is not None:
            pulumi.set(__self__, "leader_election", leader_election)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)
        if master is not None:
            pulumi.set(__self__, "master", master)
        if use_service_account_credentials is not None:
            pulumi.set(__self__, "use_service_account_credentials", use_service_account_credentials)

    @property
    @pulumi.getter(name="allocateNodeCidrs")
    def allocate_node_cidrs(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allocate_node_cidrs")

    @allocate_node_cidrs.setter
    def allocate_node_cidrs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allocate_node_cidrs", value)

    @property
    @pulumi.getter(name="allowUntaggedCloud")
    def allow_untagged_cloud(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_untagged_cloud")

    @allow_untagged_cloud.setter
    def allow_untagged_cloud(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_untagged_cloud", value)

    @property
    @pulumi.getter(name="cidrAllocatorType")
    def cidr_allocator_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cidr_allocator_type")

    @cidr_allocator_type.setter
    def cidr_allocator_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cidr_allocator_type", value)

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> Optional[pulumi.Input[str]]:
        """
        - cloud_provider_spec - CloudProvider configures the cloud provider to use.
        """
        return pulumi.get(self, "cloud_provider")

    @cloud_provider.setter
    def cloud_provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_provider", value)

    @property
    @pulumi.getter(name="clusterCidr")
    def cluster_cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_cidr")

    @cluster_cidr.setter
    def cluster_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_cidr", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="configureCloudRoutes")
    def configure_cloud_routes(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "configure_cloud_routes")

    @configure_cloud_routes.setter
    def configure_cloud_routes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "configure_cloud_routes", value)

    @property
    @pulumi.getter
    def controllers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "controllers")

    @controllers.setter
    def controllers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "controllers", value)

    @property
    @pulumi.getter(name="cpuRequest")
    def cpu_request(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpu_request")

    @cpu_request.setter
    def cpu_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_request", value)

    @property
    @pulumi.getter(name="enableLeaderMigration")
    def enable_leader_migration(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_leader_migration")

    @enable_leader_migration.setter
    def enable_leader_migration(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_leader_migration", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="leaderElection")
    def leader_election(self) -> Optional[pulumi.Input['ClusterExternalCloudControllerManagerLeaderElectionArgs']]:
        return pulumi.get(self, "leader_election")

    @leader_election.setter
    def leader_election(self, value: Optional[pulumi.Input['ClusterExternalCloudControllerManagerLeaderElectionArgs']]):
        pulumi.set(self, "leader_election", value)

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "log_level")

    @log_level.setter
    def log_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "log_level", value)

    @property
    @pulumi.getter
    def master(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "master")

    @master.setter
    def master(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "master", value)

    @property
    @pulumi.getter(name="useServiceAccountCredentials")
    def use_service_account_credentials(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_service_account_credentials")

    @use_service_account_credentials.setter
    def use_service_account_credentials(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_service_account_credentials", value)


@pulumi.input_type
class ClusterExternalCloudControllerManagerLeaderElectionArgs:
    def __init__(__self__, *,
                 leader_elect: Optional[pulumi.Input[bool]] = None,
                 leader_elect_lease_duration: Optional[pulumi.Input[str]] = None,
                 leader_elect_renew_deadline_duration: Optional[pulumi.Input[str]] = None,
                 leader_elect_resource_lock: Optional[pulumi.Input[str]] = None,
                 leader_elect_resource_name: Optional[pulumi.Input[str]] = None,
                 leader_elect_resource_namespace: Optional[pulumi.Input[str]] = None,
                 leader_elect_retry_period: Optional[pulumi.Input[str]] = None):
        if leader_elect is not None:
            pulumi.set(__self__, "leader_elect", leader_elect)
        if leader_elect_lease_duration is not None:
            pulumi.set(__self__, "leader_elect_lease_duration", leader_elect_lease_duration)
        if leader_elect_renew_deadline_duration is not None:
            pulumi.set(__self__, "leader_elect_renew_deadline_duration", leader_elect_renew_deadline_duration)
        if leader_elect_resource_lock is not None:
            pulumi.set(__self__, "leader_elect_resource_lock", leader_elect_resource_lock)
        if leader_elect_resource_name is not None:
            pulumi.set(__self__, "leader_elect_resource_name", leader_elect_resource_name)
        if leader_elect_resource_namespace is not None:
            pulumi.set(__self__, "leader_elect_resource_namespace", leader_elect_resource_namespace)
        if leader_elect_retry_period is not None:
            pulumi.set(__self__, "leader_elect_retry_period", leader_elect_retry_period)

    @property
    @pulumi.getter(name="leaderElect")
    def leader_elect(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "leader_elect")

    @leader_elect.setter
    def leader_elect(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "leader_elect", value)

    @property
    @pulumi.getter(name="leaderElectLeaseDuration")
    def leader_elect_lease_duration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "leader_elect_lease_duration")

    @leader_elect_lease_duration.setter
    def leader_elect_lease_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "leader_elect_lease_duration", value)

    @property
    @pulumi.getter(name="leaderElectRenewDeadlineDuration")
    def leader_elect_renew_deadline_duration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "leader_elect_renew_deadline_duration")

    @leader_elect_renew_deadline_duration.setter
    def leader_elect_renew_deadline_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "leader_elect_renew_deadline_duration", value)

    @property
    @pulumi.getter(name="leaderElectResourceLock")
    def leader_elect_resource_lock(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "leader_elect_resource_lock")

    @leader_elect_resource_lock.setter
    def leader_elect_resource_lock(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "leader_elect_resource_lock", value)

    @property
    @pulumi.getter(name="leaderElectResourceName")
    def leader_elect_resource_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "leader_elect_resource_name")

    @leader_elect_resource_name.setter
    def leader_elect_resource_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "leader_elect_resource_name", value)

    @property
    @pulumi.getter(name="leaderElectResourceNamespace")
    def leader_elect_resource_namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "leader_elect_resource_namespace")

    @leader_elect_resource_namespace.setter
    def leader_elect_resource_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "leader_elect_resource_namespace", value)

    @property
    @pulumi.getter(name="leaderElectRetryPeriod")
    def leader_elect_retry_period(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "leader_elect_retry_period")

    @leader_elect_retry_period.setter
    def leader_elect_retry_period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "leader_elect_retry_period", value)


@pulumi.input_type
class ClusterExternalDnsArgs:
    def __init__(__self__, *,
                 provider: Optional[pulumi.Input[str]] = None,
                 watch_ingress: Optional[pulumi.Input[bool]] = None,
                 watch_namespace: Optional[pulumi.Input[str]] = None):
        if provider is not None:
            pulumi.set(__self__, "provider", provider)
        if watch_ingress is not None:
            pulumi.set(__self__, "watch_ingress", watch_ingress)
        if watch_namespace is not None:
            pulumi.set(__self__, "watch_namespace", watch_namespace)

    @property
    @pulumi.getter
    def provider(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "provider")

    @provider.setter
    def provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider", value)

    @property
    @pulumi.getter(name="watchIngress")
    def watch_ingress(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "watch_ingress")

    @watch_ingress.setter
    def watch_ingress(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "watch_ingress", value)

    @property
    @pulumi.getter(name="watchNamespace")
    def watch_namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "watch_namespace")

    @watch_namespace.setter
    def watch_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "watch_namespace", value)


@pulumi.input_type
class ClusterExternalPolicyArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ClusterFileAssetArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 name: pulumi.Input[str],
                 path: pulumi.Input[str],
                 is_base64: Optional[pulumi.Input[bool]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: - (Force new) - String - Name defines the cluster name.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)
        if is_base64 is not None:
            pulumi.set(__self__, "is_base64", is_base64)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        - (Force new) - String - Name defines the cluster name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="isBase64")
    def is_base64(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_base64")

    @is_base64.setter
    def is_base64(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_base64", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "roles", value)


@pulumi.input_type
class ClusterHookArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 befores: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 exec_container: Optional[pulumi.Input['ClusterHookExecContainerArgs']] = None,
                 manifest: Optional[pulumi.Input[str]] = None,
                 requires: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 use_raw_manifest: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] name: - (Force new) - String - Name defines the cluster name.
        """
        pulumi.set(__self__, "name", name)
        if befores is not None:
            pulumi.set(__self__, "befores", befores)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exec_container is not None:
            pulumi.set(__self__, "exec_container", exec_container)
        if manifest is not None:
            pulumi.set(__self__, "manifest", manifest)
        if requires is not None:
            pulumi.set(__self__, "requires", requires)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if use_raw_manifest is not None:
            pulumi.set(__self__, "use_raw_manifest", use_raw_manifest)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        - (Force new) - String - Name defines the cluster name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def befores(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "befores")

    @befores.setter
    def befores(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "befores", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="execContainer")
    def exec_container(self) -> Optional[pulumi.Input['ClusterHookExecContainerArgs']]:
        return pulumi.get(self, "exec_container")

    @exec_container.setter
    def exec_container(self, value: Optional[pulumi.Input['ClusterHookExecContainerArgs']]):
        pulumi.set(self, "exec_container", value)

    @property
    @pulumi.getter
    def manifest(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "manifest")

    @manifest.setter
    def manifest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "manifest", value)

    @property
    @pulumi.getter
    def requires(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "requires")

    @requires.setter
    def requires(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "requires", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter(name="useRawManifest")
    def use_raw_manifest(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_raw_manifest")

    @use_raw_manifest.setter
    def use_raw_manifest(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_raw_manifest", value)


@pulumi.input_type
class ClusterHookExecContainerArgs:
    def __init__(__self__, *,
                 image: pulumi.Input[str],
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 environment: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "image", image)
        if commands is not None:
            pulumi.set(__self__, "commands", commands)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)

    @property
    @pulumi.getter
    def image(self) -> pulumi.Input[str]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: pulumi.Input[str]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "commands", value)

    @property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "environment", value)


@pulumi.input_type
class ClusterIamArgs:
    def __init__(__self__, *,
                 allow_container_registry: Optional[pulumi.Input[bool]] = None,
                 legacy: Optional[pulumi.Input[bool]] = None,
                 permissions_boundary: Optional[pulumi.Input[str]] = None,
                 service_account_external_permissions: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIamServiceAccountExternalPermissionArgs']]]] = None,
                 use_service_account_external_permissions: Optional[pulumi.Input[bool]] = None):
        if allow_container_registry is not None:
            pulumi.set(__self__, "allow_container_registry", allow_container_registry)
        if legacy is not None:
            pulumi.set(__self__, "legacy", legacy)
        if permissions_boundary is not None:
            pulumi.set(__self__, "permissions_boundary", permissions_boundary)
        if service_account_external_permissions is not None:
            pulumi.set(__self__, "service_account_external_permissions", service_account_external_permissions)
        if use_service_account_external_permissions is not None:
            pulumi.set(__self__, "use_service_account_external_permissions", use_service_account_external_permissions)

    @property
    @pulumi.getter(name="allowContainerRegistry")
    def allow_container_registry(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_container_registry")

    @allow_container_registry.setter
    def allow_container_registry(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_container_registry", value)

    @property
    @pulumi.getter
    def legacy(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "legacy")

    @legacy.setter
    def legacy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "legacy", value)

    @property
    @pulumi.getter(name="permissionsBoundary")
    def permissions_boundary(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "permissions_boundary")

    @permissions_boundary.setter
    def permissions_boundary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permissions_boundary", value)

    @property
    @pulumi.getter(name="serviceAccountExternalPermissions")
    def service_account_external_permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIamServiceAccountExternalPermissionArgs']]]]:
        return pulumi.get(self, "service_account_external_permissions")

    @service_account_external_permissions.setter
    def service_account_external_permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIamServiceAccountExternalPermissionArgs']]]]):
        pulumi.set(self, "service_account_external_permissions", value)

    @property
    @pulumi.getter(name="useServiceAccountExternalPermissions")
    def use_service_account_external_permissions(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_service_account_external_permissions")

    @use_service_account_external_permissions.setter
    def use_service_account_external_permissions(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_service_account_external_permissions", value)


@pulumi.input_type
class ClusterIamServiceAccountExternalPermissionArgs:
    def __init__(__self__, *,
                 aws: Optional[pulumi.Input['ClusterIamServiceAccountExternalPermissionAwsArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: - (Force new) - String - Name defines the cluster name.
        """
        if aws is not None:
            pulumi.set(__self__, "aws", aws)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def aws(self) -> Optional[pulumi.Input['ClusterIamServiceAccountExternalPermissionAwsArgs']]:
        return pulumi.get(self, "aws")

    @aws.setter
    def aws(self, value: Optional[pulumi.Input['ClusterIamServiceAccountExternalPermissionAwsArgs']]):
        pulumi.set(self, "aws", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - (Force new) - String - Name defines the cluster name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class ClusterIamServiceAccountExternalPermissionAwsArgs:
    def __init__(__self__, *,
                 inline_policy: Optional[pulumi.Input[str]] = None,
                 policy_ar_ns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if inline_policy is not None:
            pulumi.set(__self__, "inline_policy", inline_policy)
        if policy_ar_ns is not None:
            pulumi.set(__self__, "policy_ar_ns", policy_ar_ns)

    @property
    @pulumi.getter(name="inlinePolicy")
    def inline_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "inline_policy")

    @inline_policy.setter
    def inline_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inline_policy", value)

    @property
    @pulumi.getter(name="policyArNs")
    def policy_ar_ns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "policy_ar_ns")

    @policy_ar_ns.setter
    def policy_ar_ns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "policy_ar_ns", value)


@pulumi.input_type
class ClusterKarpenterArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class ClusterKubeApiServerArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None,
                 admission_control_config_file: Optional[pulumi.Input[str]] = None,
                 admission_controls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 advertise_address: Optional[pulumi.Input[str]] = None,
                 allow_privileged: Optional[pulumi.Input[bool]] = None,
                 anonymous_auth: Optional[pulumi.Input['ClusterKubeApiServerAnonymousAuthArgs']] = None,
                 api_audiences: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 api_server_count: Optional[pulumi.Input[int]] = None,
                 append_admission_plugins: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 audit_dynamic_configuration: Optional[pulumi.Input[bool]] = None,
                 audit_log_format: Optional[pulumi.Input[str]] = None,
                 audit_log_max_age: Optional[pulumi.Input[int]] = None,
                 audit_log_max_backups: Optional[pulumi.Input[int]] = None,
                 audit_log_max_size: Optional[pulumi.Input[int]] = None,
                 audit_log_path: Optional[pulumi.Input[str]] = None,
                 audit_policy_file: Optional[pulumi.Input[str]] = None,
                 audit_webhook_batch_buffer_size: Optional[pulumi.Input[int]] = None,
                 audit_webhook_batch_max_size: Optional[pulumi.Input[int]] = None,
                 audit_webhook_batch_max_wait: Optional[pulumi.Input[str]] = None,
                 audit_webhook_batch_throttle_burst: Optional[pulumi.Input[int]] = None,
                 audit_webhook_batch_throttle_enable: Optional[pulumi.Input[bool]] = None,
                 audit_webhook_batch_throttle_qps: Optional[pulumi.Input[str]] = None,
                 audit_webhook_config_file: Optional[pulumi.Input[str]] = None,
                 audit_webhook_initial_backoff: Optional[pulumi.Input[str]] = None,
                 audit_webhook_mode: Optional[pulumi.Input[str]] = None,
                 authentication_token_webhook_cache_ttl: Optional[pulumi.Input[str]] = None,
                 authentication_token_webhook_config_file: Optional[pulumi.Input[str]] = None,
                 authorization_mode: Optional[pulumi.Input[str]] = None,
                 authorization_rbac_super_user: Optional[pulumi.Input[str]] = None,
                 authorization_webhook_cache_authorized_ttl: Optional[pulumi.Input[str]] = None,
                 authorization_webhook_cache_unauthorized_ttl: Optional[pulumi.Input[str]] = None,
                 authorization_webhook_config_file: Optional[pulumi.Input[str]] = None,
                 basic_auth_file: Optional[pulumi.Input[str]] = None,
                 bind_address: Optional[pulumi.Input[str]] = None,
                 client_ca_file: Optional[pulumi.Input[str]] = None,
                 cloud_provider: Optional[pulumi.Input[str]] = None,
                 cors_allowed_origins: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cpu_limit: Optional[pulumi.Input[str]] = None,
                 cpu_request: Optional[pulumi.Input[str]] = None,
                 default_not_ready_toleration_seconds: Optional[pulumi.Input[int]] = None,
                 default_unreachable_toleration_seconds: Optional[pulumi.Input[int]] = None,
                 disable_admission_plugins: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 disable_basic_auth: Optional[pulumi.Input[bool]] = None,
                 enable_admission_plugins: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enable_aggregator_routing: Optional[pulumi.Input[bool]] = None,
                 enable_bootstrap_auth_token: Optional[pulumi.Input[bool]] = None,
                 enable_profiling: Optional[pulumi.Input[bool]] = None,
                 encryption_provider_config: Optional[pulumi.Input[str]] = None,
                 etcd_ca_file: Optional[pulumi.Input[str]] = None,
                 etcd_cert_file: Optional[pulumi.Input[str]] = None,
                 etcd_key_file: Optional[pulumi.Input[str]] = None,
                 etcd_quorum_read: Optional[pulumi.Input[bool]] = None,
                 etcd_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 etcd_servers_overrides: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 event_ttl: Optional[pulumi.Input[str]] = None,
                 experimental_encryption_provider_config: Optional[pulumi.Input[str]] = None,
                 feature_gates: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 http2_max_streams_per_connection: Optional[pulumi.Input[int]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 insecure_bind_address: Optional[pulumi.Input[str]] = None,
                 insecure_port: Optional[pulumi.Input[int]] = None,
                 kubelet_certificate_authority: Optional[pulumi.Input[str]] = None,
                 kubelet_client_certificate: Optional[pulumi.Input[str]] = None,
                 kubelet_client_key: Optional[pulumi.Input[str]] = None,
                 kubelet_preferred_address_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 log_format: Optional[pulumi.Input[str]] = None,
                 log_level: Optional[pulumi.Input[int]] = None,
                 max_mutating_requests_inflight: Optional[pulumi.Input[int]] = None,
                 max_requests_inflight: Optional[pulumi.Input[int]] = None,
                 memory_limit: Optional[pulumi.Input[str]] = None,
                 memory_request: Optional[pulumi.Input[str]] = None,
                 min_request_timeout: Optional[pulumi.Input[int]] = None,
                 oidc_ca_file: Optional[pulumi.Input[str]] = None,
                 oidc_client_id: Optional[pulumi.Input[str]] = None,
                 oidc_groups_claim: Optional[pulumi.Input[str]] = None,
                 oidc_groups_prefix: Optional[pulumi.Input[str]] = None,
                 oidc_issuer_url: Optional[pulumi.Input[str]] = None,
                 oidc_required_claims: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 oidc_username_claim: Optional[pulumi.Input[str]] = None,
                 oidc_username_prefix: Optional[pulumi.Input[str]] = None,
                 proxy_client_cert_file: Optional[pulumi.Input[str]] = None,
                 proxy_client_key_file: Optional[pulumi.Input[str]] = None,
                 request_timeout: Optional[pulumi.Input[str]] = None,
                 requestheader_allowed_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 requestheader_client_ca_file: Optional[pulumi.Input[str]] = None,
                 requestheader_extra_header_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 requestheader_group_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 requestheader_username_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 runtime_config: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 secure_port: Optional[pulumi.Input[int]] = None,
                 service_account_issuer: Optional[pulumi.Input[str]] = None,
                 service_account_jwksuri: Optional[pulumi.Input[str]] = None,
                 service_account_key_files: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 service_account_signing_key_file: Optional[pulumi.Input[str]] = None,
                 service_cluster_ip_range: Optional[pulumi.Input[str]] = None,
                 service_node_port_range: Optional[pulumi.Input[str]] = None,
                 storage_backend: Optional[pulumi.Input[str]] = None,
                 target_ram_mb: Optional[pulumi.Input[int]] = None,
                 tls_cert_file: Optional[pulumi.Input[str]] = None,
                 tls_cipher_suites: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tls_min_version: Optional[pulumi.Input[str]] = None,
                 tls_private_key_file: Optional[pulumi.Input[str]] = None,
                 token_auth_file: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cloud_provider: - cloud_provider_spec - CloudProvider configures the cloud provider to use.
        :param pulumi.Input[str] service_cluster_ip_range: - String - ServiceClusterIPRange is the CIDR, from the internal network, where we allocate IPs for services.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if admission_control_config_file is not None:
            pulumi.set(__self__, "admission_control_config_file", admission_control_config_file)
        if admission_controls is not None:
            pulumi.set(__self__, "admission_controls", admission_controls)
        if advertise_address is not None:
            pulumi.set(__self__, "advertise_address", advertise_address)
        if allow_privileged is not None:
            pulumi.set(__self__, "allow_privileged", allow_privileged)
        if anonymous_auth is not None:
            pulumi.set(__self__, "anonymous_auth", anonymous_auth)
        if api_audiences is not None:
            pulumi.set(__self__, "api_audiences", api_audiences)
        if api_server_count is not None:
            pulumi.set(__self__, "api_server_count", api_server_count)
        if append_admission_plugins is not None:
            pulumi.set(__self__, "append_admission_plugins", append_admission_plugins)
        if audit_dynamic_configuration is not None:
            pulumi.set(__self__, "audit_dynamic_configuration", audit_dynamic_configuration)
        if audit_log_format is not None:
            pulumi.set(__self__, "audit_log_format", audit_log_format)
        if audit_log_max_age is not None:
            pulumi.set(__self__, "audit_log_max_age", audit_log_max_age)
        if audit_log_max_backups is not None:
            pulumi.set(__self__, "audit_log_max_backups", audit_log_max_backups)
        if audit_log_max_size is not None:
            pulumi.set(__self__, "audit_log_max_size", audit_log_max_size)
        if audit_log_path is not None:
            pulumi.set(__self__, "audit_log_path", audit_log_path)
        if audit_policy_file is not None:
            pulumi.set(__self__, "audit_policy_file", audit_policy_file)
        if audit_webhook_batch_buffer_size is not None:
            pulumi.set(__self__, "audit_webhook_batch_buffer_size", audit_webhook_batch_buffer_size)
        if audit_webhook_batch_max_size is not None:
            pulumi.set(__self__, "audit_webhook_batch_max_size", audit_webhook_batch_max_size)
        if audit_webhook_batch_max_wait is not None:
            pulumi.set(__self__, "audit_webhook_batch_max_wait", audit_webhook_batch_max_wait)
        if audit_webhook_batch_throttle_burst is not None:
            pulumi.set(__self__, "audit_webhook_batch_throttle_burst", audit_webhook_batch_throttle_burst)
        if audit_webhook_batch_throttle_enable is not None:
            pulumi.set(__self__, "audit_webhook_batch_throttle_enable", audit_webhook_batch_throttle_enable)
        if audit_webhook_batch_throttle_qps is not None:
            pulumi.set(__self__, "audit_webhook_batch_throttle_qps", audit_webhook_batch_throttle_qps)
        if audit_webhook_config_file is not None:
            pulumi.set(__self__, "audit_webhook_config_file", audit_webhook_config_file)
        if audit_webhook_initial_backoff is not None:
            pulumi.set(__self__, "audit_webhook_initial_backoff", audit_webhook_initial_backoff)
        if audit_webhook_mode is not None:
            pulumi.set(__self__, "audit_webhook_mode", audit_webhook_mode)
        if authentication_token_webhook_cache_ttl is not None:
            pulumi.set(__self__, "authentication_token_webhook_cache_ttl", authentication_token_webhook_cache_ttl)
        if authentication_token_webhook_config_file is not None:
            pulumi.set(__self__, "authentication_token_webhook_config_file", authentication_token_webhook_config_file)
        if authorization_mode is not None:
            pulumi.set(__self__, "authorization_mode", authorization_mode)
        if authorization_rbac_super_user is not None:
            pulumi.set(__self__, "authorization_rbac_super_user", authorization_rbac_super_user)
        if authorization_webhook_cache_authorized_ttl is not None:
            pulumi.set(__self__, "authorization_webhook_cache_authorized_ttl", authorization_webhook_cache_authorized_ttl)
        if authorization_webhook_cache_unauthorized_ttl is not None:
            pulumi.set(__self__, "authorization_webhook_cache_unauthorized_ttl", authorization_webhook_cache_unauthorized_ttl)
        if authorization_webhook_config_file is not None:
            pulumi.set(__self__, "authorization_webhook_config_file", authorization_webhook_config_file)
        if basic_auth_file is not None:
            pulumi.set(__self__, "basic_auth_file", basic_auth_file)
        if bind_address is not None:
            pulumi.set(__self__, "bind_address", bind_address)
        if client_ca_file is not None:
            pulumi.set(__self__, "client_ca_file", client_ca_file)
        if cloud_provider is not None:
            pulumi.set(__self__, "cloud_provider", cloud_provider)
        if cors_allowed_origins is not None:
            pulumi.set(__self__, "cors_allowed_origins", cors_allowed_origins)
        if cpu_limit is not None:
            pulumi.set(__self__, "cpu_limit", cpu_limit)
        if cpu_request is not None:
            pulumi.set(__self__, "cpu_request", cpu_request)
        if default_not_ready_toleration_seconds is not None:
            pulumi.set(__self__, "default_not_ready_toleration_seconds", default_not_ready_toleration_seconds)
        if default_unreachable_toleration_seconds is not None:
            pulumi.set(__self__, "default_unreachable_toleration_seconds", default_unreachable_toleration_seconds)
        if disable_admission_plugins is not None:
            pulumi.set(__self__, "disable_admission_plugins", disable_admission_plugins)
        if disable_basic_auth is not None:
            pulumi.set(__self__, "disable_basic_auth", disable_basic_auth)
        if enable_admission_plugins is not None:
            pulumi.set(__self__, "enable_admission_plugins", enable_admission_plugins)
        if enable_aggregator_routing is not None:
            pulumi.set(__self__, "enable_aggregator_routing", enable_aggregator_routing)
        if enable_bootstrap_auth_token is not None:
            pulumi.set(__self__, "enable_bootstrap_auth_token", enable_bootstrap_auth_token)
        if enable_profiling is not None:
            pulumi.set(__self__, "enable_profiling", enable_profiling)
        if encryption_provider_config is not None:
            pulumi.set(__self__, "encryption_provider_config", encryption_provider_config)
        if etcd_ca_file is not None:
            pulumi.set(__self__, "etcd_ca_file", etcd_ca_file)
        if etcd_cert_file is not None:
            pulumi.set(__self__, "etcd_cert_file", etcd_cert_file)
        if etcd_key_file is not None:
            pulumi.set(__self__, "etcd_key_file", etcd_key_file)
        if etcd_quorum_read is not None:
            pulumi.set(__self__, "etcd_quorum_read", etcd_quorum_read)
        if etcd_servers is not None:
            pulumi.set(__self__, "etcd_servers", etcd_servers)
        if etcd_servers_overrides is not None:
            pulumi.set(__self__, "etcd_servers_overrides", etcd_servers_overrides)
        if event_ttl is not None:
            pulumi.set(__self__, "event_ttl", event_ttl)
        if experimental_encryption_provider_config is not None:
            pulumi.set(__self__, "experimental_encryption_provider_config", experimental_encryption_provider_config)
        if feature_gates is not None:
            pulumi.set(__self__, "feature_gates", feature_gates)
        if http2_max_streams_per_connection is not None:
            pulumi.set(__self__, "http2_max_streams_per_connection", http2_max_streams_per_connection)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if insecure_bind_address is not None:
            pulumi.set(__self__, "insecure_bind_address", insecure_bind_address)
        if insecure_port is not None:
            pulumi.set(__self__, "insecure_port", insecure_port)
        if kubelet_certificate_authority is not None:
            pulumi.set(__self__, "kubelet_certificate_authority", kubelet_certificate_authority)
        if kubelet_client_certificate is not None:
            pulumi.set(__self__, "kubelet_client_certificate", kubelet_client_certificate)
        if kubelet_client_key is not None:
            pulumi.set(__self__, "kubelet_client_key", kubelet_client_key)
        if kubelet_preferred_address_types is not None:
            pulumi.set(__self__, "kubelet_preferred_address_types", kubelet_preferred_address_types)
        if log_format is not None:
            pulumi.set(__self__, "log_format", log_format)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)
        if max_mutating_requests_inflight is not None:
            pulumi.set(__self__, "max_mutating_requests_inflight", max_mutating_requests_inflight)
        if max_requests_inflight is not None:
            pulumi.set(__self__, "max_requests_inflight", max_requests_inflight)
        if memory_limit is not None:
            pulumi.set(__self__, "memory_limit", memory_limit)
        if memory_request is not None:
            pulumi.set(__self__, "memory_request", memory_request)
        if min_request_timeout is not None:
            pulumi.set(__self__, "min_request_timeout", min_request_timeout)
        if oidc_ca_file is not None:
            pulumi.set(__self__, "oidc_ca_file", oidc_ca_file)
        if oidc_client_id is not None:
            pulumi.set(__self__, "oidc_client_id", oidc_client_id)
        if oidc_groups_claim is not None:
            pulumi.set(__self__, "oidc_groups_claim", oidc_groups_claim)
        if oidc_groups_prefix is not None:
            pulumi.set(__self__, "oidc_groups_prefix", oidc_groups_prefix)
        if oidc_issuer_url is not None:
            pulumi.set(__self__, "oidc_issuer_url", oidc_issuer_url)
        if oidc_required_claims is not None:
            pulumi.set(__self__, "oidc_required_claims", oidc_required_claims)
        if oidc_username_claim is not None:
            pulumi.set(__self__, "oidc_username_claim", oidc_username_claim)
        if oidc_username_prefix is not None:
            pulumi.set(__self__, "oidc_username_prefix", oidc_username_prefix)
        if proxy_client_cert_file is not None:
            pulumi.set(__self__, "proxy_client_cert_file", proxy_client_cert_file)
        if proxy_client_key_file is not None:
            pulumi.set(__self__, "proxy_client_key_file", proxy_client_key_file)
        if request_timeout is not None:
            pulumi.set(__self__, "request_timeout", request_timeout)
        if requestheader_allowed_names is not None:
            pulumi.set(__self__, "requestheader_allowed_names", requestheader_allowed_names)
        if requestheader_client_ca_file is not None:
            pulumi.set(__self__, "requestheader_client_ca_file", requestheader_client_ca_file)
        if requestheader_extra_header_prefixes is not None:
            pulumi.set(__self__, "requestheader_extra_header_prefixes", requestheader_extra_header_prefixes)
        if requestheader_group_headers is not None:
            pulumi.set(__self__, "requestheader_group_headers", requestheader_group_headers)
        if requestheader_username_headers is not None:
            pulumi.set(__self__, "requestheader_username_headers", requestheader_username_headers)
        if runtime_config is not None:
            pulumi.set(__self__, "runtime_config", runtime_config)
        if secure_port is not None:
            pulumi.set(__self__, "secure_port", secure_port)
        if service_account_issuer is not None:
            pulumi.set(__self__, "service_account_issuer", service_account_issuer)
        if service_account_jwksuri is not None:
            pulumi.set(__self__, "service_account_jwksuri", service_account_jwksuri)
        if service_account_key_files is not None:
            pulumi.set(__self__, "service_account_key_files", service_account_key_files)
        if service_account_signing_key_file is not None:
            pulumi.set(__self__, "service_account_signing_key_file", service_account_signing_key_file)
        if service_cluster_ip_range is not None:
            pulumi.set(__self__, "service_cluster_ip_range", service_cluster_ip_range)
        if service_node_port_range is not None:
            pulumi.set(__self__, "service_node_port_range", service_node_port_range)
        if storage_backend is not None:
            pulumi.set(__self__, "storage_backend", storage_backend)
        if target_ram_mb is not None:
            pulumi.set(__self__, "target_ram_mb", target_ram_mb)
        if tls_cert_file is not None:
            pulumi.set(__self__, "tls_cert_file", tls_cert_file)
        if tls_cipher_suites is not None:
            pulumi.set(__self__, "tls_cipher_suites", tls_cipher_suites)
        if tls_min_version is not None:
            pulumi.set(__self__, "tls_min_version", tls_min_version)
        if tls_private_key_file is not None:
            pulumi.set(__self__, "tls_private_key_file", tls_private_key_file)
        if token_auth_file is not None:
            pulumi.set(__self__, "token_auth_file", token_auth_file)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="admissionControlConfigFile")
    def admission_control_config_file(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admission_control_config_file")

    @admission_control_config_file.setter
    def admission_control_config_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admission_control_config_file", value)

    @property
    @pulumi.getter(name="admissionControls")
    def admission_controls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "admission_controls")

    @admission_controls.setter
    def admission_controls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "admission_controls", value)

    @property
    @pulumi.getter(name="advertiseAddress")
    def advertise_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "advertise_address")

    @advertise_address.setter
    def advertise_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "advertise_address", value)

    @property
    @pulumi.getter(name="allowPrivileged")
    def allow_privileged(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_privileged")

    @allow_privileged.setter
    def allow_privileged(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_privileged", value)

    @property
    @pulumi.getter(name="anonymousAuth")
    def anonymous_auth(self) -> Optional[pulumi.Input['ClusterKubeApiServerAnonymousAuthArgs']]:
        return pulumi.get(self, "anonymous_auth")

    @anonymous_auth.setter
    def anonymous_auth(self, value: Optional[pulumi.Input['ClusterKubeApiServerAnonymousAuthArgs']]):
        pulumi.set(self, "anonymous_auth", value)

    @property
    @pulumi.getter(name="apiAudiences")
    def api_audiences(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "api_audiences")

    @api_audiences.setter
    def api_audiences(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "api_audiences", value)

    @property
    @pulumi.getter(name="apiServerCount")
    def api_server_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "api_server_count")

    @api_server_count.setter
    def api_server_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "api_server_count", value)

    @property
    @pulumi.getter(name="appendAdmissionPlugins")
    def append_admission_plugins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "append_admission_plugins")

    @append_admission_plugins.setter
    def append_admission_plugins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "append_admission_plugins", value)

    @property
    @pulumi.getter(name="auditDynamicConfiguration")
    def audit_dynamic_configuration(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "audit_dynamic_configuration")

    @audit_dynamic_configuration.setter
    def audit_dynamic_configuration(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "audit_dynamic_configuration", value)

    @property
    @pulumi.getter(name="auditLogFormat")
    def audit_log_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "audit_log_format")

    @audit_log_format.setter
    def audit_log_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "audit_log_format", value)

    @property
    @pulumi.getter(name="auditLogMaxAge")
    def audit_log_max_age(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "audit_log_max_age")

    @audit_log_max_age.setter
    def audit_log_max_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "audit_log_max_age", value)

    @property
    @pulumi.getter(name="auditLogMaxBackups")
    def audit_log_max_backups(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "audit_log_max_backups")

    @audit_log_max_backups.setter
    def audit_log_max_backups(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "audit_log_max_backups", value)

    @property
    @pulumi.getter(name="auditLogMaxSize")
    def audit_log_max_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "audit_log_max_size")

    @audit_log_max_size.setter
    def audit_log_max_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "audit_log_max_size", value)

    @property
    @pulumi.getter(name="auditLogPath")
    def audit_log_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "audit_log_path")

    @audit_log_path.setter
    def audit_log_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "audit_log_path", value)

    @property
    @pulumi.getter(name="auditPolicyFile")
    def audit_policy_file(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "audit_policy_file")

    @audit_policy_file.setter
    def audit_policy_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "audit_policy_file", value)

    @property
    @pulumi.getter(name="auditWebhookBatchBufferSize")
    def audit_webhook_batch_buffer_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "audit_webhook_batch_buffer_size")

    @audit_webhook_batch_buffer_size.setter
    def audit_webhook_batch_buffer_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "audit_webhook_batch_buffer_size", value)

    @property
    @pulumi.getter(name="auditWebhookBatchMaxSize")
    def audit_webhook_batch_max_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "audit_webhook_batch_max_size")

    @audit_webhook_batch_max_size.setter
    def audit_webhook_batch_max_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "audit_webhook_batch_max_size", value)

    @property
    @pulumi.getter(name="auditWebhookBatchMaxWait")
    def audit_webhook_batch_max_wait(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "audit_webhook_batch_max_wait")

    @audit_webhook_batch_max_wait.setter
    def audit_webhook_batch_max_wait(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "audit_webhook_batch_max_wait", value)

    @property
    @pulumi.getter(name="auditWebhookBatchThrottleBurst")
    def audit_webhook_batch_throttle_burst(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "audit_webhook_batch_throttle_burst")

    @audit_webhook_batch_throttle_burst.setter
    def audit_webhook_batch_throttle_burst(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "audit_webhook_batch_throttle_burst", value)

    @property
    @pulumi.getter(name="auditWebhookBatchThrottleEnable")
    def audit_webhook_batch_throttle_enable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "audit_webhook_batch_throttle_enable")

    @audit_webhook_batch_throttle_enable.setter
    def audit_webhook_batch_throttle_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "audit_webhook_batch_throttle_enable", value)

    @property
    @pulumi.getter(name="auditWebhookBatchThrottleQps")
    def audit_webhook_batch_throttle_qps(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "audit_webhook_batch_throttle_qps")

    @audit_webhook_batch_throttle_qps.setter
    def audit_webhook_batch_throttle_qps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "audit_webhook_batch_throttle_qps", value)

    @property
    @pulumi.getter(name="auditWebhookConfigFile")
    def audit_webhook_config_file(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "audit_webhook_config_file")

    @audit_webhook_config_file.setter
    def audit_webhook_config_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "audit_webhook_config_file", value)

    @property
    @pulumi.getter(name="auditWebhookInitialBackoff")
    def audit_webhook_initial_backoff(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "audit_webhook_initial_backoff")

    @audit_webhook_initial_backoff.setter
    def audit_webhook_initial_backoff(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "audit_webhook_initial_backoff", value)

    @property
    @pulumi.getter(name="auditWebhookMode")
    def audit_webhook_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "audit_webhook_mode")

    @audit_webhook_mode.setter
    def audit_webhook_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "audit_webhook_mode", value)

    @property
    @pulumi.getter(name="authenticationTokenWebhookCacheTtl")
    def authentication_token_webhook_cache_ttl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authentication_token_webhook_cache_ttl")

    @authentication_token_webhook_cache_ttl.setter
    def authentication_token_webhook_cache_ttl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_token_webhook_cache_ttl", value)

    @property
    @pulumi.getter(name="authenticationTokenWebhookConfigFile")
    def authentication_token_webhook_config_file(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authentication_token_webhook_config_file")

    @authentication_token_webhook_config_file.setter
    def authentication_token_webhook_config_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_token_webhook_config_file", value)

    @property
    @pulumi.getter(name="authorizationMode")
    def authorization_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authorization_mode")

    @authorization_mode.setter
    def authorization_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorization_mode", value)

    @property
    @pulumi.getter(name="authorizationRbacSuperUser")
    def authorization_rbac_super_user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authorization_rbac_super_user")

    @authorization_rbac_super_user.setter
    def authorization_rbac_super_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorization_rbac_super_user", value)

    @property
    @pulumi.getter(name="authorizationWebhookCacheAuthorizedTtl")
    def authorization_webhook_cache_authorized_ttl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authorization_webhook_cache_authorized_ttl")

    @authorization_webhook_cache_authorized_ttl.setter
    def authorization_webhook_cache_authorized_ttl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorization_webhook_cache_authorized_ttl", value)

    @property
    @pulumi.getter(name="authorizationWebhookCacheUnauthorizedTtl")
    def authorization_webhook_cache_unauthorized_ttl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authorization_webhook_cache_unauthorized_ttl")

    @authorization_webhook_cache_unauthorized_ttl.setter
    def authorization_webhook_cache_unauthorized_ttl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorization_webhook_cache_unauthorized_ttl", value)

    @property
    @pulumi.getter(name="authorizationWebhookConfigFile")
    def authorization_webhook_config_file(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authorization_webhook_config_file")

    @authorization_webhook_config_file.setter
    def authorization_webhook_config_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorization_webhook_config_file", value)

    @property
    @pulumi.getter(name="basicAuthFile")
    def basic_auth_file(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "basic_auth_file")

    @basic_auth_file.setter
    def basic_auth_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "basic_auth_file", value)

    @property
    @pulumi.getter(name="bindAddress")
    def bind_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bind_address")

    @bind_address.setter
    def bind_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_address", value)

    @property
    @pulumi.getter(name="clientCaFile")
    def client_ca_file(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_ca_file")

    @client_ca_file.setter
    def client_ca_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_ca_file", value)

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> Optional[pulumi.Input[str]]:
        """
        - cloud_provider_spec - CloudProvider configures the cloud provider to use.
        """
        return pulumi.get(self, "cloud_provider")

    @cloud_provider.setter
    def cloud_provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_provider", value)

    @property
    @pulumi.getter(name="corsAllowedOrigins")
    def cors_allowed_origins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "cors_allowed_origins")

    @cors_allowed_origins.setter
    def cors_allowed_origins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cors_allowed_origins", value)

    @property
    @pulumi.getter(name="cpuLimit")
    def cpu_limit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpu_limit")

    @cpu_limit.setter
    def cpu_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_limit", value)

    @property
    @pulumi.getter(name="cpuRequest")
    def cpu_request(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpu_request")

    @cpu_request.setter
    def cpu_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_request", value)

    @property
    @pulumi.getter(name="defaultNotReadyTolerationSeconds")
    def default_not_ready_toleration_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "default_not_ready_toleration_seconds")

    @default_not_ready_toleration_seconds.setter
    def default_not_ready_toleration_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_not_ready_toleration_seconds", value)

    @property
    @pulumi.getter(name="defaultUnreachableTolerationSeconds")
    def default_unreachable_toleration_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "default_unreachable_toleration_seconds")

    @default_unreachable_toleration_seconds.setter
    def default_unreachable_toleration_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_unreachable_toleration_seconds", value)

    @property
    @pulumi.getter(name="disableAdmissionPlugins")
    def disable_admission_plugins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "disable_admission_plugins")

    @disable_admission_plugins.setter
    def disable_admission_plugins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "disable_admission_plugins", value)

    @property
    @pulumi.getter(name="disableBasicAuth")
    def disable_basic_auth(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disable_basic_auth")

    @disable_basic_auth.setter
    def disable_basic_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_basic_auth", value)

    @property
    @pulumi.getter(name="enableAdmissionPlugins")
    def enable_admission_plugins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "enable_admission_plugins")

    @enable_admission_plugins.setter
    def enable_admission_plugins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "enable_admission_plugins", value)

    @property
    @pulumi.getter(name="enableAggregatorRouting")
    def enable_aggregator_routing(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_aggregator_routing")

    @enable_aggregator_routing.setter
    def enable_aggregator_routing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_aggregator_routing", value)

    @property
    @pulumi.getter(name="enableBootstrapAuthToken")
    def enable_bootstrap_auth_token(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_bootstrap_auth_token")

    @enable_bootstrap_auth_token.setter
    def enable_bootstrap_auth_token(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_bootstrap_auth_token", value)

    @property
    @pulumi.getter(name="enableProfiling")
    def enable_profiling(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_profiling")

    @enable_profiling.setter
    def enable_profiling(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_profiling", value)

    @property
    @pulumi.getter(name="encryptionProviderConfig")
    def encryption_provider_config(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "encryption_provider_config")

    @encryption_provider_config.setter
    def encryption_provider_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encryption_provider_config", value)

    @property
    @pulumi.getter(name="etcdCaFile")
    def etcd_ca_file(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "etcd_ca_file")

    @etcd_ca_file.setter
    def etcd_ca_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "etcd_ca_file", value)

    @property
    @pulumi.getter(name="etcdCertFile")
    def etcd_cert_file(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "etcd_cert_file")

    @etcd_cert_file.setter
    def etcd_cert_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "etcd_cert_file", value)

    @property
    @pulumi.getter(name="etcdKeyFile")
    def etcd_key_file(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "etcd_key_file")

    @etcd_key_file.setter
    def etcd_key_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "etcd_key_file", value)

    @property
    @pulumi.getter(name="etcdQuorumRead")
    def etcd_quorum_read(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "etcd_quorum_read")

    @etcd_quorum_read.setter
    def etcd_quorum_read(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "etcd_quorum_read", value)

    @property
    @pulumi.getter(name="etcdServers")
    def etcd_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "etcd_servers")

    @etcd_servers.setter
    def etcd_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "etcd_servers", value)

    @property
    @pulumi.getter(name="etcdServersOverrides")
    def etcd_servers_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "etcd_servers_overrides")

    @etcd_servers_overrides.setter
    def etcd_servers_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "etcd_servers_overrides", value)

    @property
    @pulumi.getter(name="eventTtl")
    def event_ttl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "event_ttl")

    @event_ttl.setter
    def event_ttl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "event_ttl", value)

    @property
    @pulumi.getter(name="experimentalEncryptionProviderConfig")
    def experimental_encryption_provider_config(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "experimental_encryption_provider_config")

    @experimental_encryption_provider_config.setter
    def experimental_encryption_provider_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "experimental_encryption_provider_config", value)

    @property
    @pulumi.getter(name="featureGates")
    def feature_gates(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "feature_gates")

    @feature_gates.setter
    def feature_gates(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "feature_gates", value)

    @property
    @pulumi.getter(name="http2MaxStreamsPerConnection")
    def http2_max_streams_per_connection(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "http2_max_streams_per_connection")

    @http2_max_streams_per_connection.setter
    def http2_max_streams_per_connection(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http2_max_streams_per_connection", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="insecureBindAddress")
    def insecure_bind_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "insecure_bind_address")

    @insecure_bind_address.setter
    def insecure_bind_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "insecure_bind_address", value)

    @property
    @pulumi.getter(name="insecurePort")
    def insecure_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "insecure_port")

    @insecure_port.setter
    def insecure_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "insecure_port", value)

    @property
    @pulumi.getter(name="kubeletCertificateAuthority")
    def kubelet_certificate_authority(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kubelet_certificate_authority")

    @kubelet_certificate_authority.setter
    def kubelet_certificate_authority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubelet_certificate_authority", value)

    @property
    @pulumi.getter(name="kubeletClientCertificate")
    def kubelet_client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kubelet_client_certificate")

    @kubelet_client_certificate.setter
    def kubelet_client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubelet_client_certificate", value)

    @property
    @pulumi.getter(name="kubeletClientKey")
    def kubelet_client_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kubelet_client_key")

    @kubelet_client_key.setter
    def kubelet_client_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubelet_client_key", value)

    @property
    @pulumi.getter(name="kubeletPreferredAddressTypes")
    def kubelet_preferred_address_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "kubelet_preferred_address_types")

    @kubelet_preferred_address_types.setter
    def kubelet_preferred_address_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "kubelet_preferred_address_types", value)

    @property
    @pulumi.getter(name="logFormat")
    def log_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_format")

    @log_format.setter
    def log_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_format", value)

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "log_level")

    @log_level.setter
    def log_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "log_level", value)

    @property
    @pulumi.getter(name="maxMutatingRequestsInflight")
    def max_mutating_requests_inflight(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_mutating_requests_inflight")

    @max_mutating_requests_inflight.setter
    def max_mutating_requests_inflight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_mutating_requests_inflight", value)

    @property
    @pulumi.getter(name="maxRequestsInflight")
    def max_requests_inflight(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_requests_inflight")

    @max_requests_inflight.setter
    def max_requests_inflight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_requests_inflight", value)

    @property
    @pulumi.getter(name="memoryLimit")
    def memory_limit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "memory_limit")

    @memory_limit.setter
    def memory_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory_limit", value)

    @property
    @pulumi.getter(name="memoryRequest")
    def memory_request(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "memory_request")

    @memory_request.setter
    def memory_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory_request", value)

    @property
    @pulumi.getter(name="minRequestTimeout")
    def min_request_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_request_timeout")

    @min_request_timeout.setter
    def min_request_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_request_timeout", value)

    @property
    @pulumi.getter(name="oidcCaFile")
    def oidc_ca_file(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oidc_ca_file")

    @oidc_ca_file.setter
    def oidc_ca_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oidc_ca_file", value)

    @property
    @pulumi.getter(name="oidcClientId")
    def oidc_client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oidc_client_id")

    @oidc_client_id.setter
    def oidc_client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oidc_client_id", value)

    @property
    @pulumi.getter(name="oidcGroupsClaim")
    def oidc_groups_claim(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oidc_groups_claim")

    @oidc_groups_claim.setter
    def oidc_groups_claim(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oidc_groups_claim", value)

    @property
    @pulumi.getter(name="oidcGroupsPrefix")
    def oidc_groups_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oidc_groups_prefix")

    @oidc_groups_prefix.setter
    def oidc_groups_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oidc_groups_prefix", value)

    @property
    @pulumi.getter(name="oidcIssuerUrl")
    def oidc_issuer_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oidc_issuer_url")

    @oidc_issuer_url.setter
    def oidc_issuer_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oidc_issuer_url", value)

    @property
    @pulumi.getter(name="oidcRequiredClaims")
    def oidc_required_claims(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "oidc_required_claims")

    @oidc_required_claims.setter
    def oidc_required_claims(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "oidc_required_claims", value)

    @property
    @pulumi.getter(name="oidcUsernameClaim")
    def oidc_username_claim(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oidc_username_claim")

    @oidc_username_claim.setter
    def oidc_username_claim(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oidc_username_claim", value)

    @property
    @pulumi.getter(name="oidcUsernamePrefix")
    def oidc_username_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oidc_username_prefix")

    @oidc_username_prefix.setter
    def oidc_username_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oidc_username_prefix", value)

    @property
    @pulumi.getter(name="proxyClientCertFile")
    def proxy_client_cert_file(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy_client_cert_file")

    @proxy_client_cert_file.setter
    def proxy_client_cert_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_client_cert_file", value)

    @property
    @pulumi.getter(name="proxyClientKeyFile")
    def proxy_client_key_file(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy_client_key_file")

    @proxy_client_key_file.setter
    def proxy_client_key_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_client_key_file", value)

    @property
    @pulumi.getter(name="requestTimeout")
    def request_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "request_timeout")

    @request_timeout.setter
    def request_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_timeout", value)

    @property
    @pulumi.getter(name="requestheaderAllowedNames")
    def requestheader_allowed_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "requestheader_allowed_names")

    @requestheader_allowed_names.setter
    def requestheader_allowed_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "requestheader_allowed_names", value)

    @property
    @pulumi.getter(name="requestheaderClientCaFile")
    def requestheader_client_ca_file(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "requestheader_client_ca_file")

    @requestheader_client_ca_file.setter
    def requestheader_client_ca_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requestheader_client_ca_file", value)

    @property
    @pulumi.getter(name="requestheaderExtraHeaderPrefixes")
    def requestheader_extra_header_prefixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "requestheader_extra_header_prefixes")

    @requestheader_extra_header_prefixes.setter
    def requestheader_extra_header_prefixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "requestheader_extra_header_prefixes", value)

    @property
    @pulumi.getter(name="requestheaderGroupHeaders")
    def requestheader_group_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "requestheader_group_headers")

    @requestheader_group_headers.setter
    def requestheader_group_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "requestheader_group_headers", value)

    @property
    @pulumi.getter(name="requestheaderUsernameHeaders")
    def requestheader_username_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "requestheader_username_headers")

    @requestheader_username_headers.setter
    def requestheader_username_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "requestheader_username_headers", value)

    @property
    @pulumi.getter(name="runtimeConfig")
    def runtime_config(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "runtime_config")

    @runtime_config.setter
    def runtime_config(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "runtime_config", value)

    @property
    @pulumi.getter(name="securePort")
    def secure_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "secure_port")

    @secure_port.setter
    def secure_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "secure_port", value)

    @property
    @pulumi.getter(name="serviceAccountIssuer")
    def service_account_issuer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_account_issuer")

    @service_account_issuer.setter
    def service_account_issuer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_issuer", value)

    @property
    @pulumi.getter(name="serviceAccountJwksuri")
    def service_account_jwksuri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_account_jwksuri")

    @service_account_jwksuri.setter
    def service_account_jwksuri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_jwksuri", value)

    @property
    @pulumi.getter(name="serviceAccountKeyFiles")
    def service_account_key_files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "service_account_key_files")

    @service_account_key_files.setter
    def service_account_key_files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "service_account_key_files", value)

    @property
    @pulumi.getter(name="serviceAccountSigningKeyFile")
    def service_account_signing_key_file(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_account_signing_key_file")

    @service_account_signing_key_file.setter
    def service_account_signing_key_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_signing_key_file", value)

    @property
    @pulumi.getter(name="serviceClusterIpRange")
    def service_cluster_ip_range(self) -> Optional[pulumi.Input[str]]:
        """
        - String - ServiceClusterIPRange is the CIDR, from the internal network, where we allocate IPs for services.
        """
        return pulumi.get(self, "service_cluster_ip_range")

    @service_cluster_ip_range.setter
    def service_cluster_ip_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_cluster_ip_range", value)

    @property
    @pulumi.getter(name="serviceNodePortRange")
    def service_node_port_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_node_port_range")

    @service_node_port_range.setter
    def service_node_port_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_node_port_range", value)

    @property
    @pulumi.getter(name="storageBackend")
    def storage_backend(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "storage_backend")

    @storage_backend.setter
    def storage_backend(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_backend", value)

    @property
    @pulumi.getter(name="targetRamMb")
    def target_ram_mb(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "target_ram_mb")

    @target_ram_mb.setter
    def target_ram_mb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "target_ram_mb", value)

    @property
    @pulumi.getter(name="tlsCertFile")
    def tls_cert_file(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tls_cert_file")

    @tls_cert_file.setter
    def tls_cert_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_cert_file", value)

    @property
    @pulumi.getter(name="tlsCipherSuites")
    def tls_cipher_suites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tls_cipher_suites")

    @tls_cipher_suites.setter
    def tls_cipher_suites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tls_cipher_suites", value)

    @property
    @pulumi.getter(name="tlsMinVersion")
    def tls_min_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tls_min_version")

    @tls_min_version.setter
    def tls_min_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_min_version", value)

    @property
    @pulumi.getter(name="tlsPrivateKeyFile")
    def tls_private_key_file(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tls_private_key_file")

    @tls_private_key_file.setter
    def tls_private_key_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_private_key_file", value)

    @property
    @pulumi.getter(name="tokenAuthFile")
    def token_auth_file(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "token_auth_file")

    @token_auth_file.setter
    def token_auth_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_auth_file", value)


@pulumi.input_type
class ClusterKubeApiServerAnonymousAuthArgs:
    def __init__(__self__, *,
                 value: Optional[pulumi.Input[bool]] = None):
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ClusterKubeControllerManagerArgs:
    def __init__(__self__, *,
                 allocate_node_cidrs: Optional[pulumi.Input[bool]] = None,
                 attach_detach_reconcile_sync_period: Optional[pulumi.Input[str]] = None,
                 authentication_kubeconfig: Optional[pulumi.Input[str]] = None,
                 authorization_always_allow_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 authorization_kubeconfig: Optional[pulumi.Input[str]] = None,
                 cidr_allocator_type: Optional[pulumi.Input[str]] = None,
                 cloud_provider: Optional[pulumi.Input[str]] = None,
                 cluster_cidr: Optional[pulumi.Input[str]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 concurrent_deployment_syncs: Optional[pulumi.Input[int]] = None,
                 concurrent_endpoint_syncs: Optional[pulumi.Input[int]] = None,
                 concurrent_namespace_syncs: Optional[pulumi.Input[int]] = None,
                 concurrent_rc_syncs: Optional[pulumi.Input[int]] = None,
                 concurrent_replicaset_syncs: Optional[pulumi.Input[int]] = None,
                 concurrent_resource_quota_syncs: Optional[pulumi.Input[int]] = None,
                 concurrent_service_syncs: Optional[pulumi.Input[int]] = None,
                 concurrent_serviceaccount_token_syncs: Optional[pulumi.Input[int]] = None,
                 configure_cloud_routes: Optional[pulumi.Input[bool]] = None,
                 controllers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 disable_attach_detach_reconcile_sync: Optional[pulumi.Input[bool]] = None,
                 enable_leader_migration: Optional[pulumi.Input[bool]] = None,
                 enable_profiling: Optional[pulumi.Input[bool]] = None,
                 experimental_cluster_signing_duration: Optional[pulumi.Input[str]] = None,
                 external_cloud_volume_plugin: Optional[pulumi.Input[str]] = None,
                 feature_gates: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 horizontal_pod_autoscaler_cpu_initialization_period: Optional[pulumi.Input[str]] = None,
                 horizontal_pod_autoscaler_downscale_delay: Optional[pulumi.Input[str]] = None,
                 horizontal_pod_autoscaler_downscale_stabilization: Optional[pulumi.Input[str]] = None,
                 horizontal_pod_autoscaler_initial_readiness_delay: Optional[pulumi.Input[str]] = None,
                 horizontal_pod_autoscaler_sync_period: Optional[pulumi.Input[str]] = None,
                 horizontal_pod_autoscaler_tolerance: Optional[pulumi.Input[str]] = None,
                 horizontal_pod_autoscaler_upscale_delay: Optional[pulumi.Input[str]] = None,
                 horizontal_pod_autoscaler_use_rest_clients: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 kube_api_burst: Optional[pulumi.Input[int]] = None,
                 kube_api_qps: Optional[pulumi.Input[str]] = None,
                 leader_election: Optional[pulumi.Input['ClusterKubeControllerManagerLeaderElectionArgs']] = None,
                 log_format: Optional[pulumi.Input[str]] = None,
                 log_level: Optional[pulumi.Input[int]] = None,
                 master: Optional[pulumi.Input[str]] = None,
                 min_resync_period: Optional[pulumi.Input[str]] = None,
                 node_cidr_mask_size: Optional[pulumi.Input[int]] = None,
                 node_monitor_grace_period: Optional[pulumi.Input[str]] = None,
                 node_monitor_period: Optional[pulumi.Input[str]] = None,
                 pod_eviction_timeout: Optional[pulumi.Input[str]] = None,
                 root_ca_file: Optional[pulumi.Input[str]] = None,
                 service_account_private_key_file: Optional[pulumi.Input[str]] = None,
                 terminated_pod_gc_threshold: Optional[pulumi.Input[int]] = None,
                 tls_cert_file: Optional[pulumi.Input[str]] = None,
                 tls_cipher_suites: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tls_min_version: Optional[pulumi.Input[str]] = None,
                 tls_private_key_file: Optional[pulumi.Input[str]] = None,
                 use_service_account_credentials: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] cloud_provider: - cloud_provider_spec - CloudProvider configures the cloud provider to use.
        """
        if allocate_node_cidrs is not None:
            pulumi.set(__self__, "allocate_node_cidrs", allocate_node_cidrs)
        if attach_detach_reconcile_sync_period is not None:
            pulumi.set(__self__, "attach_detach_reconcile_sync_period", attach_detach_reconcile_sync_period)
        if authentication_kubeconfig is not None:
            pulumi.set(__self__, "authentication_kubeconfig", authentication_kubeconfig)
        if authorization_always_allow_paths is not None:
            pulumi.set(__self__, "authorization_always_allow_paths", authorization_always_allow_paths)
        if authorization_kubeconfig is not None:
            pulumi.set(__self__, "authorization_kubeconfig", authorization_kubeconfig)
        if cidr_allocator_type is not None:
            pulumi.set(__self__, "cidr_allocator_type", cidr_allocator_type)
        if cloud_provider is not None:
            pulumi.set(__self__, "cloud_provider", cloud_provider)
        if cluster_cidr is not None:
            pulumi.set(__self__, "cluster_cidr", cluster_cidr)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if concurrent_deployment_syncs is not None:
            pulumi.set(__self__, "concurrent_deployment_syncs", concurrent_deployment_syncs)
        if concurrent_endpoint_syncs is not None:
            pulumi.set(__self__, "concurrent_endpoint_syncs", concurrent_endpoint_syncs)
        if concurrent_namespace_syncs is not None:
            pulumi.set(__self__, "concurrent_namespace_syncs", concurrent_namespace_syncs)
        if concurrent_rc_syncs is not None:
            pulumi.set(__self__, "concurrent_rc_syncs", concurrent_rc_syncs)
        if concurrent_replicaset_syncs is not None:
            pulumi.set(__self__, "concurrent_replicaset_syncs", concurrent_replicaset_syncs)
        if concurrent_resource_quota_syncs is not None:
            pulumi.set(__self__, "concurrent_resource_quota_syncs", concurrent_resource_quota_syncs)
        if concurrent_service_syncs is not None:
            pulumi.set(__self__, "concurrent_service_syncs", concurrent_service_syncs)
        if concurrent_serviceaccount_token_syncs is not None:
            pulumi.set(__self__, "concurrent_serviceaccount_token_syncs", concurrent_serviceaccount_token_syncs)
        if configure_cloud_routes is not None:
            pulumi.set(__self__, "configure_cloud_routes", configure_cloud_routes)
        if controllers is not None:
            pulumi.set(__self__, "controllers", controllers)
        if disable_attach_detach_reconcile_sync is not None:
            pulumi.set(__self__, "disable_attach_detach_reconcile_sync", disable_attach_detach_reconcile_sync)
        if enable_leader_migration is not None:
            pulumi.set(__self__, "enable_leader_migration", enable_leader_migration)
        if enable_profiling is not None:
            pulumi.set(__self__, "enable_profiling", enable_profiling)
        if experimental_cluster_signing_duration is not None:
            pulumi.set(__self__, "experimental_cluster_signing_duration", experimental_cluster_signing_duration)
        if external_cloud_volume_plugin is not None:
            pulumi.set(__self__, "external_cloud_volume_plugin", external_cloud_volume_plugin)
        if feature_gates is not None:
            pulumi.set(__self__, "feature_gates", feature_gates)
        if horizontal_pod_autoscaler_cpu_initialization_period is not None:
            pulumi.set(__self__, "horizontal_pod_autoscaler_cpu_initialization_period", horizontal_pod_autoscaler_cpu_initialization_period)
        if horizontal_pod_autoscaler_downscale_delay is not None:
            pulumi.set(__self__, "horizontal_pod_autoscaler_downscale_delay", horizontal_pod_autoscaler_downscale_delay)
        if horizontal_pod_autoscaler_downscale_stabilization is not None:
            pulumi.set(__self__, "horizontal_pod_autoscaler_downscale_stabilization", horizontal_pod_autoscaler_downscale_stabilization)
        if horizontal_pod_autoscaler_initial_readiness_delay is not None:
            pulumi.set(__self__, "horizontal_pod_autoscaler_initial_readiness_delay", horizontal_pod_autoscaler_initial_readiness_delay)
        if horizontal_pod_autoscaler_sync_period is not None:
            pulumi.set(__self__, "horizontal_pod_autoscaler_sync_period", horizontal_pod_autoscaler_sync_period)
        if horizontal_pod_autoscaler_tolerance is not None:
            pulumi.set(__self__, "horizontal_pod_autoscaler_tolerance", horizontal_pod_autoscaler_tolerance)
        if horizontal_pod_autoscaler_upscale_delay is not None:
            pulumi.set(__self__, "horizontal_pod_autoscaler_upscale_delay", horizontal_pod_autoscaler_upscale_delay)
        if horizontal_pod_autoscaler_use_rest_clients is not None:
            pulumi.set(__self__, "horizontal_pod_autoscaler_use_rest_clients", horizontal_pod_autoscaler_use_rest_clients)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if kube_api_burst is not None:
            pulumi.set(__self__, "kube_api_burst", kube_api_burst)
        if kube_api_qps is not None:
            pulumi.set(__self__, "kube_api_qps", kube_api_qps)
        if leader_election is not None:
            pulumi.set(__self__, "leader_election", leader_election)
        if log_format is not None:
            pulumi.set(__self__, "log_format", log_format)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)
        if master is not None:
            pulumi.set(__self__, "master", master)
        if min_resync_period is not None:
            pulumi.set(__self__, "min_resync_period", min_resync_period)
        if node_cidr_mask_size is not None:
            pulumi.set(__self__, "node_cidr_mask_size", node_cidr_mask_size)
        if node_monitor_grace_period is not None:
            pulumi.set(__self__, "node_monitor_grace_period", node_monitor_grace_period)
        if node_monitor_period is not None:
            pulumi.set(__self__, "node_monitor_period", node_monitor_period)
        if pod_eviction_timeout is not None:
            pulumi.set(__self__, "pod_eviction_timeout", pod_eviction_timeout)
        if root_ca_file is not None:
            pulumi.set(__self__, "root_ca_file", root_ca_file)
        if service_account_private_key_file is not None:
            pulumi.set(__self__, "service_account_private_key_file", service_account_private_key_file)
        if terminated_pod_gc_threshold is not None:
            pulumi.set(__self__, "terminated_pod_gc_threshold", terminated_pod_gc_threshold)
        if tls_cert_file is not None:
            pulumi.set(__self__, "tls_cert_file", tls_cert_file)
        if tls_cipher_suites is not None:
            pulumi.set(__self__, "tls_cipher_suites", tls_cipher_suites)
        if tls_min_version is not None:
            pulumi.set(__self__, "tls_min_version", tls_min_version)
        if tls_private_key_file is not None:
            pulumi.set(__self__, "tls_private_key_file", tls_private_key_file)
        if use_service_account_credentials is not None:
            pulumi.set(__self__, "use_service_account_credentials", use_service_account_credentials)

    @property
    @pulumi.getter(name="allocateNodeCidrs")
    def allocate_node_cidrs(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allocate_node_cidrs")

    @allocate_node_cidrs.setter
    def allocate_node_cidrs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allocate_node_cidrs", value)

    @property
    @pulumi.getter(name="attachDetachReconcileSyncPeriod")
    def attach_detach_reconcile_sync_period(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attach_detach_reconcile_sync_period")

    @attach_detach_reconcile_sync_period.setter
    def attach_detach_reconcile_sync_period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attach_detach_reconcile_sync_period", value)

    @property
    @pulumi.getter(name="authenticationKubeconfig")
    def authentication_kubeconfig(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authentication_kubeconfig")

    @authentication_kubeconfig.setter
    def authentication_kubeconfig(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_kubeconfig", value)

    @property
    @pulumi.getter(name="authorizationAlwaysAllowPaths")
    def authorization_always_allow_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "authorization_always_allow_paths")

    @authorization_always_allow_paths.setter
    def authorization_always_allow_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "authorization_always_allow_paths", value)

    @property
    @pulumi.getter(name="authorizationKubeconfig")
    def authorization_kubeconfig(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authorization_kubeconfig")

    @authorization_kubeconfig.setter
    def authorization_kubeconfig(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorization_kubeconfig", value)

    @property
    @pulumi.getter(name="cidrAllocatorType")
    def cidr_allocator_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cidr_allocator_type")

    @cidr_allocator_type.setter
    def cidr_allocator_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cidr_allocator_type", value)

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> Optional[pulumi.Input[str]]:
        """
        - cloud_provider_spec - CloudProvider configures the cloud provider to use.
        """
        return pulumi.get(self, "cloud_provider")

    @cloud_provider.setter
    def cloud_provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_provider", value)

    @property
    @pulumi.getter(name="clusterCidr")
    def cluster_cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_cidr")

    @cluster_cidr.setter
    def cluster_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_cidr", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="concurrentDeploymentSyncs")
    def concurrent_deployment_syncs(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "concurrent_deployment_syncs")

    @concurrent_deployment_syncs.setter
    def concurrent_deployment_syncs(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "concurrent_deployment_syncs", value)

    @property
    @pulumi.getter(name="concurrentEndpointSyncs")
    def concurrent_endpoint_syncs(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "concurrent_endpoint_syncs")

    @concurrent_endpoint_syncs.setter
    def concurrent_endpoint_syncs(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "concurrent_endpoint_syncs", value)

    @property
    @pulumi.getter(name="concurrentNamespaceSyncs")
    def concurrent_namespace_syncs(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "concurrent_namespace_syncs")

    @concurrent_namespace_syncs.setter
    def concurrent_namespace_syncs(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "concurrent_namespace_syncs", value)

    @property
    @pulumi.getter(name="concurrentRcSyncs")
    def concurrent_rc_syncs(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "concurrent_rc_syncs")

    @concurrent_rc_syncs.setter
    def concurrent_rc_syncs(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "concurrent_rc_syncs", value)

    @property
    @pulumi.getter(name="concurrentReplicasetSyncs")
    def concurrent_replicaset_syncs(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "concurrent_replicaset_syncs")

    @concurrent_replicaset_syncs.setter
    def concurrent_replicaset_syncs(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "concurrent_replicaset_syncs", value)

    @property
    @pulumi.getter(name="concurrentResourceQuotaSyncs")
    def concurrent_resource_quota_syncs(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "concurrent_resource_quota_syncs")

    @concurrent_resource_quota_syncs.setter
    def concurrent_resource_quota_syncs(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "concurrent_resource_quota_syncs", value)

    @property
    @pulumi.getter(name="concurrentServiceSyncs")
    def concurrent_service_syncs(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "concurrent_service_syncs")

    @concurrent_service_syncs.setter
    def concurrent_service_syncs(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "concurrent_service_syncs", value)

    @property
    @pulumi.getter(name="concurrentServiceaccountTokenSyncs")
    def concurrent_serviceaccount_token_syncs(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "concurrent_serviceaccount_token_syncs")

    @concurrent_serviceaccount_token_syncs.setter
    def concurrent_serviceaccount_token_syncs(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "concurrent_serviceaccount_token_syncs", value)

    @property
    @pulumi.getter(name="configureCloudRoutes")
    def configure_cloud_routes(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "configure_cloud_routes")

    @configure_cloud_routes.setter
    def configure_cloud_routes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "configure_cloud_routes", value)

    @property
    @pulumi.getter
    def controllers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "controllers")

    @controllers.setter
    def controllers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "controllers", value)

    @property
    @pulumi.getter(name="disableAttachDetachReconcileSync")
    def disable_attach_detach_reconcile_sync(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disable_attach_detach_reconcile_sync")

    @disable_attach_detach_reconcile_sync.setter
    def disable_attach_detach_reconcile_sync(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_attach_detach_reconcile_sync", value)

    @property
    @pulumi.getter(name="enableLeaderMigration")
    def enable_leader_migration(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_leader_migration")

    @enable_leader_migration.setter
    def enable_leader_migration(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_leader_migration", value)

    @property
    @pulumi.getter(name="enableProfiling")
    def enable_profiling(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_profiling")

    @enable_profiling.setter
    def enable_profiling(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_profiling", value)

    @property
    @pulumi.getter(name="experimentalClusterSigningDuration")
    def experimental_cluster_signing_duration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "experimental_cluster_signing_duration")

    @experimental_cluster_signing_duration.setter
    def experimental_cluster_signing_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "experimental_cluster_signing_duration", value)

    @property
    @pulumi.getter(name="externalCloudVolumePlugin")
    def external_cloud_volume_plugin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_cloud_volume_plugin")

    @external_cloud_volume_plugin.setter
    def external_cloud_volume_plugin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_cloud_volume_plugin", value)

    @property
    @pulumi.getter(name="featureGates")
    def feature_gates(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "feature_gates")

    @feature_gates.setter
    def feature_gates(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "feature_gates", value)

    @property
    @pulumi.getter(name="horizontalPodAutoscalerCpuInitializationPeriod")
    def horizontal_pod_autoscaler_cpu_initialization_period(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "horizontal_pod_autoscaler_cpu_initialization_period")

    @horizontal_pod_autoscaler_cpu_initialization_period.setter
    def horizontal_pod_autoscaler_cpu_initialization_period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "horizontal_pod_autoscaler_cpu_initialization_period", value)

    @property
    @pulumi.getter(name="horizontalPodAutoscalerDownscaleDelay")
    def horizontal_pod_autoscaler_downscale_delay(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "horizontal_pod_autoscaler_downscale_delay")

    @horizontal_pod_autoscaler_downscale_delay.setter
    def horizontal_pod_autoscaler_downscale_delay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "horizontal_pod_autoscaler_downscale_delay", value)

    @property
    @pulumi.getter(name="horizontalPodAutoscalerDownscaleStabilization")
    def horizontal_pod_autoscaler_downscale_stabilization(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "horizontal_pod_autoscaler_downscale_stabilization")

    @horizontal_pod_autoscaler_downscale_stabilization.setter
    def horizontal_pod_autoscaler_downscale_stabilization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "horizontal_pod_autoscaler_downscale_stabilization", value)

    @property
    @pulumi.getter(name="horizontalPodAutoscalerInitialReadinessDelay")
    def horizontal_pod_autoscaler_initial_readiness_delay(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "horizontal_pod_autoscaler_initial_readiness_delay")

    @horizontal_pod_autoscaler_initial_readiness_delay.setter
    def horizontal_pod_autoscaler_initial_readiness_delay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "horizontal_pod_autoscaler_initial_readiness_delay", value)

    @property
    @pulumi.getter(name="horizontalPodAutoscalerSyncPeriod")
    def horizontal_pod_autoscaler_sync_period(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "horizontal_pod_autoscaler_sync_period")

    @horizontal_pod_autoscaler_sync_period.setter
    def horizontal_pod_autoscaler_sync_period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "horizontal_pod_autoscaler_sync_period", value)

    @property
    @pulumi.getter(name="horizontalPodAutoscalerTolerance")
    def horizontal_pod_autoscaler_tolerance(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "horizontal_pod_autoscaler_tolerance")

    @horizontal_pod_autoscaler_tolerance.setter
    def horizontal_pod_autoscaler_tolerance(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "horizontal_pod_autoscaler_tolerance", value)

    @property
    @pulumi.getter(name="horizontalPodAutoscalerUpscaleDelay")
    def horizontal_pod_autoscaler_upscale_delay(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "horizontal_pod_autoscaler_upscale_delay")

    @horizontal_pod_autoscaler_upscale_delay.setter
    def horizontal_pod_autoscaler_upscale_delay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "horizontal_pod_autoscaler_upscale_delay", value)

    @property
    @pulumi.getter(name="horizontalPodAutoscalerUseRestClients")
    def horizontal_pod_autoscaler_use_rest_clients(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "horizontal_pod_autoscaler_use_rest_clients")

    @horizontal_pod_autoscaler_use_rest_clients.setter
    def horizontal_pod_autoscaler_use_rest_clients(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "horizontal_pod_autoscaler_use_rest_clients", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="kubeApiBurst")
    def kube_api_burst(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "kube_api_burst")

    @kube_api_burst.setter
    def kube_api_burst(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "kube_api_burst", value)

    @property
    @pulumi.getter(name="kubeApiQps")
    def kube_api_qps(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kube_api_qps")

    @kube_api_qps.setter
    def kube_api_qps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kube_api_qps", value)

    @property
    @pulumi.getter(name="leaderElection")
    def leader_election(self) -> Optional[pulumi.Input['ClusterKubeControllerManagerLeaderElectionArgs']]:
        return pulumi.get(self, "leader_election")

    @leader_election.setter
    def leader_election(self, value: Optional[pulumi.Input['ClusterKubeControllerManagerLeaderElectionArgs']]):
        pulumi.set(self, "leader_election", value)

    @property
    @pulumi.getter(name="logFormat")
    def log_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_format")

    @log_format.setter
    def log_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_format", value)

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "log_level")

    @log_level.setter
    def log_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "log_level", value)

    @property
    @pulumi.getter
    def master(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "master")

    @master.setter
    def master(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "master", value)

    @property
    @pulumi.getter(name="minResyncPeriod")
    def min_resync_period(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "min_resync_period")

    @min_resync_period.setter
    def min_resync_period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_resync_period", value)

    @property
    @pulumi.getter(name="nodeCidrMaskSize")
    def node_cidr_mask_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "node_cidr_mask_size")

    @node_cidr_mask_size.setter
    def node_cidr_mask_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "node_cidr_mask_size", value)

    @property
    @pulumi.getter(name="nodeMonitorGracePeriod")
    def node_monitor_grace_period(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "node_monitor_grace_period")

    @node_monitor_grace_period.setter
    def node_monitor_grace_period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_monitor_grace_period", value)

    @property
    @pulumi.getter(name="nodeMonitorPeriod")
    def node_monitor_period(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "node_monitor_period")

    @node_monitor_period.setter
    def node_monitor_period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_monitor_period", value)

    @property
    @pulumi.getter(name="podEvictionTimeout")
    def pod_eviction_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pod_eviction_timeout")

    @pod_eviction_timeout.setter
    def pod_eviction_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pod_eviction_timeout", value)

    @property
    @pulumi.getter(name="rootCaFile")
    def root_ca_file(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "root_ca_file")

    @root_ca_file.setter
    def root_ca_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_ca_file", value)

    @property
    @pulumi.getter(name="serviceAccountPrivateKeyFile")
    def service_account_private_key_file(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_account_private_key_file")

    @service_account_private_key_file.setter
    def service_account_private_key_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_private_key_file", value)

    @property
    @pulumi.getter(name="terminatedPodGcThreshold")
    def terminated_pod_gc_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "terminated_pod_gc_threshold")

    @terminated_pod_gc_threshold.setter
    def terminated_pod_gc_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "terminated_pod_gc_threshold", value)

    @property
    @pulumi.getter(name="tlsCertFile")
    def tls_cert_file(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tls_cert_file")

    @tls_cert_file.setter
    def tls_cert_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_cert_file", value)

    @property
    @pulumi.getter(name="tlsCipherSuites")
    def tls_cipher_suites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tls_cipher_suites")

    @tls_cipher_suites.setter
    def tls_cipher_suites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tls_cipher_suites", value)

    @property
    @pulumi.getter(name="tlsMinVersion")
    def tls_min_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tls_min_version")

    @tls_min_version.setter
    def tls_min_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_min_version", value)

    @property
    @pulumi.getter(name="tlsPrivateKeyFile")
    def tls_private_key_file(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tls_private_key_file")

    @tls_private_key_file.setter
    def tls_private_key_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_private_key_file", value)

    @property
    @pulumi.getter(name="useServiceAccountCredentials")
    def use_service_account_credentials(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_service_account_credentials")

    @use_service_account_credentials.setter
    def use_service_account_credentials(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_service_account_credentials", value)


@pulumi.input_type
class ClusterKubeControllerManagerLeaderElectionArgs:
    def __init__(__self__, *,
                 leader_elect: Optional[pulumi.Input[bool]] = None,
                 leader_elect_lease_duration: Optional[pulumi.Input[str]] = None,
                 leader_elect_renew_deadline_duration: Optional[pulumi.Input[str]] = None,
                 leader_elect_resource_lock: Optional[pulumi.Input[str]] = None,
                 leader_elect_resource_name: Optional[pulumi.Input[str]] = None,
                 leader_elect_resource_namespace: Optional[pulumi.Input[str]] = None,
                 leader_elect_retry_period: Optional[pulumi.Input[str]] = None):
        if leader_elect is not None:
            pulumi.set(__self__, "leader_elect", leader_elect)
        if leader_elect_lease_duration is not None:
            pulumi.set(__self__, "leader_elect_lease_duration", leader_elect_lease_duration)
        if leader_elect_renew_deadline_duration is not None:
            pulumi.set(__self__, "leader_elect_renew_deadline_duration", leader_elect_renew_deadline_duration)
        if leader_elect_resource_lock is not None:
            pulumi.set(__self__, "leader_elect_resource_lock", leader_elect_resource_lock)
        if leader_elect_resource_name is not None:
            pulumi.set(__self__, "leader_elect_resource_name", leader_elect_resource_name)
        if leader_elect_resource_namespace is not None:
            pulumi.set(__self__, "leader_elect_resource_namespace", leader_elect_resource_namespace)
        if leader_elect_retry_period is not None:
            pulumi.set(__self__, "leader_elect_retry_period", leader_elect_retry_period)

    @property
    @pulumi.getter(name="leaderElect")
    def leader_elect(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "leader_elect")

    @leader_elect.setter
    def leader_elect(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "leader_elect", value)

    @property
    @pulumi.getter(name="leaderElectLeaseDuration")
    def leader_elect_lease_duration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "leader_elect_lease_duration")

    @leader_elect_lease_duration.setter
    def leader_elect_lease_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "leader_elect_lease_duration", value)

    @property
    @pulumi.getter(name="leaderElectRenewDeadlineDuration")
    def leader_elect_renew_deadline_duration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "leader_elect_renew_deadline_duration")

    @leader_elect_renew_deadline_duration.setter
    def leader_elect_renew_deadline_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "leader_elect_renew_deadline_duration", value)

    @property
    @pulumi.getter(name="leaderElectResourceLock")
    def leader_elect_resource_lock(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "leader_elect_resource_lock")

    @leader_elect_resource_lock.setter
    def leader_elect_resource_lock(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "leader_elect_resource_lock", value)

    @property
    @pulumi.getter(name="leaderElectResourceName")
    def leader_elect_resource_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "leader_elect_resource_name")

    @leader_elect_resource_name.setter
    def leader_elect_resource_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "leader_elect_resource_name", value)

    @property
    @pulumi.getter(name="leaderElectResourceNamespace")
    def leader_elect_resource_namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "leader_elect_resource_namespace")

    @leader_elect_resource_namespace.setter
    def leader_elect_resource_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "leader_elect_resource_namespace", value)

    @property
    @pulumi.getter(name="leaderElectRetryPeriod")
    def leader_elect_retry_period(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "leader_elect_retry_period")

    @leader_elect_retry_period.setter
    def leader_elect_retry_period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "leader_elect_retry_period", value)


@pulumi.input_type
class ClusterKubeDnsArgs:
    def __init__(__self__, *,
                 affinity: Optional[pulumi.Input['ClusterKubeDnsAffinityArgs']] = None,
                 cache_max_concurrent: Optional[pulumi.Input[int]] = None,
                 cache_max_size: Optional[pulumi.Input[int]] = None,
                 core_dns_image: Optional[pulumi.Input[str]] = None,
                 cpa_image: Optional[pulumi.Input[str]] = None,
                 cpu_request: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 external_core_file: Optional[pulumi.Input[str]] = None,
                 memory_limit: Optional[pulumi.Input[str]] = None,
                 memory_request: Optional[pulumi.Input[str]] = None,
                 node_local_dns: Optional[pulumi.Input['ClusterKubeDnsNodeLocalDnsArgs']] = None,
                 provider: Optional[pulumi.Input[str]] = None,
                 server_ip: Optional[pulumi.Input[str]] = None,
                 stub_domains: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsStubDomainArgs']]]] = None,
                 tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsTolerationArgs']]]] = None,
                 upstream_nameservers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if cache_max_concurrent is not None:
            pulumi.set(__self__, "cache_max_concurrent", cache_max_concurrent)
        if cache_max_size is not None:
            pulumi.set(__self__, "cache_max_size", cache_max_size)
        if core_dns_image is not None:
            pulumi.set(__self__, "core_dns_image", core_dns_image)
        if cpa_image is not None:
            pulumi.set(__self__, "cpa_image", cpa_image)
        if cpu_request is not None:
            pulumi.set(__self__, "cpu_request", cpu_request)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if external_core_file is not None:
            pulumi.set(__self__, "external_core_file", external_core_file)
        if memory_limit is not None:
            pulumi.set(__self__, "memory_limit", memory_limit)
        if memory_request is not None:
            pulumi.set(__self__, "memory_request", memory_request)
        if node_local_dns is not None:
            pulumi.set(__self__, "node_local_dns", node_local_dns)
        if provider is not None:
            pulumi.set(__self__, "provider", provider)
        if server_ip is not None:
            pulumi.set(__self__, "server_ip", server_ip)
        if stub_domains is not None:
            pulumi.set(__self__, "stub_domains", stub_domains)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)
        if upstream_nameservers is not None:
            pulumi.set(__self__, "upstream_nameservers", upstream_nameservers)

    @property
    @pulumi.getter
    def affinity(self) -> Optional[pulumi.Input['ClusterKubeDnsAffinityArgs']]:
        return pulumi.get(self, "affinity")

    @affinity.setter
    def affinity(self, value: Optional[pulumi.Input['ClusterKubeDnsAffinityArgs']]):
        pulumi.set(self, "affinity", value)

    @property
    @pulumi.getter(name="cacheMaxConcurrent")
    def cache_max_concurrent(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cache_max_concurrent")

    @cache_max_concurrent.setter
    def cache_max_concurrent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cache_max_concurrent", value)

    @property
    @pulumi.getter(name="cacheMaxSize")
    def cache_max_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cache_max_size")

    @cache_max_size.setter
    def cache_max_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cache_max_size", value)

    @property
    @pulumi.getter(name="coreDnsImage")
    def core_dns_image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "core_dns_image")

    @core_dns_image.setter
    def core_dns_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "core_dns_image", value)

    @property
    @pulumi.getter(name="cpaImage")
    def cpa_image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpa_image")

    @cpa_image.setter
    def cpa_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpa_image", value)

    @property
    @pulumi.getter(name="cpuRequest")
    def cpu_request(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpu_request")

    @cpu_request.setter
    def cpu_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_request", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="externalCoreFile")
    def external_core_file(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_core_file")

    @external_core_file.setter
    def external_core_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_core_file", value)

    @property
    @pulumi.getter(name="memoryLimit")
    def memory_limit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "memory_limit")

    @memory_limit.setter
    def memory_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory_limit", value)

    @property
    @pulumi.getter(name="memoryRequest")
    def memory_request(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "memory_request")

    @memory_request.setter
    def memory_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory_request", value)

    @property
    @pulumi.getter(name="nodeLocalDns")
    def node_local_dns(self) -> Optional[pulumi.Input['ClusterKubeDnsNodeLocalDnsArgs']]:
        return pulumi.get(self, "node_local_dns")

    @node_local_dns.setter
    def node_local_dns(self, value: Optional[pulumi.Input['ClusterKubeDnsNodeLocalDnsArgs']]):
        pulumi.set(self, "node_local_dns", value)

    @property
    @pulumi.getter
    def provider(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "provider")

    @provider.setter
    def provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider", value)

    @property
    @pulumi.getter(name="serverIp")
    def server_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_ip")

    @server_ip.setter
    def server_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_ip", value)

    @property
    @pulumi.getter(name="stubDomains")
    def stub_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsStubDomainArgs']]]]:
        return pulumi.get(self, "stub_domains")

    @stub_domains.setter
    def stub_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsStubDomainArgs']]]]):
        pulumi.set(self, "stub_domains", value)

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsTolerationArgs']]]]:
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsTolerationArgs']]]]):
        pulumi.set(self, "tolerations", value)

    @property
    @pulumi.getter(name="upstreamNameservers")
    def upstream_nameservers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "upstream_nameservers")

    @upstream_nameservers.setter
    def upstream_nameservers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "upstream_nameservers", value)


@pulumi.input_type
class ClusterKubeDnsAffinityArgs:
    def __init__(__self__, *,
                 node_affinity: Optional[pulumi.Input['ClusterKubeDnsAffinityNodeAffinityArgs']] = None,
                 pod_affinity: Optional[pulumi.Input['ClusterKubeDnsAffinityPodAffinityArgs']] = None,
                 pod_anti_affinity: Optional[pulumi.Input['ClusterKubeDnsAffinityPodAntiAffinityArgs']] = None):
        if node_affinity is not None:
            pulumi.set(__self__, "node_affinity", node_affinity)
        if pod_affinity is not None:
            pulumi.set(__self__, "pod_affinity", pod_affinity)
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="nodeAffinity")
    def node_affinity(self) -> Optional[pulumi.Input['ClusterKubeDnsAffinityNodeAffinityArgs']]:
        return pulumi.get(self, "node_affinity")

    @node_affinity.setter
    def node_affinity(self, value: Optional[pulumi.Input['ClusterKubeDnsAffinityNodeAffinityArgs']]):
        pulumi.set(self, "node_affinity", value)

    @property
    @pulumi.getter(name="podAffinity")
    def pod_affinity(self) -> Optional[pulumi.Input['ClusterKubeDnsAffinityPodAffinityArgs']]:
        return pulumi.get(self, "pod_affinity")

    @pod_affinity.setter
    def pod_affinity(self, value: Optional[pulumi.Input['ClusterKubeDnsAffinityPodAffinityArgs']]):
        pulumi.set(self, "pod_affinity", value)

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(self) -> Optional[pulumi.Input['ClusterKubeDnsAffinityPodAntiAffinityArgs']]:
        return pulumi.get(self, "pod_anti_affinity")

    @pod_anti_affinity.setter
    def pod_anti_affinity(self, value: Optional[pulumi.Input['ClusterKubeDnsAffinityPodAntiAffinityArgs']]):
        pulumi.set(self, "pod_anti_affinity", value)


@pulumi.input_type
class ClusterKubeDnsAffinityNodeAffinityArgs:
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_executions: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]] = None,
                 required_during_scheduling_ignored_during_execution: Optional[pulumi.Input['ClusterKubeDnsAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']] = None):
        if preferred_during_scheduling_ignored_during_executions is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_executions", preferred_during_scheduling_ignored_during_executions)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecutions")
    def preferred_during_scheduling_ignored_during_executions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]]:
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_executions")

    @preferred_during_scheduling_ignored_during_executions.setter
    def preferred_during_scheduling_ignored_during_executions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]]):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_executions", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional[pulumi.Input['ClusterKubeDnsAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(self, value: Optional[pulumi.Input['ClusterKubeDnsAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


@pulumi.input_type
class ClusterKubeDnsAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(__self__, *,
                 preference: Optional[pulumi.Input['ClusterKubeDnsAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs']] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def preference(self) -> Optional[pulumi.Input['ClusterKubeDnsAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs']]:
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(self, value: Optional[pulumi.Input['ClusterKubeDnsAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs']]):
        pulumi.set(self, "preference", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class ClusterKubeDnsAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionArgs']]]] = None,
                 match_fields: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldArgs']]]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionArgs']]]]:
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldArgs']]]]:
        return pulumi.get(self, "match_fields")

    @match_fields.setter
    def match_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldArgs']]]]):
        pulumi.set(self, "match_fields", value)


@pulumi.input_type
class ClusterKubeDnsAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ClusterKubeDnsAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ClusterKubeDnsAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(__self__, *,
                 node_selector_terms: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermArgs']]]] = None):
        if node_selector_terms is not None:
            pulumi.set(__self__, "node_selector_terms", node_selector_terms)

    @property
    @pulumi.getter(name="nodeSelectorTerms")
    def node_selector_terms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermArgs']]]]:
        return pulumi.get(self, "node_selector_terms")

    @node_selector_terms.setter
    def node_selector_terms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermArgs']]]]):
        pulumi.set(self, "node_selector_terms", value)


@pulumi.input_type
class ClusterKubeDnsAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpressionArgs']]]] = None,
                 match_fields: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchFieldArgs']]]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpressionArgs']]]]:
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpressionArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchFieldArgs']]]]:
        return pulumi.get(self, "match_fields")

    @match_fields.setter
    def match_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchFieldArgs']]]]):
        pulumi.set(self, "match_fields", value)


@pulumi.input_type
class ClusterKubeDnsAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpressionArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ClusterKubeDnsAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchFieldArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ClusterKubeDnsAffinityPodAffinityArgs:
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_executions: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]] = None,
                 required_during_scheduling_ignored_during_executions: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]]] = None):
        if preferred_during_scheduling_ignored_during_executions is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_executions", preferred_during_scheduling_ignored_during_executions)
        if required_during_scheduling_ignored_during_executions is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_executions", required_during_scheduling_ignored_during_executions)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecutions")
    def preferred_during_scheduling_ignored_during_executions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]]:
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_executions")

    @preferred_during_scheduling_ignored_during_executions.setter
    def preferred_during_scheduling_ignored_during_executions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]]):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_executions", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecutions")
    def required_during_scheduling_ignored_during_executions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]]]:
        return pulumi.get(self, "required_during_scheduling_ignored_during_executions")

    @required_during_scheduling_ignored_during_executions.setter
    def required_during_scheduling_ignored_during_executions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]]]):
        pulumi.set(self, "required_during_scheduling_ignored_during_executions", value)


@pulumi.input_type
class ClusterKubeDnsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(__self__, *,
                 pod_affinity_term: Optional[pulumi.Input['ClusterKubeDnsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs']] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        if pod_affinity_term is not None:
            pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(self) -> Optional[pulumi.Input['ClusterKubeDnsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs']]:
        return pulumi.get(self, "pod_affinity_term")

    @pod_affinity_term.setter
    def pod_affinity_term(self, value: Optional[pulumi.Input['ClusterKubeDnsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs']]):
        pulumi.set(self, "pod_affinity_term", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class ClusterKubeDnsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs:
    def __init__(__self__, *,
                 label_selector: Optional[pulumi.Input['ClusterKubeDnsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']] = None,
                 namespace_selector: Optional[pulumi.Input['ClusterKubeDnsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs']] = None,
                 namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 topology_key: Optional[pulumi.Input[str]] = None):
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional[pulumi.Input['ClusterKubeDnsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(self, value: Optional[pulumi.Input['ClusterKubeDnsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']]):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(self) -> Optional[pulumi.Input['ClusterKubeDnsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs']]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(self, value: Optional[pulumi.Input['ClusterKubeDnsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs']]):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


@pulumi.input_type
class ClusterKubeDnsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionArgs']]]]:
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class ClusterKubeDnsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ClusterKubeDnsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionArgs']]]]:
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class ClusterKubeDnsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ClusterKubeDnsAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(__self__, *,
                 label_selector: Optional[pulumi.Input['ClusterKubeDnsAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']] = None,
                 namespace_selector: Optional[pulumi.Input['ClusterKubeDnsAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs']] = None,
                 namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 topology_key: Optional[pulumi.Input[str]] = None):
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional[pulumi.Input['ClusterKubeDnsAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(self, value: Optional[pulumi.Input['ClusterKubeDnsAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']]):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(self) -> Optional[pulumi.Input['ClusterKubeDnsAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs']]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(self, value: Optional[pulumi.Input['ClusterKubeDnsAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs']]):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


@pulumi.input_type
class ClusterKubeDnsAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionArgs']]]]:
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class ClusterKubeDnsAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ClusterKubeDnsAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionArgs']]]]:
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class ClusterKubeDnsAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ClusterKubeDnsAffinityPodAntiAffinityArgs:
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_executions: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]] = None,
                 required_during_scheduling_ignored_during_executions: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]]] = None):
        if preferred_during_scheduling_ignored_during_executions is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_executions", preferred_during_scheduling_ignored_during_executions)
        if required_during_scheduling_ignored_during_executions is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_executions", required_during_scheduling_ignored_during_executions)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecutions")
    def preferred_during_scheduling_ignored_during_executions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]]:
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_executions")

    @preferred_during_scheduling_ignored_during_executions.setter
    def preferred_during_scheduling_ignored_during_executions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]]):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_executions", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecutions")
    def required_during_scheduling_ignored_during_executions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]]]:
        return pulumi.get(self, "required_during_scheduling_ignored_during_executions")

    @required_during_scheduling_ignored_during_executions.setter
    def required_during_scheduling_ignored_during_executions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]]]):
        pulumi.set(self, "required_during_scheduling_ignored_during_executions", value)


@pulumi.input_type
class ClusterKubeDnsAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(__self__, *,
                 pod_affinity_term: Optional[pulumi.Input['ClusterKubeDnsAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs']] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        if pod_affinity_term is not None:
            pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(self) -> Optional[pulumi.Input['ClusterKubeDnsAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs']]:
        return pulumi.get(self, "pod_affinity_term")

    @pod_affinity_term.setter
    def pod_affinity_term(self, value: Optional[pulumi.Input['ClusterKubeDnsAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs']]):
        pulumi.set(self, "pod_affinity_term", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class ClusterKubeDnsAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs:
    def __init__(__self__, *,
                 label_selector: Optional[pulumi.Input['ClusterKubeDnsAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']] = None,
                 namespace_selector: Optional[pulumi.Input['ClusterKubeDnsAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs']] = None,
                 namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 topology_key: Optional[pulumi.Input[str]] = None):
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional[pulumi.Input['ClusterKubeDnsAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(self, value: Optional[pulumi.Input['ClusterKubeDnsAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']]):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(self) -> Optional[pulumi.Input['ClusterKubeDnsAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs']]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(self, value: Optional[pulumi.Input['ClusterKubeDnsAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs']]):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


@pulumi.input_type
class ClusterKubeDnsAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionArgs']]]]:
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class ClusterKubeDnsAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ClusterKubeDnsAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionArgs']]]]:
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class ClusterKubeDnsAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ClusterKubeDnsAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(__self__, *,
                 label_selector: Optional[pulumi.Input['ClusterKubeDnsAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']] = None,
                 namespace_selector: Optional[pulumi.Input['ClusterKubeDnsAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs']] = None,
                 namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 topology_key: Optional[pulumi.Input[str]] = None):
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional[pulumi.Input['ClusterKubeDnsAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(self, value: Optional[pulumi.Input['ClusterKubeDnsAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']]):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(self) -> Optional[pulumi.Input['ClusterKubeDnsAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs']]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(self, value: Optional[pulumi.Input['ClusterKubeDnsAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs']]):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


@pulumi.input_type
class ClusterKubeDnsAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionArgs']]]]:
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class ClusterKubeDnsAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ClusterKubeDnsAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionArgs']]]]:
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKubeDnsAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class ClusterKubeDnsAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ClusterKubeDnsNodeLocalDnsArgs:
    def __init__(__self__, *,
                 cpu_request: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 forward_to_kube_dns: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 local_ip: Optional[pulumi.Input[str]] = None,
                 memory_request: Optional[pulumi.Input[str]] = None,
                 pod_annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if cpu_request is not None:
            pulumi.set(__self__, "cpu_request", cpu_request)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if forward_to_kube_dns is not None:
            pulumi.set(__self__, "forward_to_kube_dns", forward_to_kube_dns)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if local_ip is not None:
            pulumi.set(__self__, "local_ip", local_ip)
        if memory_request is not None:
            pulumi.set(__self__, "memory_request", memory_request)
        if pod_annotations is not None:
            pulumi.set(__self__, "pod_annotations", pod_annotations)

    @property
    @pulumi.getter(name="cpuRequest")
    def cpu_request(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpu_request")

    @cpu_request.setter
    def cpu_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_request", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="forwardToKubeDns")
    def forward_to_kube_dns(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "forward_to_kube_dns")

    @forward_to_kube_dns.setter
    def forward_to_kube_dns(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "forward_to_kube_dns", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="localIp")
    def local_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_ip")

    @local_ip.setter
    def local_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_ip", value)

    @property
    @pulumi.getter(name="memoryRequest")
    def memory_request(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "memory_request")

    @memory_request.setter
    def memory_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory_request", value)

    @property
    @pulumi.getter(name="podAnnotations")
    def pod_annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "pod_annotations")

    @pod_annotations.setter
    def pod_annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "pod_annotations", value)


@pulumi.input_type
class ClusterKubeDnsStubDomainArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ClusterKubeDnsTolerationArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 toleration_seconds: Optional[pulumi.Input[int]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "toleration_seconds")

    @toleration_seconds.setter
    def toleration_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "toleration_seconds", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ClusterKubeProxyArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 bind_address: Optional[pulumi.Input[str]] = None,
                 cluster_cidr: Optional[pulumi.Input[str]] = None,
                 conntrack_max_per_core: Optional[pulumi.Input[int]] = None,
                 conntrack_min: Optional[pulumi.Input[int]] = None,
                 cpu_limit: Optional[pulumi.Input[str]] = None,
                 cpu_request: Optional[pulumi.Input[str]] = None,
                 feature_gates: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 hostname_override: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 ip_vs_exclude_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ip_vs_min_sync_period: Optional[pulumi.Input[str]] = None,
                 ip_vs_scheduler: Optional[pulumi.Input[str]] = None,
                 ip_vs_sync_period: Optional[pulumi.Input[str]] = None,
                 log_level: Optional[pulumi.Input[int]] = None,
                 master: Optional[pulumi.Input[str]] = None,
                 memory_limit: Optional[pulumi.Input[str]] = None,
                 memory_request: Optional[pulumi.Input[str]] = None,
                 metrics_bind_address: Optional[pulumi.Input[str]] = None,
                 proxy_mode: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "enabled", enabled)
        if bind_address is not None:
            pulumi.set(__self__, "bind_address", bind_address)
        if cluster_cidr is not None:
            pulumi.set(__self__, "cluster_cidr", cluster_cidr)
        if conntrack_max_per_core is not None:
            pulumi.set(__self__, "conntrack_max_per_core", conntrack_max_per_core)
        if conntrack_min is not None:
            pulumi.set(__self__, "conntrack_min", conntrack_min)
        if cpu_limit is not None:
            pulumi.set(__self__, "cpu_limit", cpu_limit)
        if cpu_request is not None:
            pulumi.set(__self__, "cpu_request", cpu_request)
        if feature_gates is not None:
            pulumi.set(__self__, "feature_gates", feature_gates)
        if hostname_override is not None:
            pulumi.set(__self__, "hostname_override", hostname_override)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if ip_vs_exclude_cidrs is not None:
            pulumi.set(__self__, "ip_vs_exclude_cidrs", ip_vs_exclude_cidrs)
        if ip_vs_min_sync_period is not None:
            pulumi.set(__self__, "ip_vs_min_sync_period", ip_vs_min_sync_period)
        if ip_vs_scheduler is not None:
            pulumi.set(__self__, "ip_vs_scheduler", ip_vs_scheduler)
        if ip_vs_sync_period is not None:
            pulumi.set(__self__, "ip_vs_sync_period", ip_vs_sync_period)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)
        if master is not None:
            pulumi.set(__self__, "master", master)
        if memory_limit is not None:
            pulumi.set(__self__, "memory_limit", memory_limit)
        if memory_request is not None:
            pulumi.set(__self__, "memory_request", memory_request)
        if metrics_bind_address is not None:
            pulumi.set(__self__, "metrics_bind_address", metrics_bind_address)
        if proxy_mode is not None:
            pulumi.set(__self__, "proxy_mode", proxy_mode)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="bindAddress")
    def bind_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bind_address")

    @bind_address.setter
    def bind_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_address", value)

    @property
    @pulumi.getter(name="clusterCidr")
    def cluster_cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_cidr")

    @cluster_cidr.setter
    def cluster_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_cidr", value)

    @property
    @pulumi.getter(name="conntrackMaxPerCore")
    def conntrack_max_per_core(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "conntrack_max_per_core")

    @conntrack_max_per_core.setter
    def conntrack_max_per_core(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "conntrack_max_per_core", value)

    @property
    @pulumi.getter(name="conntrackMin")
    def conntrack_min(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "conntrack_min")

    @conntrack_min.setter
    def conntrack_min(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "conntrack_min", value)

    @property
    @pulumi.getter(name="cpuLimit")
    def cpu_limit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpu_limit")

    @cpu_limit.setter
    def cpu_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_limit", value)

    @property
    @pulumi.getter(name="cpuRequest")
    def cpu_request(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpu_request")

    @cpu_request.setter
    def cpu_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_request", value)

    @property
    @pulumi.getter(name="featureGates")
    def feature_gates(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "feature_gates")

    @feature_gates.setter
    def feature_gates(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "feature_gates", value)

    @property
    @pulumi.getter(name="hostnameOverride")
    def hostname_override(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hostname_override")

    @hostname_override.setter
    def hostname_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname_override", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="ipVsExcludeCidrs")
    def ip_vs_exclude_cidrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ip_vs_exclude_cidrs")

    @ip_vs_exclude_cidrs.setter
    def ip_vs_exclude_cidrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_vs_exclude_cidrs", value)

    @property
    @pulumi.getter(name="ipVsMinSyncPeriod")
    def ip_vs_min_sync_period(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_vs_min_sync_period")

    @ip_vs_min_sync_period.setter
    def ip_vs_min_sync_period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_vs_min_sync_period", value)

    @property
    @pulumi.getter(name="ipVsScheduler")
    def ip_vs_scheduler(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_vs_scheduler")

    @ip_vs_scheduler.setter
    def ip_vs_scheduler(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_vs_scheduler", value)

    @property
    @pulumi.getter(name="ipVsSyncPeriod")
    def ip_vs_sync_period(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_vs_sync_period")

    @ip_vs_sync_period.setter
    def ip_vs_sync_period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_vs_sync_period", value)

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "log_level")

    @log_level.setter
    def log_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "log_level", value)

    @property
    @pulumi.getter
    def master(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "master")

    @master.setter
    def master(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "master", value)

    @property
    @pulumi.getter(name="memoryLimit")
    def memory_limit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "memory_limit")

    @memory_limit.setter
    def memory_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory_limit", value)

    @property
    @pulumi.getter(name="memoryRequest")
    def memory_request(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "memory_request")

    @memory_request.setter
    def memory_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory_request", value)

    @property
    @pulumi.getter(name="metricsBindAddress")
    def metrics_bind_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "metrics_bind_address")

    @metrics_bind_address.setter
    def metrics_bind_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metrics_bind_address", value)

    @property
    @pulumi.getter(name="proxyMode")
    def proxy_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy_mode")

    @proxy_mode.setter
    def proxy_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_mode", value)


@pulumi.input_type
class ClusterKubeSchedulerArgs:
    def __init__(__self__, *,
                 authentication_kubeconfig: Optional[pulumi.Input[str]] = None,
                 authorization_always_allow_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 authorization_kubeconfig: Optional[pulumi.Input[str]] = None,
                 burst: Optional[pulumi.Input[int]] = None,
                 enable_profiling: Optional[pulumi.Input[bool]] = None,
                 feature_gates: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 leader_election: Optional[pulumi.Input['ClusterKubeSchedulerLeaderElectionArgs']] = None,
                 log_format: Optional[pulumi.Input[str]] = None,
                 log_level: Optional[pulumi.Input[int]] = None,
                 master: Optional[pulumi.Input[str]] = None,
                 max_persistent_volumes: Optional[pulumi.Input[int]] = None,
                 qps: Optional[pulumi.Input[str]] = None,
                 tls_cert_file: Optional[pulumi.Input[str]] = None,
                 tls_private_key_file: Optional[pulumi.Input[str]] = None,
                 use_policy_config_map: Optional[pulumi.Input[bool]] = None):
        if authentication_kubeconfig is not None:
            pulumi.set(__self__, "authentication_kubeconfig", authentication_kubeconfig)
        if authorization_always_allow_paths is not None:
            pulumi.set(__self__, "authorization_always_allow_paths", authorization_always_allow_paths)
        if authorization_kubeconfig is not None:
            pulumi.set(__self__, "authorization_kubeconfig", authorization_kubeconfig)
        if burst is not None:
            pulumi.set(__self__, "burst", burst)
        if enable_profiling is not None:
            pulumi.set(__self__, "enable_profiling", enable_profiling)
        if feature_gates is not None:
            pulumi.set(__self__, "feature_gates", feature_gates)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if leader_election is not None:
            pulumi.set(__self__, "leader_election", leader_election)
        if log_format is not None:
            pulumi.set(__self__, "log_format", log_format)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)
        if master is not None:
            pulumi.set(__self__, "master", master)
        if max_persistent_volumes is not None:
            pulumi.set(__self__, "max_persistent_volumes", max_persistent_volumes)
        if qps is not None:
            pulumi.set(__self__, "qps", qps)
        if tls_cert_file is not None:
            pulumi.set(__self__, "tls_cert_file", tls_cert_file)
        if tls_private_key_file is not None:
            pulumi.set(__self__, "tls_private_key_file", tls_private_key_file)
        if use_policy_config_map is not None:
            pulumi.set(__self__, "use_policy_config_map", use_policy_config_map)

    @property
    @pulumi.getter(name="authenticationKubeconfig")
    def authentication_kubeconfig(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authentication_kubeconfig")

    @authentication_kubeconfig.setter
    def authentication_kubeconfig(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_kubeconfig", value)

    @property
    @pulumi.getter(name="authorizationAlwaysAllowPaths")
    def authorization_always_allow_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "authorization_always_allow_paths")

    @authorization_always_allow_paths.setter
    def authorization_always_allow_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "authorization_always_allow_paths", value)

    @property
    @pulumi.getter(name="authorizationKubeconfig")
    def authorization_kubeconfig(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authorization_kubeconfig")

    @authorization_kubeconfig.setter
    def authorization_kubeconfig(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorization_kubeconfig", value)

    @property
    @pulumi.getter
    def burst(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "burst")

    @burst.setter
    def burst(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "burst", value)

    @property
    @pulumi.getter(name="enableProfiling")
    def enable_profiling(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_profiling")

    @enable_profiling.setter
    def enable_profiling(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_profiling", value)

    @property
    @pulumi.getter(name="featureGates")
    def feature_gates(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "feature_gates")

    @feature_gates.setter
    def feature_gates(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "feature_gates", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="leaderElection")
    def leader_election(self) -> Optional[pulumi.Input['ClusterKubeSchedulerLeaderElectionArgs']]:
        return pulumi.get(self, "leader_election")

    @leader_election.setter
    def leader_election(self, value: Optional[pulumi.Input['ClusterKubeSchedulerLeaderElectionArgs']]):
        pulumi.set(self, "leader_election", value)

    @property
    @pulumi.getter(name="logFormat")
    def log_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_format")

    @log_format.setter
    def log_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_format", value)

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "log_level")

    @log_level.setter
    def log_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "log_level", value)

    @property
    @pulumi.getter
    def master(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "master")

    @master.setter
    def master(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "master", value)

    @property
    @pulumi.getter(name="maxPersistentVolumes")
    def max_persistent_volumes(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_persistent_volumes")

    @max_persistent_volumes.setter
    def max_persistent_volumes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_persistent_volumes", value)

    @property
    @pulumi.getter
    def qps(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "qps")

    @qps.setter
    def qps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "qps", value)

    @property
    @pulumi.getter(name="tlsCertFile")
    def tls_cert_file(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tls_cert_file")

    @tls_cert_file.setter
    def tls_cert_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_cert_file", value)

    @property
    @pulumi.getter(name="tlsPrivateKeyFile")
    def tls_private_key_file(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tls_private_key_file")

    @tls_private_key_file.setter
    def tls_private_key_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_private_key_file", value)

    @property
    @pulumi.getter(name="usePolicyConfigMap")
    def use_policy_config_map(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_policy_config_map")

    @use_policy_config_map.setter
    def use_policy_config_map(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_policy_config_map", value)


@pulumi.input_type
class ClusterKubeSchedulerLeaderElectionArgs:
    def __init__(__self__, *,
                 leader_elect: Optional[pulumi.Input[bool]] = None,
                 leader_elect_lease_duration: Optional[pulumi.Input[str]] = None,
                 leader_elect_renew_deadline_duration: Optional[pulumi.Input[str]] = None,
                 leader_elect_resource_lock: Optional[pulumi.Input[str]] = None,
                 leader_elect_resource_name: Optional[pulumi.Input[str]] = None,
                 leader_elect_resource_namespace: Optional[pulumi.Input[str]] = None,
                 leader_elect_retry_period: Optional[pulumi.Input[str]] = None):
        if leader_elect is not None:
            pulumi.set(__self__, "leader_elect", leader_elect)
        if leader_elect_lease_duration is not None:
            pulumi.set(__self__, "leader_elect_lease_duration", leader_elect_lease_duration)
        if leader_elect_renew_deadline_duration is not None:
            pulumi.set(__self__, "leader_elect_renew_deadline_duration", leader_elect_renew_deadline_duration)
        if leader_elect_resource_lock is not None:
            pulumi.set(__self__, "leader_elect_resource_lock", leader_elect_resource_lock)
        if leader_elect_resource_name is not None:
            pulumi.set(__self__, "leader_elect_resource_name", leader_elect_resource_name)
        if leader_elect_resource_namespace is not None:
            pulumi.set(__self__, "leader_elect_resource_namespace", leader_elect_resource_namespace)
        if leader_elect_retry_period is not None:
            pulumi.set(__self__, "leader_elect_retry_period", leader_elect_retry_period)

    @property
    @pulumi.getter(name="leaderElect")
    def leader_elect(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "leader_elect")

    @leader_elect.setter
    def leader_elect(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "leader_elect", value)

    @property
    @pulumi.getter(name="leaderElectLeaseDuration")
    def leader_elect_lease_duration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "leader_elect_lease_duration")

    @leader_elect_lease_duration.setter
    def leader_elect_lease_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "leader_elect_lease_duration", value)

    @property
    @pulumi.getter(name="leaderElectRenewDeadlineDuration")
    def leader_elect_renew_deadline_duration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "leader_elect_renew_deadline_duration")

    @leader_elect_renew_deadline_duration.setter
    def leader_elect_renew_deadline_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "leader_elect_renew_deadline_duration", value)

    @property
    @pulumi.getter(name="leaderElectResourceLock")
    def leader_elect_resource_lock(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "leader_elect_resource_lock")

    @leader_elect_resource_lock.setter
    def leader_elect_resource_lock(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "leader_elect_resource_lock", value)

    @property
    @pulumi.getter(name="leaderElectResourceName")
    def leader_elect_resource_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "leader_elect_resource_name")

    @leader_elect_resource_name.setter
    def leader_elect_resource_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "leader_elect_resource_name", value)

    @property
    @pulumi.getter(name="leaderElectResourceNamespace")
    def leader_elect_resource_namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "leader_elect_resource_namespace")

    @leader_elect_resource_namespace.setter
    def leader_elect_resource_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "leader_elect_resource_namespace", value)

    @property
    @pulumi.getter(name="leaderElectRetryPeriod")
    def leader_elect_retry_period(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "leader_elect_retry_period")

    @leader_elect_retry_period.setter
    def leader_elect_retry_period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "leader_elect_retry_period", value)


@pulumi.input_type
class ClusterKubeletArgs:
    def __init__(__self__, *,
                 allow_privileged: Optional[pulumi.Input[bool]] = None,
                 allowed_unsafe_sysctls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 anonymous_auth: Optional[pulumi.Input['ClusterKubeletAnonymousAuthArgs']] = None,
                 api_servers: Optional[pulumi.Input[str]] = None,
                 authentication_token_webhook: Optional[pulumi.Input[bool]] = None,
                 authentication_token_webhook_cache_ttl: Optional[pulumi.Input[str]] = None,
                 authorization_mode: Optional[pulumi.Input[str]] = None,
                 babysit_daemons: Optional[pulumi.Input[bool]] = None,
                 bootstrap_kubeconfig: Optional[pulumi.Input[str]] = None,
                 cgroup_driver: Optional[pulumi.Input[str]] = None,
                 cgroup_root: Optional[pulumi.Input[str]] = None,
                 client_ca_file: Optional[pulumi.Input[str]] = None,
                 cloud_provider: Optional[pulumi.Input[str]] = None,
                 cluster_dns: Optional[pulumi.Input[str]] = None,
                 cluster_domain: Optional[pulumi.Input[str]] = None,
                 configure_cbr0: Optional[pulumi.Input[bool]] = None,
                 container_log_max_files: Optional[pulumi.Input[int]] = None,
                 container_log_max_size: Optional[pulumi.Input[str]] = None,
                 cpu_cfs_quota: Optional[pulumi.Input['ClusterKubeletCpuCfsQuotaArgs']] = None,
                 cpu_cfs_quota_period: Optional[pulumi.Input[str]] = None,
                 cpu_manager_policy: Optional[pulumi.Input[str]] = None,
                 docker_disable_shared_pid: Optional[pulumi.Input[bool]] = None,
                 enable_cadvisor_json_endpoints: Optional[pulumi.Input[bool]] = None,
                 enable_custom_metrics: Optional[pulumi.Input[bool]] = None,
                 enable_debugging_handlers: Optional[pulumi.Input[bool]] = None,
                 enforce_node_allocatable: Optional[pulumi.Input[str]] = None,
                 event_burst: Optional[pulumi.Input[int]] = None,
                 event_qps: Optional[pulumi.Input[int]] = None,
                 eviction_hard: Optional[pulumi.Input[str]] = None,
                 eviction_max_pod_grace_period: Optional[pulumi.Input[int]] = None,
                 eviction_minimum_reclaim: Optional[pulumi.Input[str]] = None,
                 eviction_pressure_transition_period: Optional[pulumi.Input[str]] = None,
                 eviction_soft: Optional[pulumi.Input[str]] = None,
                 eviction_soft_grace_period: Optional[pulumi.Input[str]] = None,
                 experimental_allowed_unsafe_sysctls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 fail_swap_on: Optional[pulumi.Input[bool]] = None,
                 feature_gates: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 hairpin_mode: Optional[pulumi.Input[str]] = None,
                 hostname_override: Optional[pulumi.Input[str]] = None,
                 housekeeping_interval: Optional[pulumi.Input[str]] = None,
                 image_gc_high_threshold_percent: Optional[pulumi.Input[int]] = None,
                 image_gc_low_threshold_percent: Optional[pulumi.Input[int]] = None,
                 image_pull_progress_deadline: Optional[pulumi.Input[str]] = None,
                 kernel_memcg_notification: Optional[pulumi.Input[bool]] = None,
                 kube_reserved: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 kube_reserved_cgroup: Optional[pulumi.Input[str]] = None,
                 kubeconfig_path: Optional[pulumi.Input[str]] = None,
                 kubelet_cgroups: Optional[pulumi.Input[str]] = None,
                 log_format: Optional[pulumi.Input[str]] = None,
                 log_level: Optional[pulumi.Input[int]] = None,
                 max_pods: Optional[pulumi.Input[int]] = None,
                 network_plugin_mtu: Optional[pulumi.Input[int]] = None,
                 network_plugin_name: Optional[pulumi.Input[str]] = None,
                 node_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 node_status_update_frequency: Optional[pulumi.Input[str]] = None,
                 non_masquerade_cidr: Optional[pulumi.Input[str]] = None,
                 nvidia_gp_us: Optional[pulumi.Input[int]] = None,
                 pod_cidr: Optional[pulumi.Input[str]] = None,
                 pod_infra_container_image: Optional[pulumi.Input[str]] = None,
                 pod_manifest_path: Optional[pulumi.Input[str]] = None,
                 pod_pids_limit: Optional[pulumi.Input[int]] = None,
                 protect_kernel_defaults: Optional[pulumi.Input[bool]] = None,
                 read_only_port: Optional[pulumi.Input[int]] = None,
                 reconcile_cidr: Optional[pulumi.Input[bool]] = None,
                 register_node: Optional[pulumi.Input[bool]] = None,
                 register_schedulable: Optional[pulumi.Input[bool]] = None,
                 registry_burst: Optional[pulumi.Input[int]] = None,
                 registry_pull_qps: Optional[pulumi.Input[int]] = None,
                 require_kubeconfig: Optional[pulumi.Input[bool]] = None,
                 resolver_config: Optional[pulumi.Input[str]] = None,
                 root_dir: Optional[pulumi.Input[str]] = None,
                 rotate_certificates: Optional[pulumi.Input[bool]] = None,
                 runtime_cgroups: Optional[pulumi.Input[str]] = None,
                 runtime_request_timeout: Optional[pulumi.Input[str]] = None,
                 seccomp_profile_root: Optional[pulumi.Input[str]] = None,
                 serialize_image_pulls: Optional[pulumi.Input[bool]] = None,
                 shutdown_grace_period: Optional[pulumi.Input[str]] = None,
                 shutdown_grace_period_critical_pods: Optional[pulumi.Input[str]] = None,
                 streaming_connection_idle_timeout: Optional[pulumi.Input[str]] = None,
                 system_cgroups: Optional[pulumi.Input[str]] = None,
                 system_reserved: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 system_reserved_cgroup: Optional[pulumi.Input[str]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tls_cert_file: Optional[pulumi.Input[str]] = None,
                 tls_cipher_suites: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tls_min_version: Optional[pulumi.Input[str]] = None,
                 tls_private_key_file: Optional[pulumi.Input[str]] = None,
                 topology_manager_policy: Optional[pulumi.Input[str]] = None,
                 volume_plugin_directory: Optional[pulumi.Input[str]] = None,
                 volume_stats_agg_period: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cloud_provider: - cloud_provider_spec - CloudProvider configures the cloud provider to use.
        :param pulumi.Input[str] non_masquerade_cidr: - (Computed) - String - NonMasqueradeCIDR is the CIDR for the internal k8s network (on which pods & services live)<br />It cannot overlap ServiceClusterIPRange.
        :param pulumi.Input[str] pod_cidr: - String - PodCIDR is the CIDR from which we allocate IPs for pods.
        """
        if allow_privileged is not None:
            pulumi.set(__self__, "allow_privileged", allow_privileged)
        if allowed_unsafe_sysctls is not None:
            pulumi.set(__self__, "allowed_unsafe_sysctls", allowed_unsafe_sysctls)
        if anonymous_auth is not None:
            pulumi.set(__self__, "anonymous_auth", anonymous_auth)
        if api_servers is not None:
            pulumi.set(__self__, "api_servers", api_servers)
        if authentication_token_webhook is not None:
            pulumi.set(__self__, "authentication_token_webhook", authentication_token_webhook)
        if authentication_token_webhook_cache_ttl is not None:
            pulumi.set(__self__, "authentication_token_webhook_cache_ttl", authentication_token_webhook_cache_ttl)
        if authorization_mode is not None:
            pulumi.set(__self__, "authorization_mode", authorization_mode)
        if babysit_daemons is not None:
            pulumi.set(__self__, "babysit_daemons", babysit_daemons)
        if bootstrap_kubeconfig is not None:
            pulumi.set(__self__, "bootstrap_kubeconfig", bootstrap_kubeconfig)
        if cgroup_driver is not None:
            pulumi.set(__self__, "cgroup_driver", cgroup_driver)
        if cgroup_root is not None:
            pulumi.set(__self__, "cgroup_root", cgroup_root)
        if client_ca_file is not None:
            pulumi.set(__self__, "client_ca_file", client_ca_file)
        if cloud_provider is not None:
            pulumi.set(__self__, "cloud_provider", cloud_provider)
        if cluster_dns is not None:
            pulumi.set(__self__, "cluster_dns", cluster_dns)
        if cluster_domain is not None:
            pulumi.set(__self__, "cluster_domain", cluster_domain)
        if configure_cbr0 is not None:
            pulumi.set(__self__, "configure_cbr0", configure_cbr0)
        if container_log_max_files is not None:
            pulumi.set(__self__, "container_log_max_files", container_log_max_files)
        if container_log_max_size is not None:
            pulumi.set(__self__, "container_log_max_size", container_log_max_size)
        if cpu_cfs_quota is not None:
            pulumi.set(__self__, "cpu_cfs_quota", cpu_cfs_quota)
        if cpu_cfs_quota_period is not None:
            pulumi.set(__self__, "cpu_cfs_quota_period", cpu_cfs_quota_period)
        if cpu_manager_policy is not None:
            pulumi.set(__self__, "cpu_manager_policy", cpu_manager_policy)
        if docker_disable_shared_pid is not None:
            pulumi.set(__self__, "docker_disable_shared_pid", docker_disable_shared_pid)
        if enable_cadvisor_json_endpoints is not None:
            pulumi.set(__self__, "enable_cadvisor_json_endpoints", enable_cadvisor_json_endpoints)
        if enable_custom_metrics is not None:
            pulumi.set(__self__, "enable_custom_metrics", enable_custom_metrics)
        if enable_debugging_handlers is not None:
            pulumi.set(__self__, "enable_debugging_handlers", enable_debugging_handlers)
        if enforce_node_allocatable is not None:
            pulumi.set(__self__, "enforce_node_allocatable", enforce_node_allocatable)
        if event_burst is not None:
            pulumi.set(__self__, "event_burst", event_burst)
        if event_qps is not None:
            pulumi.set(__self__, "event_qps", event_qps)
        if eviction_hard is not None:
            pulumi.set(__self__, "eviction_hard", eviction_hard)
        if eviction_max_pod_grace_period is not None:
            pulumi.set(__self__, "eviction_max_pod_grace_period", eviction_max_pod_grace_period)
        if eviction_minimum_reclaim is not None:
            pulumi.set(__self__, "eviction_minimum_reclaim", eviction_minimum_reclaim)
        if eviction_pressure_transition_period is not None:
            pulumi.set(__self__, "eviction_pressure_transition_period", eviction_pressure_transition_period)
        if eviction_soft is not None:
            pulumi.set(__self__, "eviction_soft", eviction_soft)
        if eviction_soft_grace_period is not None:
            pulumi.set(__self__, "eviction_soft_grace_period", eviction_soft_grace_period)
        if experimental_allowed_unsafe_sysctls is not None:
            pulumi.set(__self__, "experimental_allowed_unsafe_sysctls", experimental_allowed_unsafe_sysctls)
        if fail_swap_on is not None:
            pulumi.set(__self__, "fail_swap_on", fail_swap_on)
        if feature_gates is not None:
            pulumi.set(__self__, "feature_gates", feature_gates)
        if hairpin_mode is not None:
            pulumi.set(__self__, "hairpin_mode", hairpin_mode)
        if hostname_override is not None:
            pulumi.set(__self__, "hostname_override", hostname_override)
        if housekeeping_interval is not None:
            pulumi.set(__self__, "housekeeping_interval", housekeeping_interval)
        if image_gc_high_threshold_percent is not None:
            pulumi.set(__self__, "image_gc_high_threshold_percent", image_gc_high_threshold_percent)
        if image_gc_low_threshold_percent is not None:
            pulumi.set(__self__, "image_gc_low_threshold_percent", image_gc_low_threshold_percent)
        if image_pull_progress_deadline is not None:
            pulumi.set(__self__, "image_pull_progress_deadline", image_pull_progress_deadline)
        if kernel_memcg_notification is not None:
            pulumi.set(__self__, "kernel_memcg_notification", kernel_memcg_notification)
        if kube_reserved is not None:
            pulumi.set(__self__, "kube_reserved", kube_reserved)
        if kube_reserved_cgroup is not None:
            pulumi.set(__self__, "kube_reserved_cgroup", kube_reserved_cgroup)
        if kubeconfig_path is not None:
            pulumi.set(__self__, "kubeconfig_path", kubeconfig_path)
        if kubelet_cgroups is not None:
            pulumi.set(__self__, "kubelet_cgroups", kubelet_cgroups)
        if log_format is not None:
            pulumi.set(__self__, "log_format", log_format)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)
        if max_pods is not None:
            pulumi.set(__self__, "max_pods", max_pods)
        if network_plugin_mtu is not None:
            pulumi.set(__self__, "network_plugin_mtu", network_plugin_mtu)
        if network_plugin_name is not None:
            pulumi.set(__self__, "network_plugin_name", network_plugin_name)
        if node_labels is not None:
            pulumi.set(__self__, "node_labels", node_labels)
        if node_status_update_frequency is not None:
            pulumi.set(__self__, "node_status_update_frequency", node_status_update_frequency)
        if non_masquerade_cidr is not None:
            pulumi.set(__self__, "non_masquerade_cidr", non_masquerade_cidr)
        if nvidia_gp_us is not None:
            pulumi.set(__self__, "nvidia_gp_us", nvidia_gp_us)
        if pod_cidr is not None:
            pulumi.set(__self__, "pod_cidr", pod_cidr)
        if pod_infra_container_image is not None:
            pulumi.set(__self__, "pod_infra_container_image", pod_infra_container_image)
        if pod_manifest_path is not None:
            pulumi.set(__self__, "pod_manifest_path", pod_manifest_path)
        if pod_pids_limit is not None:
            pulumi.set(__self__, "pod_pids_limit", pod_pids_limit)
        if protect_kernel_defaults is not None:
            pulumi.set(__self__, "protect_kernel_defaults", protect_kernel_defaults)
        if read_only_port is not None:
            pulumi.set(__self__, "read_only_port", read_only_port)
        if reconcile_cidr is not None:
            pulumi.set(__self__, "reconcile_cidr", reconcile_cidr)
        if register_node is not None:
            pulumi.set(__self__, "register_node", register_node)
        if register_schedulable is not None:
            pulumi.set(__self__, "register_schedulable", register_schedulable)
        if registry_burst is not None:
            pulumi.set(__self__, "registry_burst", registry_burst)
        if registry_pull_qps is not None:
            pulumi.set(__self__, "registry_pull_qps", registry_pull_qps)
        if require_kubeconfig is not None:
            pulumi.set(__self__, "require_kubeconfig", require_kubeconfig)
        if resolver_config is not None:
            pulumi.set(__self__, "resolver_config", resolver_config)
        if root_dir is not None:
            pulumi.set(__self__, "root_dir", root_dir)
        if rotate_certificates is not None:
            pulumi.set(__self__, "rotate_certificates", rotate_certificates)
        if runtime_cgroups is not None:
            pulumi.set(__self__, "runtime_cgroups", runtime_cgroups)
        if runtime_request_timeout is not None:
            pulumi.set(__self__, "runtime_request_timeout", runtime_request_timeout)
        if seccomp_profile_root is not None:
            pulumi.set(__self__, "seccomp_profile_root", seccomp_profile_root)
        if serialize_image_pulls is not None:
            pulumi.set(__self__, "serialize_image_pulls", serialize_image_pulls)
        if shutdown_grace_period is not None:
            pulumi.set(__self__, "shutdown_grace_period", shutdown_grace_period)
        if shutdown_grace_period_critical_pods is not None:
            pulumi.set(__self__, "shutdown_grace_period_critical_pods", shutdown_grace_period_critical_pods)
        if streaming_connection_idle_timeout is not None:
            pulumi.set(__self__, "streaming_connection_idle_timeout", streaming_connection_idle_timeout)
        if system_cgroups is not None:
            pulumi.set(__self__, "system_cgroups", system_cgroups)
        if system_reserved is not None:
            pulumi.set(__self__, "system_reserved", system_reserved)
        if system_reserved_cgroup is not None:
            pulumi.set(__self__, "system_reserved_cgroup", system_reserved_cgroup)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)
        if tls_cert_file is not None:
            pulumi.set(__self__, "tls_cert_file", tls_cert_file)
        if tls_cipher_suites is not None:
            pulumi.set(__self__, "tls_cipher_suites", tls_cipher_suites)
        if tls_min_version is not None:
            pulumi.set(__self__, "tls_min_version", tls_min_version)
        if tls_private_key_file is not None:
            pulumi.set(__self__, "tls_private_key_file", tls_private_key_file)
        if topology_manager_policy is not None:
            pulumi.set(__self__, "topology_manager_policy", topology_manager_policy)
        if volume_plugin_directory is not None:
            pulumi.set(__self__, "volume_plugin_directory", volume_plugin_directory)
        if volume_stats_agg_period is not None:
            pulumi.set(__self__, "volume_stats_agg_period", volume_stats_agg_period)

    @property
    @pulumi.getter(name="allowPrivileged")
    def allow_privileged(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_privileged")

    @allow_privileged.setter
    def allow_privileged(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_privileged", value)

    @property
    @pulumi.getter(name="allowedUnsafeSysctls")
    def allowed_unsafe_sysctls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "allowed_unsafe_sysctls")

    @allowed_unsafe_sysctls.setter
    def allowed_unsafe_sysctls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_unsafe_sysctls", value)

    @property
    @pulumi.getter(name="anonymousAuth")
    def anonymous_auth(self) -> Optional[pulumi.Input['ClusterKubeletAnonymousAuthArgs']]:
        return pulumi.get(self, "anonymous_auth")

    @anonymous_auth.setter
    def anonymous_auth(self, value: Optional[pulumi.Input['ClusterKubeletAnonymousAuthArgs']]):
        pulumi.set(self, "anonymous_auth", value)

    @property
    @pulumi.getter(name="apiServers")
    def api_servers(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "api_servers")

    @api_servers.setter
    def api_servers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_servers", value)

    @property
    @pulumi.getter(name="authenticationTokenWebhook")
    def authentication_token_webhook(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "authentication_token_webhook")

    @authentication_token_webhook.setter
    def authentication_token_webhook(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "authentication_token_webhook", value)

    @property
    @pulumi.getter(name="authenticationTokenWebhookCacheTtl")
    def authentication_token_webhook_cache_ttl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authentication_token_webhook_cache_ttl")

    @authentication_token_webhook_cache_ttl.setter
    def authentication_token_webhook_cache_ttl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_token_webhook_cache_ttl", value)

    @property
    @pulumi.getter(name="authorizationMode")
    def authorization_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authorization_mode")

    @authorization_mode.setter
    def authorization_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorization_mode", value)

    @property
    @pulumi.getter(name="babysitDaemons")
    def babysit_daemons(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "babysit_daemons")

    @babysit_daemons.setter
    def babysit_daemons(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "babysit_daemons", value)

    @property
    @pulumi.getter(name="bootstrapKubeconfig")
    def bootstrap_kubeconfig(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bootstrap_kubeconfig")

    @bootstrap_kubeconfig.setter
    def bootstrap_kubeconfig(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bootstrap_kubeconfig", value)

    @property
    @pulumi.getter(name="cgroupDriver")
    def cgroup_driver(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cgroup_driver")

    @cgroup_driver.setter
    def cgroup_driver(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cgroup_driver", value)

    @property
    @pulumi.getter(name="cgroupRoot")
    def cgroup_root(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cgroup_root")

    @cgroup_root.setter
    def cgroup_root(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cgroup_root", value)

    @property
    @pulumi.getter(name="clientCaFile")
    def client_ca_file(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_ca_file")

    @client_ca_file.setter
    def client_ca_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_ca_file", value)

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> Optional[pulumi.Input[str]]:
        """
        - cloud_provider_spec - CloudProvider configures the cloud provider to use.
        """
        return pulumi.get(self, "cloud_provider")

    @cloud_provider.setter
    def cloud_provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_provider", value)

    @property
    @pulumi.getter(name="clusterDns")
    def cluster_dns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_dns")

    @cluster_dns.setter
    def cluster_dns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_dns", value)

    @property
    @pulumi.getter(name="clusterDomain")
    def cluster_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_domain")

    @cluster_domain.setter
    def cluster_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_domain", value)

    @property
    @pulumi.getter(name="configureCbr0")
    def configure_cbr0(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "configure_cbr0")

    @configure_cbr0.setter
    def configure_cbr0(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "configure_cbr0", value)

    @property
    @pulumi.getter(name="containerLogMaxFiles")
    def container_log_max_files(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "container_log_max_files")

    @container_log_max_files.setter
    def container_log_max_files(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "container_log_max_files", value)

    @property
    @pulumi.getter(name="containerLogMaxSize")
    def container_log_max_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "container_log_max_size")

    @container_log_max_size.setter
    def container_log_max_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_log_max_size", value)

    @property
    @pulumi.getter(name="cpuCfsQuota")
    def cpu_cfs_quota(self) -> Optional[pulumi.Input['ClusterKubeletCpuCfsQuotaArgs']]:
        return pulumi.get(self, "cpu_cfs_quota")

    @cpu_cfs_quota.setter
    def cpu_cfs_quota(self, value: Optional[pulumi.Input['ClusterKubeletCpuCfsQuotaArgs']]):
        pulumi.set(self, "cpu_cfs_quota", value)

    @property
    @pulumi.getter(name="cpuCfsQuotaPeriod")
    def cpu_cfs_quota_period(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpu_cfs_quota_period")

    @cpu_cfs_quota_period.setter
    def cpu_cfs_quota_period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_cfs_quota_period", value)

    @property
    @pulumi.getter(name="cpuManagerPolicy")
    def cpu_manager_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpu_manager_policy")

    @cpu_manager_policy.setter
    def cpu_manager_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_manager_policy", value)

    @property
    @pulumi.getter(name="dockerDisableSharedPid")
    def docker_disable_shared_pid(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "docker_disable_shared_pid")

    @docker_disable_shared_pid.setter
    def docker_disable_shared_pid(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "docker_disable_shared_pid", value)

    @property
    @pulumi.getter(name="enableCadvisorJsonEndpoints")
    def enable_cadvisor_json_endpoints(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_cadvisor_json_endpoints")

    @enable_cadvisor_json_endpoints.setter
    def enable_cadvisor_json_endpoints(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_cadvisor_json_endpoints", value)

    @property
    @pulumi.getter(name="enableCustomMetrics")
    def enable_custom_metrics(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_custom_metrics")

    @enable_custom_metrics.setter
    def enable_custom_metrics(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_custom_metrics", value)

    @property
    @pulumi.getter(name="enableDebuggingHandlers")
    def enable_debugging_handlers(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_debugging_handlers")

    @enable_debugging_handlers.setter
    def enable_debugging_handlers(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_debugging_handlers", value)

    @property
    @pulumi.getter(name="enforceNodeAllocatable")
    def enforce_node_allocatable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enforce_node_allocatable")

    @enforce_node_allocatable.setter
    def enforce_node_allocatable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enforce_node_allocatable", value)

    @property
    @pulumi.getter(name="eventBurst")
    def event_burst(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "event_burst")

    @event_burst.setter
    def event_burst(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "event_burst", value)

    @property
    @pulumi.getter(name="eventQps")
    def event_qps(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "event_qps")

    @event_qps.setter
    def event_qps(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "event_qps", value)

    @property
    @pulumi.getter(name="evictionHard")
    def eviction_hard(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "eviction_hard")

    @eviction_hard.setter
    def eviction_hard(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eviction_hard", value)

    @property
    @pulumi.getter(name="evictionMaxPodGracePeriod")
    def eviction_max_pod_grace_period(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "eviction_max_pod_grace_period")

    @eviction_max_pod_grace_period.setter
    def eviction_max_pod_grace_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "eviction_max_pod_grace_period", value)

    @property
    @pulumi.getter(name="evictionMinimumReclaim")
    def eviction_minimum_reclaim(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "eviction_minimum_reclaim")

    @eviction_minimum_reclaim.setter
    def eviction_minimum_reclaim(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eviction_minimum_reclaim", value)

    @property
    @pulumi.getter(name="evictionPressureTransitionPeriod")
    def eviction_pressure_transition_period(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "eviction_pressure_transition_period")

    @eviction_pressure_transition_period.setter
    def eviction_pressure_transition_period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eviction_pressure_transition_period", value)

    @property
    @pulumi.getter(name="evictionSoft")
    def eviction_soft(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "eviction_soft")

    @eviction_soft.setter
    def eviction_soft(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eviction_soft", value)

    @property
    @pulumi.getter(name="evictionSoftGracePeriod")
    def eviction_soft_grace_period(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "eviction_soft_grace_period")

    @eviction_soft_grace_period.setter
    def eviction_soft_grace_period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eviction_soft_grace_period", value)

    @property
    @pulumi.getter(name="experimentalAllowedUnsafeSysctls")
    def experimental_allowed_unsafe_sysctls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "experimental_allowed_unsafe_sysctls")

    @experimental_allowed_unsafe_sysctls.setter
    def experimental_allowed_unsafe_sysctls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "experimental_allowed_unsafe_sysctls", value)

    @property
    @pulumi.getter(name="failSwapOn")
    def fail_swap_on(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "fail_swap_on")

    @fail_swap_on.setter
    def fail_swap_on(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fail_swap_on", value)

    @property
    @pulumi.getter(name="featureGates")
    def feature_gates(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "feature_gates")

    @feature_gates.setter
    def feature_gates(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "feature_gates", value)

    @property
    @pulumi.getter(name="hairpinMode")
    def hairpin_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hairpin_mode")

    @hairpin_mode.setter
    def hairpin_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hairpin_mode", value)

    @property
    @pulumi.getter(name="hostnameOverride")
    def hostname_override(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hostname_override")

    @hostname_override.setter
    def hostname_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname_override", value)

    @property
    @pulumi.getter(name="housekeepingInterval")
    def housekeeping_interval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "housekeeping_interval")

    @housekeeping_interval.setter
    def housekeeping_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "housekeeping_interval", value)

    @property
    @pulumi.getter(name="imageGcHighThresholdPercent")
    def image_gc_high_threshold_percent(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "image_gc_high_threshold_percent")

    @image_gc_high_threshold_percent.setter
    def image_gc_high_threshold_percent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "image_gc_high_threshold_percent", value)

    @property
    @pulumi.getter(name="imageGcLowThresholdPercent")
    def image_gc_low_threshold_percent(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "image_gc_low_threshold_percent")

    @image_gc_low_threshold_percent.setter
    def image_gc_low_threshold_percent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "image_gc_low_threshold_percent", value)

    @property
    @pulumi.getter(name="imagePullProgressDeadline")
    def image_pull_progress_deadline(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_pull_progress_deadline")

    @image_pull_progress_deadline.setter
    def image_pull_progress_deadline(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_pull_progress_deadline", value)

    @property
    @pulumi.getter(name="kernelMemcgNotification")
    def kernel_memcg_notification(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "kernel_memcg_notification")

    @kernel_memcg_notification.setter
    def kernel_memcg_notification(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "kernel_memcg_notification", value)

    @property
    @pulumi.getter(name="kubeReserved")
    def kube_reserved(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "kube_reserved")

    @kube_reserved.setter
    def kube_reserved(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "kube_reserved", value)

    @property
    @pulumi.getter(name="kubeReservedCgroup")
    def kube_reserved_cgroup(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kube_reserved_cgroup")

    @kube_reserved_cgroup.setter
    def kube_reserved_cgroup(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kube_reserved_cgroup", value)

    @property
    @pulumi.getter(name="kubeconfigPath")
    def kubeconfig_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kubeconfig_path")

    @kubeconfig_path.setter
    def kubeconfig_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubeconfig_path", value)

    @property
    @pulumi.getter(name="kubeletCgroups")
    def kubelet_cgroups(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kubelet_cgroups")

    @kubelet_cgroups.setter
    def kubelet_cgroups(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubelet_cgroups", value)

    @property
    @pulumi.getter(name="logFormat")
    def log_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_format")

    @log_format.setter
    def log_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_format", value)

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "log_level")

    @log_level.setter
    def log_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "log_level", value)

    @property
    @pulumi.getter(name="maxPods")
    def max_pods(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_pods")

    @max_pods.setter
    def max_pods(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_pods", value)

    @property
    @pulumi.getter(name="networkPluginMtu")
    def network_plugin_mtu(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "network_plugin_mtu")

    @network_plugin_mtu.setter
    def network_plugin_mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "network_plugin_mtu", value)

    @property
    @pulumi.getter(name="networkPluginName")
    def network_plugin_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "network_plugin_name")

    @network_plugin_name.setter
    def network_plugin_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_plugin_name", value)

    @property
    @pulumi.getter(name="nodeLabels")
    def node_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "node_labels")

    @node_labels.setter
    def node_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "node_labels", value)

    @property
    @pulumi.getter(name="nodeStatusUpdateFrequency")
    def node_status_update_frequency(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "node_status_update_frequency")

    @node_status_update_frequency.setter
    def node_status_update_frequency(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_status_update_frequency", value)

    @property
    @pulumi.getter(name="nonMasqueradeCidr")
    def non_masquerade_cidr(self) -> Optional[pulumi.Input[str]]:
        """
        - (Computed) - String - NonMasqueradeCIDR is the CIDR for the internal k8s network (on which pods & services live)<br />It cannot overlap ServiceClusterIPRange.
        """
        return pulumi.get(self, "non_masquerade_cidr")

    @non_masquerade_cidr.setter
    def non_masquerade_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "non_masquerade_cidr", value)

    @property
    @pulumi.getter(name="nvidiaGpUs")
    def nvidia_gp_us(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "nvidia_gp_us")

    @nvidia_gp_us.setter
    def nvidia_gp_us(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "nvidia_gp_us", value)

    @property
    @pulumi.getter(name="podCidr")
    def pod_cidr(self) -> Optional[pulumi.Input[str]]:
        """
        - String - PodCIDR is the CIDR from which we allocate IPs for pods.
        """
        return pulumi.get(self, "pod_cidr")

    @pod_cidr.setter
    def pod_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pod_cidr", value)

    @property
    @pulumi.getter(name="podInfraContainerImage")
    def pod_infra_container_image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pod_infra_container_image")

    @pod_infra_container_image.setter
    def pod_infra_container_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pod_infra_container_image", value)

    @property
    @pulumi.getter(name="podManifestPath")
    def pod_manifest_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pod_manifest_path")

    @pod_manifest_path.setter
    def pod_manifest_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pod_manifest_path", value)

    @property
    @pulumi.getter(name="podPidsLimit")
    def pod_pids_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "pod_pids_limit")

    @pod_pids_limit.setter
    def pod_pids_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pod_pids_limit", value)

    @property
    @pulumi.getter(name="protectKernelDefaults")
    def protect_kernel_defaults(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "protect_kernel_defaults")

    @protect_kernel_defaults.setter
    def protect_kernel_defaults(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "protect_kernel_defaults", value)

    @property
    @pulumi.getter(name="readOnlyPort")
    def read_only_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "read_only_port")

    @read_only_port.setter
    def read_only_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "read_only_port", value)

    @property
    @pulumi.getter(name="reconcileCidr")
    def reconcile_cidr(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "reconcile_cidr")

    @reconcile_cidr.setter
    def reconcile_cidr(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "reconcile_cidr", value)

    @property
    @pulumi.getter(name="registerNode")
    def register_node(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "register_node")

    @register_node.setter
    def register_node(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "register_node", value)

    @property
    @pulumi.getter(name="registerSchedulable")
    def register_schedulable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "register_schedulable")

    @register_schedulable.setter
    def register_schedulable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "register_schedulable", value)

    @property
    @pulumi.getter(name="registryBurst")
    def registry_burst(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "registry_burst")

    @registry_burst.setter
    def registry_burst(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "registry_burst", value)

    @property
    @pulumi.getter(name="registryPullQps")
    def registry_pull_qps(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "registry_pull_qps")

    @registry_pull_qps.setter
    def registry_pull_qps(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "registry_pull_qps", value)

    @property
    @pulumi.getter(name="requireKubeconfig")
    def require_kubeconfig(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "require_kubeconfig")

    @require_kubeconfig.setter
    def require_kubeconfig(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "require_kubeconfig", value)

    @property
    @pulumi.getter(name="resolverConfig")
    def resolver_config(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resolver_config")

    @resolver_config.setter
    def resolver_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resolver_config", value)

    @property
    @pulumi.getter(name="rootDir")
    def root_dir(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "root_dir")

    @root_dir.setter
    def root_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_dir", value)

    @property
    @pulumi.getter(name="rotateCertificates")
    def rotate_certificates(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "rotate_certificates")

    @rotate_certificates.setter
    def rotate_certificates(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "rotate_certificates", value)

    @property
    @pulumi.getter(name="runtimeCgroups")
    def runtime_cgroups(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "runtime_cgroups")

    @runtime_cgroups.setter
    def runtime_cgroups(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "runtime_cgroups", value)

    @property
    @pulumi.getter(name="runtimeRequestTimeout")
    def runtime_request_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "runtime_request_timeout")

    @runtime_request_timeout.setter
    def runtime_request_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "runtime_request_timeout", value)

    @property
    @pulumi.getter(name="seccompProfileRoot")
    def seccomp_profile_root(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "seccomp_profile_root")

    @seccomp_profile_root.setter
    def seccomp_profile_root(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "seccomp_profile_root", value)

    @property
    @pulumi.getter(name="serializeImagePulls")
    def serialize_image_pulls(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "serialize_image_pulls")

    @serialize_image_pulls.setter
    def serialize_image_pulls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "serialize_image_pulls", value)

    @property
    @pulumi.getter(name="shutdownGracePeriod")
    def shutdown_grace_period(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "shutdown_grace_period")

    @shutdown_grace_period.setter
    def shutdown_grace_period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shutdown_grace_period", value)

    @property
    @pulumi.getter(name="shutdownGracePeriodCriticalPods")
    def shutdown_grace_period_critical_pods(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "shutdown_grace_period_critical_pods")

    @shutdown_grace_period_critical_pods.setter
    def shutdown_grace_period_critical_pods(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shutdown_grace_period_critical_pods", value)

    @property
    @pulumi.getter(name="streamingConnectionIdleTimeout")
    def streaming_connection_idle_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "streaming_connection_idle_timeout")

    @streaming_connection_idle_timeout.setter
    def streaming_connection_idle_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "streaming_connection_idle_timeout", value)

    @property
    @pulumi.getter(name="systemCgroups")
    def system_cgroups(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "system_cgroups")

    @system_cgroups.setter
    def system_cgroups(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_cgroups", value)

    @property
    @pulumi.getter(name="systemReserved")
    def system_reserved(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "system_reserved")

    @system_reserved.setter
    def system_reserved(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "system_reserved", value)

    @property
    @pulumi.getter(name="systemReservedCgroup")
    def system_reserved_cgroup(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "system_reserved_cgroup")

    @system_reserved_cgroup.setter
    def system_reserved_cgroup(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_reserved_cgroup", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "taints", value)

    @property
    @pulumi.getter(name="tlsCertFile")
    def tls_cert_file(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tls_cert_file")

    @tls_cert_file.setter
    def tls_cert_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_cert_file", value)

    @property
    @pulumi.getter(name="tlsCipherSuites")
    def tls_cipher_suites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tls_cipher_suites")

    @tls_cipher_suites.setter
    def tls_cipher_suites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tls_cipher_suites", value)

    @property
    @pulumi.getter(name="tlsMinVersion")
    def tls_min_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tls_min_version")

    @tls_min_version.setter
    def tls_min_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_min_version", value)

    @property
    @pulumi.getter(name="tlsPrivateKeyFile")
    def tls_private_key_file(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tls_private_key_file")

    @tls_private_key_file.setter
    def tls_private_key_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_private_key_file", value)

    @property
    @pulumi.getter(name="topologyManagerPolicy")
    def topology_manager_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topology_manager_policy")

    @topology_manager_policy.setter
    def topology_manager_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_manager_policy", value)

    @property
    @pulumi.getter(name="volumePluginDirectory")
    def volume_plugin_directory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "volume_plugin_directory")

    @volume_plugin_directory.setter
    def volume_plugin_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_plugin_directory", value)

    @property
    @pulumi.getter(name="volumeStatsAggPeriod")
    def volume_stats_agg_period(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "volume_stats_agg_period")

    @volume_stats_agg_period.setter
    def volume_stats_agg_period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_stats_agg_period", value)


@pulumi.input_type
class ClusterKubeletAnonymousAuthArgs:
    def __init__(__self__, *,
                 value: Optional[pulumi.Input[bool]] = None):
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ClusterKubeletCpuCfsQuotaArgs:
    def __init__(__self__, *,
                 value: Optional[pulumi.Input[bool]] = None):
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ClusterMasterKubeletArgs:
    def __init__(__self__, *,
                 allow_privileged: Optional[pulumi.Input[bool]] = None,
                 allowed_unsafe_sysctls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 anonymous_auth: Optional[pulumi.Input['ClusterMasterKubeletAnonymousAuthArgs']] = None,
                 api_servers: Optional[pulumi.Input[str]] = None,
                 authentication_token_webhook: Optional[pulumi.Input[bool]] = None,
                 authentication_token_webhook_cache_ttl: Optional[pulumi.Input[str]] = None,
                 authorization_mode: Optional[pulumi.Input[str]] = None,
                 babysit_daemons: Optional[pulumi.Input[bool]] = None,
                 bootstrap_kubeconfig: Optional[pulumi.Input[str]] = None,
                 cgroup_driver: Optional[pulumi.Input[str]] = None,
                 cgroup_root: Optional[pulumi.Input[str]] = None,
                 client_ca_file: Optional[pulumi.Input[str]] = None,
                 cloud_provider: Optional[pulumi.Input[str]] = None,
                 cluster_dns: Optional[pulumi.Input[str]] = None,
                 cluster_domain: Optional[pulumi.Input[str]] = None,
                 configure_cbr0: Optional[pulumi.Input[bool]] = None,
                 container_log_max_files: Optional[pulumi.Input[int]] = None,
                 container_log_max_size: Optional[pulumi.Input[str]] = None,
                 cpu_cfs_quota: Optional[pulumi.Input['ClusterMasterKubeletCpuCfsQuotaArgs']] = None,
                 cpu_cfs_quota_period: Optional[pulumi.Input[str]] = None,
                 cpu_manager_policy: Optional[pulumi.Input[str]] = None,
                 docker_disable_shared_pid: Optional[pulumi.Input[bool]] = None,
                 enable_cadvisor_json_endpoints: Optional[pulumi.Input[bool]] = None,
                 enable_custom_metrics: Optional[pulumi.Input[bool]] = None,
                 enable_debugging_handlers: Optional[pulumi.Input[bool]] = None,
                 enforce_node_allocatable: Optional[pulumi.Input[str]] = None,
                 event_burst: Optional[pulumi.Input[int]] = None,
                 event_qps: Optional[pulumi.Input[int]] = None,
                 eviction_hard: Optional[pulumi.Input[str]] = None,
                 eviction_max_pod_grace_period: Optional[pulumi.Input[int]] = None,
                 eviction_minimum_reclaim: Optional[pulumi.Input[str]] = None,
                 eviction_pressure_transition_period: Optional[pulumi.Input[str]] = None,
                 eviction_soft: Optional[pulumi.Input[str]] = None,
                 eviction_soft_grace_period: Optional[pulumi.Input[str]] = None,
                 experimental_allowed_unsafe_sysctls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 fail_swap_on: Optional[pulumi.Input[bool]] = None,
                 feature_gates: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 hairpin_mode: Optional[pulumi.Input[str]] = None,
                 hostname_override: Optional[pulumi.Input[str]] = None,
                 housekeeping_interval: Optional[pulumi.Input[str]] = None,
                 image_gc_high_threshold_percent: Optional[pulumi.Input[int]] = None,
                 image_gc_low_threshold_percent: Optional[pulumi.Input[int]] = None,
                 image_pull_progress_deadline: Optional[pulumi.Input[str]] = None,
                 kernel_memcg_notification: Optional[pulumi.Input[bool]] = None,
                 kube_reserved: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 kube_reserved_cgroup: Optional[pulumi.Input[str]] = None,
                 kubeconfig_path: Optional[pulumi.Input[str]] = None,
                 kubelet_cgroups: Optional[pulumi.Input[str]] = None,
                 log_format: Optional[pulumi.Input[str]] = None,
                 log_level: Optional[pulumi.Input[int]] = None,
                 max_pods: Optional[pulumi.Input[int]] = None,
                 network_plugin_mtu: Optional[pulumi.Input[int]] = None,
                 network_plugin_name: Optional[pulumi.Input[str]] = None,
                 node_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 node_status_update_frequency: Optional[pulumi.Input[str]] = None,
                 non_masquerade_cidr: Optional[pulumi.Input[str]] = None,
                 nvidia_gp_us: Optional[pulumi.Input[int]] = None,
                 pod_cidr: Optional[pulumi.Input[str]] = None,
                 pod_infra_container_image: Optional[pulumi.Input[str]] = None,
                 pod_manifest_path: Optional[pulumi.Input[str]] = None,
                 pod_pids_limit: Optional[pulumi.Input[int]] = None,
                 protect_kernel_defaults: Optional[pulumi.Input[bool]] = None,
                 read_only_port: Optional[pulumi.Input[int]] = None,
                 reconcile_cidr: Optional[pulumi.Input[bool]] = None,
                 register_node: Optional[pulumi.Input[bool]] = None,
                 register_schedulable: Optional[pulumi.Input[bool]] = None,
                 registry_burst: Optional[pulumi.Input[int]] = None,
                 registry_pull_qps: Optional[pulumi.Input[int]] = None,
                 require_kubeconfig: Optional[pulumi.Input[bool]] = None,
                 resolver_config: Optional[pulumi.Input[str]] = None,
                 root_dir: Optional[pulumi.Input[str]] = None,
                 rotate_certificates: Optional[pulumi.Input[bool]] = None,
                 runtime_cgroups: Optional[pulumi.Input[str]] = None,
                 runtime_request_timeout: Optional[pulumi.Input[str]] = None,
                 seccomp_profile_root: Optional[pulumi.Input[str]] = None,
                 serialize_image_pulls: Optional[pulumi.Input[bool]] = None,
                 shutdown_grace_period: Optional[pulumi.Input[str]] = None,
                 shutdown_grace_period_critical_pods: Optional[pulumi.Input[str]] = None,
                 streaming_connection_idle_timeout: Optional[pulumi.Input[str]] = None,
                 system_cgroups: Optional[pulumi.Input[str]] = None,
                 system_reserved: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 system_reserved_cgroup: Optional[pulumi.Input[str]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tls_cert_file: Optional[pulumi.Input[str]] = None,
                 tls_cipher_suites: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tls_min_version: Optional[pulumi.Input[str]] = None,
                 tls_private_key_file: Optional[pulumi.Input[str]] = None,
                 topology_manager_policy: Optional[pulumi.Input[str]] = None,
                 volume_plugin_directory: Optional[pulumi.Input[str]] = None,
                 volume_stats_agg_period: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cloud_provider: - cloud_provider_spec - CloudProvider configures the cloud provider to use.
        :param pulumi.Input[str] non_masquerade_cidr: - (Computed) - String - NonMasqueradeCIDR is the CIDR for the internal k8s network (on which pods & services live)<br />It cannot overlap ServiceClusterIPRange.
        :param pulumi.Input[str] pod_cidr: - String - PodCIDR is the CIDR from which we allocate IPs for pods.
        """
        if allow_privileged is not None:
            pulumi.set(__self__, "allow_privileged", allow_privileged)
        if allowed_unsafe_sysctls is not None:
            pulumi.set(__self__, "allowed_unsafe_sysctls", allowed_unsafe_sysctls)
        if anonymous_auth is not None:
            pulumi.set(__self__, "anonymous_auth", anonymous_auth)
        if api_servers is not None:
            pulumi.set(__self__, "api_servers", api_servers)
        if authentication_token_webhook is not None:
            pulumi.set(__self__, "authentication_token_webhook", authentication_token_webhook)
        if authentication_token_webhook_cache_ttl is not None:
            pulumi.set(__self__, "authentication_token_webhook_cache_ttl", authentication_token_webhook_cache_ttl)
        if authorization_mode is not None:
            pulumi.set(__self__, "authorization_mode", authorization_mode)
        if babysit_daemons is not None:
            pulumi.set(__self__, "babysit_daemons", babysit_daemons)
        if bootstrap_kubeconfig is not None:
            pulumi.set(__self__, "bootstrap_kubeconfig", bootstrap_kubeconfig)
        if cgroup_driver is not None:
            pulumi.set(__self__, "cgroup_driver", cgroup_driver)
        if cgroup_root is not None:
            pulumi.set(__self__, "cgroup_root", cgroup_root)
        if client_ca_file is not None:
            pulumi.set(__self__, "client_ca_file", client_ca_file)
        if cloud_provider is not None:
            pulumi.set(__self__, "cloud_provider", cloud_provider)
        if cluster_dns is not None:
            pulumi.set(__self__, "cluster_dns", cluster_dns)
        if cluster_domain is not None:
            pulumi.set(__self__, "cluster_domain", cluster_domain)
        if configure_cbr0 is not None:
            pulumi.set(__self__, "configure_cbr0", configure_cbr0)
        if container_log_max_files is not None:
            pulumi.set(__self__, "container_log_max_files", container_log_max_files)
        if container_log_max_size is not None:
            pulumi.set(__self__, "container_log_max_size", container_log_max_size)
        if cpu_cfs_quota is not None:
            pulumi.set(__self__, "cpu_cfs_quota", cpu_cfs_quota)
        if cpu_cfs_quota_period is not None:
            pulumi.set(__self__, "cpu_cfs_quota_period", cpu_cfs_quota_period)
        if cpu_manager_policy is not None:
            pulumi.set(__self__, "cpu_manager_policy", cpu_manager_policy)
        if docker_disable_shared_pid is not None:
            pulumi.set(__self__, "docker_disable_shared_pid", docker_disable_shared_pid)
        if enable_cadvisor_json_endpoints is not None:
            pulumi.set(__self__, "enable_cadvisor_json_endpoints", enable_cadvisor_json_endpoints)
        if enable_custom_metrics is not None:
            pulumi.set(__self__, "enable_custom_metrics", enable_custom_metrics)
        if enable_debugging_handlers is not None:
            pulumi.set(__self__, "enable_debugging_handlers", enable_debugging_handlers)
        if enforce_node_allocatable is not None:
            pulumi.set(__self__, "enforce_node_allocatable", enforce_node_allocatable)
        if event_burst is not None:
            pulumi.set(__self__, "event_burst", event_burst)
        if event_qps is not None:
            pulumi.set(__self__, "event_qps", event_qps)
        if eviction_hard is not None:
            pulumi.set(__self__, "eviction_hard", eviction_hard)
        if eviction_max_pod_grace_period is not None:
            pulumi.set(__self__, "eviction_max_pod_grace_period", eviction_max_pod_grace_period)
        if eviction_minimum_reclaim is not None:
            pulumi.set(__self__, "eviction_minimum_reclaim", eviction_minimum_reclaim)
        if eviction_pressure_transition_period is not None:
            pulumi.set(__self__, "eviction_pressure_transition_period", eviction_pressure_transition_period)
        if eviction_soft is not None:
            pulumi.set(__self__, "eviction_soft", eviction_soft)
        if eviction_soft_grace_period is not None:
            pulumi.set(__self__, "eviction_soft_grace_period", eviction_soft_grace_period)
        if experimental_allowed_unsafe_sysctls is not None:
            pulumi.set(__self__, "experimental_allowed_unsafe_sysctls", experimental_allowed_unsafe_sysctls)
        if fail_swap_on is not None:
            pulumi.set(__self__, "fail_swap_on", fail_swap_on)
        if feature_gates is not None:
            pulumi.set(__self__, "feature_gates", feature_gates)
        if hairpin_mode is not None:
            pulumi.set(__self__, "hairpin_mode", hairpin_mode)
        if hostname_override is not None:
            pulumi.set(__self__, "hostname_override", hostname_override)
        if housekeeping_interval is not None:
            pulumi.set(__self__, "housekeeping_interval", housekeeping_interval)
        if image_gc_high_threshold_percent is not None:
            pulumi.set(__self__, "image_gc_high_threshold_percent", image_gc_high_threshold_percent)
        if image_gc_low_threshold_percent is not None:
            pulumi.set(__self__, "image_gc_low_threshold_percent", image_gc_low_threshold_percent)
        if image_pull_progress_deadline is not None:
            pulumi.set(__self__, "image_pull_progress_deadline", image_pull_progress_deadline)
        if kernel_memcg_notification is not None:
            pulumi.set(__self__, "kernel_memcg_notification", kernel_memcg_notification)
        if kube_reserved is not None:
            pulumi.set(__self__, "kube_reserved", kube_reserved)
        if kube_reserved_cgroup is not None:
            pulumi.set(__self__, "kube_reserved_cgroup", kube_reserved_cgroup)
        if kubeconfig_path is not None:
            pulumi.set(__self__, "kubeconfig_path", kubeconfig_path)
        if kubelet_cgroups is not None:
            pulumi.set(__self__, "kubelet_cgroups", kubelet_cgroups)
        if log_format is not None:
            pulumi.set(__self__, "log_format", log_format)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)
        if max_pods is not None:
            pulumi.set(__self__, "max_pods", max_pods)
        if network_plugin_mtu is not None:
            pulumi.set(__self__, "network_plugin_mtu", network_plugin_mtu)
        if network_plugin_name is not None:
            pulumi.set(__self__, "network_plugin_name", network_plugin_name)
        if node_labels is not None:
            pulumi.set(__self__, "node_labels", node_labels)
        if node_status_update_frequency is not None:
            pulumi.set(__self__, "node_status_update_frequency", node_status_update_frequency)
        if non_masquerade_cidr is not None:
            pulumi.set(__self__, "non_masquerade_cidr", non_masquerade_cidr)
        if nvidia_gp_us is not None:
            pulumi.set(__self__, "nvidia_gp_us", nvidia_gp_us)
        if pod_cidr is not None:
            pulumi.set(__self__, "pod_cidr", pod_cidr)
        if pod_infra_container_image is not None:
            pulumi.set(__self__, "pod_infra_container_image", pod_infra_container_image)
        if pod_manifest_path is not None:
            pulumi.set(__self__, "pod_manifest_path", pod_manifest_path)
        if pod_pids_limit is not None:
            pulumi.set(__self__, "pod_pids_limit", pod_pids_limit)
        if protect_kernel_defaults is not None:
            pulumi.set(__self__, "protect_kernel_defaults", protect_kernel_defaults)
        if read_only_port is not None:
            pulumi.set(__self__, "read_only_port", read_only_port)
        if reconcile_cidr is not None:
            pulumi.set(__self__, "reconcile_cidr", reconcile_cidr)
        if register_node is not None:
            pulumi.set(__self__, "register_node", register_node)
        if register_schedulable is not None:
            pulumi.set(__self__, "register_schedulable", register_schedulable)
        if registry_burst is not None:
            pulumi.set(__self__, "registry_burst", registry_burst)
        if registry_pull_qps is not None:
            pulumi.set(__self__, "registry_pull_qps", registry_pull_qps)
        if require_kubeconfig is not None:
            pulumi.set(__self__, "require_kubeconfig", require_kubeconfig)
        if resolver_config is not None:
            pulumi.set(__self__, "resolver_config", resolver_config)
        if root_dir is not None:
            pulumi.set(__self__, "root_dir", root_dir)
        if rotate_certificates is not None:
            pulumi.set(__self__, "rotate_certificates", rotate_certificates)
        if runtime_cgroups is not None:
            pulumi.set(__self__, "runtime_cgroups", runtime_cgroups)
        if runtime_request_timeout is not None:
            pulumi.set(__self__, "runtime_request_timeout", runtime_request_timeout)
        if seccomp_profile_root is not None:
            pulumi.set(__self__, "seccomp_profile_root", seccomp_profile_root)
        if serialize_image_pulls is not None:
            pulumi.set(__self__, "serialize_image_pulls", serialize_image_pulls)
        if shutdown_grace_period is not None:
            pulumi.set(__self__, "shutdown_grace_period", shutdown_grace_period)
        if shutdown_grace_period_critical_pods is not None:
            pulumi.set(__self__, "shutdown_grace_period_critical_pods", shutdown_grace_period_critical_pods)
        if streaming_connection_idle_timeout is not None:
            pulumi.set(__self__, "streaming_connection_idle_timeout", streaming_connection_idle_timeout)
        if system_cgroups is not None:
            pulumi.set(__self__, "system_cgroups", system_cgroups)
        if system_reserved is not None:
            pulumi.set(__self__, "system_reserved", system_reserved)
        if system_reserved_cgroup is not None:
            pulumi.set(__self__, "system_reserved_cgroup", system_reserved_cgroup)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)
        if tls_cert_file is not None:
            pulumi.set(__self__, "tls_cert_file", tls_cert_file)
        if tls_cipher_suites is not None:
            pulumi.set(__self__, "tls_cipher_suites", tls_cipher_suites)
        if tls_min_version is not None:
            pulumi.set(__self__, "tls_min_version", tls_min_version)
        if tls_private_key_file is not None:
            pulumi.set(__self__, "tls_private_key_file", tls_private_key_file)
        if topology_manager_policy is not None:
            pulumi.set(__self__, "topology_manager_policy", topology_manager_policy)
        if volume_plugin_directory is not None:
            pulumi.set(__self__, "volume_plugin_directory", volume_plugin_directory)
        if volume_stats_agg_period is not None:
            pulumi.set(__self__, "volume_stats_agg_period", volume_stats_agg_period)

    @property
    @pulumi.getter(name="allowPrivileged")
    def allow_privileged(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_privileged")

    @allow_privileged.setter
    def allow_privileged(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_privileged", value)

    @property
    @pulumi.getter(name="allowedUnsafeSysctls")
    def allowed_unsafe_sysctls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "allowed_unsafe_sysctls")

    @allowed_unsafe_sysctls.setter
    def allowed_unsafe_sysctls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_unsafe_sysctls", value)

    @property
    @pulumi.getter(name="anonymousAuth")
    def anonymous_auth(self) -> Optional[pulumi.Input['ClusterMasterKubeletAnonymousAuthArgs']]:
        return pulumi.get(self, "anonymous_auth")

    @anonymous_auth.setter
    def anonymous_auth(self, value: Optional[pulumi.Input['ClusterMasterKubeletAnonymousAuthArgs']]):
        pulumi.set(self, "anonymous_auth", value)

    @property
    @pulumi.getter(name="apiServers")
    def api_servers(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "api_servers")

    @api_servers.setter
    def api_servers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_servers", value)

    @property
    @pulumi.getter(name="authenticationTokenWebhook")
    def authentication_token_webhook(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "authentication_token_webhook")

    @authentication_token_webhook.setter
    def authentication_token_webhook(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "authentication_token_webhook", value)

    @property
    @pulumi.getter(name="authenticationTokenWebhookCacheTtl")
    def authentication_token_webhook_cache_ttl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authentication_token_webhook_cache_ttl")

    @authentication_token_webhook_cache_ttl.setter
    def authentication_token_webhook_cache_ttl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_token_webhook_cache_ttl", value)

    @property
    @pulumi.getter(name="authorizationMode")
    def authorization_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authorization_mode")

    @authorization_mode.setter
    def authorization_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorization_mode", value)

    @property
    @pulumi.getter(name="babysitDaemons")
    def babysit_daemons(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "babysit_daemons")

    @babysit_daemons.setter
    def babysit_daemons(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "babysit_daemons", value)

    @property
    @pulumi.getter(name="bootstrapKubeconfig")
    def bootstrap_kubeconfig(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bootstrap_kubeconfig")

    @bootstrap_kubeconfig.setter
    def bootstrap_kubeconfig(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bootstrap_kubeconfig", value)

    @property
    @pulumi.getter(name="cgroupDriver")
    def cgroup_driver(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cgroup_driver")

    @cgroup_driver.setter
    def cgroup_driver(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cgroup_driver", value)

    @property
    @pulumi.getter(name="cgroupRoot")
    def cgroup_root(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cgroup_root")

    @cgroup_root.setter
    def cgroup_root(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cgroup_root", value)

    @property
    @pulumi.getter(name="clientCaFile")
    def client_ca_file(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_ca_file")

    @client_ca_file.setter
    def client_ca_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_ca_file", value)

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> Optional[pulumi.Input[str]]:
        """
        - cloud_provider_spec - CloudProvider configures the cloud provider to use.
        """
        return pulumi.get(self, "cloud_provider")

    @cloud_provider.setter
    def cloud_provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_provider", value)

    @property
    @pulumi.getter(name="clusterDns")
    def cluster_dns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_dns")

    @cluster_dns.setter
    def cluster_dns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_dns", value)

    @property
    @pulumi.getter(name="clusterDomain")
    def cluster_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_domain")

    @cluster_domain.setter
    def cluster_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_domain", value)

    @property
    @pulumi.getter(name="configureCbr0")
    def configure_cbr0(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "configure_cbr0")

    @configure_cbr0.setter
    def configure_cbr0(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "configure_cbr0", value)

    @property
    @pulumi.getter(name="containerLogMaxFiles")
    def container_log_max_files(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "container_log_max_files")

    @container_log_max_files.setter
    def container_log_max_files(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "container_log_max_files", value)

    @property
    @pulumi.getter(name="containerLogMaxSize")
    def container_log_max_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "container_log_max_size")

    @container_log_max_size.setter
    def container_log_max_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_log_max_size", value)

    @property
    @pulumi.getter(name="cpuCfsQuota")
    def cpu_cfs_quota(self) -> Optional[pulumi.Input['ClusterMasterKubeletCpuCfsQuotaArgs']]:
        return pulumi.get(self, "cpu_cfs_quota")

    @cpu_cfs_quota.setter
    def cpu_cfs_quota(self, value: Optional[pulumi.Input['ClusterMasterKubeletCpuCfsQuotaArgs']]):
        pulumi.set(self, "cpu_cfs_quota", value)

    @property
    @pulumi.getter(name="cpuCfsQuotaPeriod")
    def cpu_cfs_quota_period(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpu_cfs_quota_period")

    @cpu_cfs_quota_period.setter
    def cpu_cfs_quota_period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_cfs_quota_period", value)

    @property
    @pulumi.getter(name="cpuManagerPolicy")
    def cpu_manager_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpu_manager_policy")

    @cpu_manager_policy.setter
    def cpu_manager_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_manager_policy", value)

    @property
    @pulumi.getter(name="dockerDisableSharedPid")
    def docker_disable_shared_pid(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "docker_disable_shared_pid")

    @docker_disable_shared_pid.setter
    def docker_disable_shared_pid(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "docker_disable_shared_pid", value)

    @property
    @pulumi.getter(name="enableCadvisorJsonEndpoints")
    def enable_cadvisor_json_endpoints(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_cadvisor_json_endpoints")

    @enable_cadvisor_json_endpoints.setter
    def enable_cadvisor_json_endpoints(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_cadvisor_json_endpoints", value)

    @property
    @pulumi.getter(name="enableCustomMetrics")
    def enable_custom_metrics(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_custom_metrics")

    @enable_custom_metrics.setter
    def enable_custom_metrics(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_custom_metrics", value)

    @property
    @pulumi.getter(name="enableDebuggingHandlers")
    def enable_debugging_handlers(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_debugging_handlers")

    @enable_debugging_handlers.setter
    def enable_debugging_handlers(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_debugging_handlers", value)

    @property
    @pulumi.getter(name="enforceNodeAllocatable")
    def enforce_node_allocatable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enforce_node_allocatable")

    @enforce_node_allocatable.setter
    def enforce_node_allocatable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enforce_node_allocatable", value)

    @property
    @pulumi.getter(name="eventBurst")
    def event_burst(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "event_burst")

    @event_burst.setter
    def event_burst(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "event_burst", value)

    @property
    @pulumi.getter(name="eventQps")
    def event_qps(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "event_qps")

    @event_qps.setter
    def event_qps(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "event_qps", value)

    @property
    @pulumi.getter(name="evictionHard")
    def eviction_hard(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "eviction_hard")

    @eviction_hard.setter
    def eviction_hard(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eviction_hard", value)

    @property
    @pulumi.getter(name="evictionMaxPodGracePeriod")
    def eviction_max_pod_grace_period(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "eviction_max_pod_grace_period")

    @eviction_max_pod_grace_period.setter
    def eviction_max_pod_grace_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "eviction_max_pod_grace_period", value)

    @property
    @pulumi.getter(name="evictionMinimumReclaim")
    def eviction_minimum_reclaim(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "eviction_minimum_reclaim")

    @eviction_minimum_reclaim.setter
    def eviction_minimum_reclaim(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eviction_minimum_reclaim", value)

    @property
    @pulumi.getter(name="evictionPressureTransitionPeriod")
    def eviction_pressure_transition_period(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "eviction_pressure_transition_period")

    @eviction_pressure_transition_period.setter
    def eviction_pressure_transition_period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eviction_pressure_transition_period", value)

    @property
    @pulumi.getter(name="evictionSoft")
    def eviction_soft(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "eviction_soft")

    @eviction_soft.setter
    def eviction_soft(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eviction_soft", value)

    @property
    @pulumi.getter(name="evictionSoftGracePeriod")
    def eviction_soft_grace_period(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "eviction_soft_grace_period")

    @eviction_soft_grace_period.setter
    def eviction_soft_grace_period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eviction_soft_grace_period", value)

    @property
    @pulumi.getter(name="experimentalAllowedUnsafeSysctls")
    def experimental_allowed_unsafe_sysctls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "experimental_allowed_unsafe_sysctls")

    @experimental_allowed_unsafe_sysctls.setter
    def experimental_allowed_unsafe_sysctls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "experimental_allowed_unsafe_sysctls", value)

    @property
    @pulumi.getter(name="failSwapOn")
    def fail_swap_on(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "fail_swap_on")

    @fail_swap_on.setter
    def fail_swap_on(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fail_swap_on", value)

    @property
    @pulumi.getter(name="featureGates")
    def feature_gates(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "feature_gates")

    @feature_gates.setter
    def feature_gates(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "feature_gates", value)

    @property
    @pulumi.getter(name="hairpinMode")
    def hairpin_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hairpin_mode")

    @hairpin_mode.setter
    def hairpin_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hairpin_mode", value)

    @property
    @pulumi.getter(name="hostnameOverride")
    def hostname_override(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hostname_override")

    @hostname_override.setter
    def hostname_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname_override", value)

    @property
    @pulumi.getter(name="housekeepingInterval")
    def housekeeping_interval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "housekeeping_interval")

    @housekeeping_interval.setter
    def housekeeping_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "housekeeping_interval", value)

    @property
    @pulumi.getter(name="imageGcHighThresholdPercent")
    def image_gc_high_threshold_percent(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "image_gc_high_threshold_percent")

    @image_gc_high_threshold_percent.setter
    def image_gc_high_threshold_percent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "image_gc_high_threshold_percent", value)

    @property
    @pulumi.getter(name="imageGcLowThresholdPercent")
    def image_gc_low_threshold_percent(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "image_gc_low_threshold_percent")

    @image_gc_low_threshold_percent.setter
    def image_gc_low_threshold_percent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "image_gc_low_threshold_percent", value)

    @property
    @pulumi.getter(name="imagePullProgressDeadline")
    def image_pull_progress_deadline(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_pull_progress_deadline")

    @image_pull_progress_deadline.setter
    def image_pull_progress_deadline(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_pull_progress_deadline", value)

    @property
    @pulumi.getter(name="kernelMemcgNotification")
    def kernel_memcg_notification(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "kernel_memcg_notification")

    @kernel_memcg_notification.setter
    def kernel_memcg_notification(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "kernel_memcg_notification", value)

    @property
    @pulumi.getter(name="kubeReserved")
    def kube_reserved(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "kube_reserved")

    @kube_reserved.setter
    def kube_reserved(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "kube_reserved", value)

    @property
    @pulumi.getter(name="kubeReservedCgroup")
    def kube_reserved_cgroup(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kube_reserved_cgroup")

    @kube_reserved_cgroup.setter
    def kube_reserved_cgroup(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kube_reserved_cgroup", value)

    @property
    @pulumi.getter(name="kubeconfigPath")
    def kubeconfig_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kubeconfig_path")

    @kubeconfig_path.setter
    def kubeconfig_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubeconfig_path", value)

    @property
    @pulumi.getter(name="kubeletCgroups")
    def kubelet_cgroups(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kubelet_cgroups")

    @kubelet_cgroups.setter
    def kubelet_cgroups(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubelet_cgroups", value)

    @property
    @pulumi.getter(name="logFormat")
    def log_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_format")

    @log_format.setter
    def log_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_format", value)

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "log_level")

    @log_level.setter
    def log_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "log_level", value)

    @property
    @pulumi.getter(name="maxPods")
    def max_pods(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_pods")

    @max_pods.setter
    def max_pods(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_pods", value)

    @property
    @pulumi.getter(name="networkPluginMtu")
    def network_plugin_mtu(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "network_plugin_mtu")

    @network_plugin_mtu.setter
    def network_plugin_mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "network_plugin_mtu", value)

    @property
    @pulumi.getter(name="networkPluginName")
    def network_plugin_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "network_plugin_name")

    @network_plugin_name.setter
    def network_plugin_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_plugin_name", value)

    @property
    @pulumi.getter(name="nodeLabels")
    def node_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "node_labels")

    @node_labels.setter
    def node_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "node_labels", value)

    @property
    @pulumi.getter(name="nodeStatusUpdateFrequency")
    def node_status_update_frequency(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "node_status_update_frequency")

    @node_status_update_frequency.setter
    def node_status_update_frequency(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_status_update_frequency", value)

    @property
    @pulumi.getter(name="nonMasqueradeCidr")
    def non_masquerade_cidr(self) -> Optional[pulumi.Input[str]]:
        """
        - (Computed) - String - NonMasqueradeCIDR is the CIDR for the internal k8s network (on which pods & services live)<br />It cannot overlap ServiceClusterIPRange.
        """
        return pulumi.get(self, "non_masquerade_cidr")

    @non_masquerade_cidr.setter
    def non_masquerade_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "non_masquerade_cidr", value)

    @property
    @pulumi.getter(name="nvidiaGpUs")
    def nvidia_gp_us(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "nvidia_gp_us")

    @nvidia_gp_us.setter
    def nvidia_gp_us(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "nvidia_gp_us", value)

    @property
    @pulumi.getter(name="podCidr")
    def pod_cidr(self) -> Optional[pulumi.Input[str]]:
        """
        - String - PodCIDR is the CIDR from which we allocate IPs for pods.
        """
        return pulumi.get(self, "pod_cidr")

    @pod_cidr.setter
    def pod_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pod_cidr", value)

    @property
    @pulumi.getter(name="podInfraContainerImage")
    def pod_infra_container_image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pod_infra_container_image")

    @pod_infra_container_image.setter
    def pod_infra_container_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pod_infra_container_image", value)

    @property
    @pulumi.getter(name="podManifestPath")
    def pod_manifest_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pod_manifest_path")

    @pod_manifest_path.setter
    def pod_manifest_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pod_manifest_path", value)

    @property
    @pulumi.getter(name="podPidsLimit")
    def pod_pids_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "pod_pids_limit")

    @pod_pids_limit.setter
    def pod_pids_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pod_pids_limit", value)

    @property
    @pulumi.getter(name="protectKernelDefaults")
    def protect_kernel_defaults(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "protect_kernel_defaults")

    @protect_kernel_defaults.setter
    def protect_kernel_defaults(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "protect_kernel_defaults", value)

    @property
    @pulumi.getter(name="readOnlyPort")
    def read_only_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "read_only_port")

    @read_only_port.setter
    def read_only_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "read_only_port", value)

    @property
    @pulumi.getter(name="reconcileCidr")
    def reconcile_cidr(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "reconcile_cidr")

    @reconcile_cidr.setter
    def reconcile_cidr(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "reconcile_cidr", value)

    @property
    @pulumi.getter(name="registerNode")
    def register_node(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "register_node")

    @register_node.setter
    def register_node(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "register_node", value)

    @property
    @pulumi.getter(name="registerSchedulable")
    def register_schedulable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "register_schedulable")

    @register_schedulable.setter
    def register_schedulable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "register_schedulable", value)

    @property
    @pulumi.getter(name="registryBurst")
    def registry_burst(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "registry_burst")

    @registry_burst.setter
    def registry_burst(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "registry_burst", value)

    @property
    @pulumi.getter(name="registryPullQps")
    def registry_pull_qps(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "registry_pull_qps")

    @registry_pull_qps.setter
    def registry_pull_qps(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "registry_pull_qps", value)

    @property
    @pulumi.getter(name="requireKubeconfig")
    def require_kubeconfig(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "require_kubeconfig")

    @require_kubeconfig.setter
    def require_kubeconfig(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "require_kubeconfig", value)

    @property
    @pulumi.getter(name="resolverConfig")
    def resolver_config(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resolver_config")

    @resolver_config.setter
    def resolver_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resolver_config", value)

    @property
    @pulumi.getter(name="rootDir")
    def root_dir(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "root_dir")

    @root_dir.setter
    def root_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_dir", value)

    @property
    @pulumi.getter(name="rotateCertificates")
    def rotate_certificates(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "rotate_certificates")

    @rotate_certificates.setter
    def rotate_certificates(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "rotate_certificates", value)

    @property
    @pulumi.getter(name="runtimeCgroups")
    def runtime_cgroups(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "runtime_cgroups")

    @runtime_cgroups.setter
    def runtime_cgroups(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "runtime_cgroups", value)

    @property
    @pulumi.getter(name="runtimeRequestTimeout")
    def runtime_request_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "runtime_request_timeout")

    @runtime_request_timeout.setter
    def runtime_request_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "runtime_request_timeout", value)

    @property
    @pulumi.getter(name="seccompProfileRoot")
    def seccomp_profile_root(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "seccomp_profile_root")

    @seccomp_profile_root.setter
    def seccomp_profile_root(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "seccomp_profile_root", value)

    @property
    @pulumi.getter(name="serializeImagePulls")
    def serialize_image_pulls(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "serialize_image_pulls")

    @serialize_image_pulls.setter
    def serialize_image_pulls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "serialize_image_pulls", value)

    @property
    @pulumi.getter(name="shutdownGracePeriod")
    def shutdown_grace_period(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "shutdown_grace_period")

    @shutdown_grace_period.setter
    def shutdown_grace_period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shutdown_grace_period", value)

    @property
    @pulumi.getter(name="shutdownGracePeriodCriticalPods")
    def shutdown_grace_period_critical_pods(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "shutdown_grace_period_critical_pods")

    @shutdown_grace_period_critical_pods.setter
    def shutdown_grace_period_critical_pods(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shutdown_grace_period_critical_pods", value)

    @property
    @pulumi.getter(name="streamingConnectionIdleTimeout")
    def streaming_connection_idle_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "streaming_connection_idle_timeout")

    @streaming_connection_idle_timeout.setter
    def streaming_connection_idle_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "streaming_connection_idle_timeout", value)

    @property
    @pulumi.getter(name="systemCgroups")
    def system_cgroups(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "system_cgroups")

    @system_cgroups.setter
    def system_cgroups(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_cgroups", value)

    @property
    @pulumi.getter(name="systemReserved")
    def system_reserved(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "system_reserved")

    @system_reserved.setter
    def system_reserved(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "system_reserved", value)

    @property
    @pulumi.getter(name="systemReservedCgroup")
    def system_reserved_cgroup(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "system_reserved_cgroup")

    @system_reserved_cgroup.setter
    def system_reserved_cgroup(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_reserved_cgroup", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "taints", value)

    @property
    @pulumi.getter(name="tlsCertFile")
    def tls_cert_file(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tls_cert_file")

    @tls_cert_file.setter
    def tls_cert_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_cert_file", value)

    @property
    @pulumi.getter(name="tlsCipherSuites")
    def tls_cipher_suites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tls_cipher_suites")

    @tls_cipher_suites.setter
    def tls_cipher_suites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tls_cipher_suites", value)

    @property
    @pulumi.getter(name="tlsMinVersion")
    def tls_min_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tls_min_version")

    @tls_min_version.setter
    def tls_min_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_min_version", value)

    @property
    @pulumi.getter(name="tlsPrivateKeyFile")
    def tls_private_key_file(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tls_private_key_file")

    @tls_private_key_file.setter
    def tls_private_key_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_private_key_file", value)

    @property
    @pulumi.getter(name="topologyManagerPolicy")
    def topology_manager_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topology_manager_policy")

    @topology_manager_policy.setter
    def topology_manager_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_manager_policy", value)

    @property
    @pulumi.getter(name="volumePluginDirectory")
    def volume_plugin_directory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "volume_plugin_directory")

    @volume_plugin_directory.setter
    def volume_plugin_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_plugin_directory", value)

    @property
    @pulumi.getter(name="volumeStatsAggPeriod")
    def volume_stats_agg_period(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "volume_stats_agg_period")

    @volume_stats_agg_period.setter
    def volume_stats_agg_period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_stats_agg_period", value)


@pulumi.input_type
class ClusterMasterKubeletAnonymousAuthArgs:
    def __init__(__self__, *,
                 value: Optional[pulumi.Input[bool]] = None):
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ClusterMasterKubeletCpuCfsQuotaArgs:
    def __init__(__self__, *,
                 value: Optional[pulumi.Input[bool]] = None):
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ClusterMetricsServerArgs:
    def __init__(__self__, *,
                 insecure: pulumi.Input[bool],
                 enabled: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "insecure", insecure)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter
    def insecure(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "insecure")

    @insecure.setter
    def insecure(self, value: pulumi.Input[bool]):
        pulumi.set(self, "insecure", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class ClusterNetworkingArgs:
    def __init__(__self__, *,
                 amazon_vpc: Optional[pulumi.Input['ClusterNetworkingAmazonVpcArgs']] = None,
                 calico: Optional[pulumi.Input['ClusterNetworkingCalicoArgs']] = None,
                 canal: Optional[pulumi.Input['ClusterNetworkingCanalArgs']] = None,
                 cilium: Optional[pulumi.Input['ClusterNetworkingCiliumArgs']] = None,
                 classic: Optional[pulumi.Input['ClusterNetworkingClassicArgs']] = None,
                 cni: Optional[pulumi.Input['ClusterNetworkingCniArgs']] = None,
                 external: Optional[pulumi.Input['ClusterNetworkingExternalArgs']] = None,
                 flannel: Optional[pulumi.Input['ClusterNetworkingFlannelArgs']] = None,
                 gce: Optional[pulumi.Input['ClusterNetworkingGceArgs']] = None,
                 kopeio: Optional[pulumi.Input['ClusterNetworkingKopeioArgs']] = None,
                 kubenet: Optional[pulumi.Input['ClusterNetworkingKubenetArgs']] = None,
                 kuberouter: Optional[pulumi.Input['ClusterNetworkingKuberouterArgs']] = None,
                 lyft_vpc: Optional[pulumi.Input['ClusterNetworkingLyftVpcArgs']] = None,
                 romana: Optional[pulumi.Input['ClusterNetworkingRomanaArgs']] = None,
                 weave: Optional[pulumi.Input['ClusterNetworkingWeaveArgs']] = None):
        if amazon_vpc is not None:
            pulumi.set(__self__, "amazon_vpc", amazon_vpc)
        if calico is not None:
            pulumi.set(__self__, "calico", calico)
        if canal is not None:
            pulumi.set(__self__, "canal", canal)
        if cilium is not None:
            pulumi.set(__self__, "cilium", cilium)
        if classic is not None:
            pulumi.set(__self__, "classic", classic)
        if cni is not None:
            pulumi.set(__self__, "cni", cni)
        if external is not None:
            pulumi.set(__self__, "external", external)
        if flannel is not None:
            pulumi.set(__self__, "flannel", flannel)
        if gce is not None:
            pulumi.set(__self__, "gce", gce)
        if kopeio is not None:
            pulumi.set(__self__, "kopeio", kopeio)
        if kubenet is not None:
            pulumi.set(__self__, "kubenet", kubenet)
        if kuberouter is not None:
            pulumi.set(__self__, "kuberouter", kuberouter)
        if lyft_vpc is not None:
            pulumi.set(__self__, "lyft_vpc", lyft_vpc)
        if romana is not None:
            pulumi.set(__self__, "romana", romana)
        if weave is not None:
            pulumi.set(__self__, "weave", weave)

    @property
    @pulumi.getter(name="amazonVpc")
    def amazon_vpc(self) -> Optional[pulumi.Input['ClusterNetworkingAmazonVpcArgs']]:
        return pulumi.get(self, "amazon_vpc")

    @amazon_vpc.setter
    def amazon_vpc(self, value: Optional[pulumi.Input['ClusterNetworkingAmazonVpcArgs']]):
        pulumi.set(self, "amazon_vpc", value)

    @property
    @pulumi.getter
    def calico(self) -> Optional[pulumi.Input['ClusterNetworkingCalicoArgs']]:
        return pulumi.get(self, "calico")

    @calico.setter
    def calico(self, value: Optional[pulumi.Input['ClusterNetworkingCalicoArgs']]):
        pulumi.set(self, "calico", value)

    @property
    @pulumi.getter
    def canal(self) -> Optional[pulumi.Input['ClusterNetworkingCanalArgs']]:
        return pulumi.get(self, "canal")

    @canal.setter
    def canal(self, value: Optional[pulumi.Input['ClusterNetworkingCanalArgs']]):
        pulumi.set(self, "canal", value)

    @property
    @pulumi.getter
    def cilium(self) -> Optional[pulumi.Input['ClusterNetworkingCiliumArgs']]:
        return pulumi.get(self, "cilium")

    @cilium.setter
    def cilium(self, value: Optional[pulumi.Input['ClusterNetworkingCiliumArgs']]):
        pulumi.set(self, "cilium", value)

    @property
    @pulumi.getter
    def classic(self) -> Optional[pulumi.Input['ClusterNetworkingClassicArgs']]:
        return pulumi.get(self, "classic")

    @classic.setter
    def classic(self, value: Optional[pulumi.Input['ClusterNetworkingClassicArgs']]):
        pulumi.set(self, "classic", value)

    @property
    @pulumi.getter
    def cni(self) -> Optional[pulumi.Input['ClusterNetworkingCniArgs']]:
        return pulumi.get(self, "cni")

    @cni.setter
    def cni(self, value: Optional[pulumi.Input['ClusterNetworkingCniArgs']]):
        pulumi.set(self, "cni", value)

    @property
    @pulumi.getter
    def external(self) -> Optional[pulumi.Input['ClusterNetworkingExternalArgs']]:
        return pulumi.get(self, "external")

    @external.setter
    def external(self, value: Optional[pulumi.Input['ClusterNetworkingExternalArgs']]):
        pulumi.set(self, "external", value)

    @property
    @pulumi.getter
    def flannel(self) -> Optional[pulumi.Input['ClusterNetworkingFlannelArgs']]:
        return pulumi.get(self, "flannel")

    @flannel.setter
    def flannel(self, value: Optional[pulumi.Input['ClusterNetworkingFlannelArgs']]):
        pulumi.set(self, "flannel", value)

    @property
    @pulumi.getter
    def gce(self) -> Optional[pulumi.Input['ClusterNetworkingGceArgs']]:
        return pulumi.get(self, "gce")

    @gce.setter
    def gce(self, value: Optional[pulumi.Input['ClusterNetworkingGceArgs']]):
        pulumi.set(self, "gce", value)

    @property
    @pulumi.getter
    def kopeio(self) -> Optional[pulumi.Input['ClusterNetworkingKopeioArgs']]:
        return pulumi.get(self, "kopeio")

    @kopeio.setter
    def kopeio(self, value: Optional[pulumi.Input['ClusterNetworkingKopeioArgs']]):
        pulumi.set(self, "kopeio", value)

    @property
    @pulumi.getter
    def kubenet(self) -> Optional[pulumi.Input['ClusterNetworkingKubenetArgs']]:
        return pulumi.get(self, "kubenet")

    @kubenet.setter
    def kubenet(self, value: Optional[pulumi.Input['ClusterNetworkingKubenetArgs']]):
        pulumi.set(self, "kubenet", value)

    @property
    @pulumi.getter
    def kuberouter(self) -> Optional[pulumi.Input['ClusterNetworkingKuberouterArgs']]:
        return pulumi.get(self, "kuberouter")

    @kuberouter.setter
    def kuberouter(self, value: Optional[pulumi.Input['ClusterNetworkingKuberouterArgs']]):
        pulumi.set(self, "kuberouter", value)

    @property
    @pulumi.getter(name="lyftVpc")
    def lyft_vpc(self) -> Optional[pulumi.Input['ClusterNetworkingLyftVpcArgs']]:
        return pulumi.get(self, "lyft_vpc")

    @lyft_vpc.setter
    def lyft_vpc(self, value: Optional[pulumi.Input['ClusterNetworkingLyftVpcArgs']]):
        pulumi.set(self, "lyft_vpc", value)

    @property
    @pulumi.getter
    def romana(self) -> Optional[pulumi.Input['ClusterNetworkingRomanaArgs']]:
        return pulumi.get(self, "romana")

    @romana.setter
    def romana(self, value: Optional[pulumi.Input['ClusterNetworkingRomanaArgs']]):
        pulumi.set(self, "romana", value)

    @property
    @pulumi.getter
    def weave(self) -> Optional[pulumi.Input['ClusterNetworkingWeaveArgs']]:
        return pulumi.get(self, "weave")

    @weave.setter
    def weave(self, value: Optional[pulumi.Input['ClusterNetworkingWeaveArgs']]):
        pulumi.set(self, "weave", value)


@pulumi.input_type
class ClusterNetworkingAmazonVpcArgs:
    def __init__(__self__, *,
                 envs: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterNetworkingAmazonVpcEnvArgs']]]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 init_image: Optional[pulumi.Input[str]] = None):
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if init_image is not None:
            pulumi.set(__self__, "init_image", init_image)

    @property
    @pulumi.getter
    def envs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterNetworkingAmazonVpcEnvArgs']]]]:
        return pulumi.get(self, "envs")

    @envs.setter
    def envs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterNetworkingAmazonVpcEnvArgs']]]]):
        pulumi.set(self, "envs", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="initImage")
    def init_image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "init_image")

    @init_image.setter
    def init_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "init_image", value)


@pulumi.input_type
class ClusterNetworkingAmazonVpcEnvArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: - (Force new) - String - Name defines the cluster name.
        """
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        - (Force new) - String - Name defines the cluster name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ClusterNetworkingCalicoArgs:
    def __init__(__self__, *,
                 allow_ip_forwarding: Optional[pulumi.Input[bool]] = None,
                 aws_src_dst_check: Optional[pulumi.Input[str]] = None,
                 bpf_enabled: Optional[pulumi.Input[bool]] = None,
                 bpf_external_service_mode: Optional[pulumi.Input[str]] = None,
                 bpf_kube_proxy_iptables_cleanup_enabled: Optional[pulumi.Input[bool]] = None,
                 bpf_log_level: Optional[pulumi.Input[str]] = None,
                 chain_insert_mode: Optional[pulumi.Input[str]] = None,
                 cpu_request: Optional[pulumi.Input[str]] = None,
                 cross_subnet: Optional[pulumi.Input[bool]] = None,
                 encapsulation_mode: Optional[pulumi.Input[str]] = None,
                 ip_ip_mode: Optional[pulumi.Input[str]] = None,
                 iptables_backend: Optional[pulumi.Input[str]] = None,
                 ipv4_auto_detection_method: Optional[pulumi.Input[str]] = None,
                 ipv6_auto_detection_method: Optional[pulumi.Input[str]] = None,
                 log_severity_screen: Optional[pulumi.Input[str]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 prometheus_go_metrics_enabled: Optional[pulumi.Input[bool]] = None,
                 prometheus_metrics_enabled: Optional[pulumi.Input[bool]] = None,
                 prometheus_metrics_port: Optional[pulumi.Input[int]] = None,
                 prometheus_process_metrics_enabled: Optional[pulumi.Input[bool]] = None,
                 registry: Optional[pulumi.Input[str]] = None,
                 typha_prometheus_metrics_enabled: Optional[pulumi.Input[bool]] = None,
                 typha_prometheus_metrics_port: Optional[pulumi.Input[int]] = None,
                 typha_replicas: Optional[pulumi.Input[int]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 vxlan_mode: Optional[pulumi.Input[str]] = None,
                 wireguard_enabled: Optional[pulumi.Input[bool]] = None):
        if allow_ip_forwarding is not None:
            pulumi.set(__self__, "allow_ip_forwarding", allow_ip_forwarding)
        if aws_src_dst_check is not None:
            pulumi.set(__self__, "aws_src_dst_check", aws_src_dst_check)
        if bpf_enabled is not None:
            pulumi.set(__self__, "bpf_enabled", bpf_enabled)
        if bpf_external_service_mode is not None:
            pulumi.set(__self__, "bpf_external_service_mode", bpf_external_service_mode)
        if bpf_kube_proxy_iptables_cleanup_enabled is not None:
            pulumi.set(__self__, "bpf_kube_proxy_iptables_cleanup_enabled", bpf_kube_proxy_iptables_cleanup_enabled)
        if bpf_log_level is not None:
            pulumi.set(__self__, "bpf_log_level", bpf_log_level)
        if chain_insert_mode is not None:
            pulumi.set(__self__, "chain_insert_mode", chain_insert_mode)
        if cpu_request is not None:
            pulumi.set(__self__, "cpu_request", cpu_request)
        if cross_subnet is not None:
            pulumi.set(__self__, "cross_subnet", cross_subnet)
        if encapsulation_mode is not None:
            pulumi.set(__self__, "encapsulation_mode", encapsulation_mode)
        if ip_ip_mode is not None:
            pulumi.set(__self__, "ip_ip_mode", ip_ip_mode)
        if iptables_backend is not None:
            pulumi.set(__self__, "iptables_backend", iptables_backend)
        if ipv4_auto_detection_method is not None:
            pulumi.set(__self__, "ipv4_auto_detection_method", ipv4_auto_detection_method)
        if ipv6_auto_detection_method is not None:
            pulumi.set(__self__, "ipv6_auto_detection_method", ipv6_auto_detection_method)
        if log_severity_screen is not None:
            pulumi.set(__self__, "log_severity_screen", log_severity_screen)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if prometheus_go_metrics_enabled is not None:
            pulumi.set(__self__, "prometheus_go_metrics_enabled", prometheus_go_metrics_enabled)
        if prometheus_metrics_enabled is not None:
            pulumi.set(__self__, "prometheus_metrics_enabled", prometheus_metrics_enabled)
        if prometheus_metrics_port is not None:
            pulumi.set(__self__, "prometheus_metrics_port", prometheus_metrics_port)
        if prometheus_process_metrics_enabled is not None:
            pulumi.set(__self__, "prometheus_process_metrics_enabled", prometheus_process_metrics_enabled)
        if registry is not None:
            pulumi.set(__self__, "registry", registry)
        if typha_prometheus_metrics_enabled is not None:
            pulumi.set(__self__, "typha_prometheus_metrics_enabled", typha_prometheus_metrics_enabled)
        if typha_prometheus_metrics_port is not None:
            pulumi.set(__self__, "typha_prometheus_metrics_port", typha_prometheus_metrics_port)
        if typha_replicas is not None:
            pulumi.set(__self__, "typha_replicas", typha_replicas)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if vxlan_mode is not None:
            pulumi.set(__self__, "vxlan_mode", vxlan_mode)
        if wireguard_enabled is not None:
            pulumi.set(__self__, "wireguard_enabled", wireguard_enabled)

    @property
    @pulumi.getter(name="allowIpForwarding")
    def allow_ip_forwarding(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_ip_forwarding")

    @allow_ip_forwarding.setter
    def allow_ip_forwarding(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_ip_forwarding", value)

    @property
    @pulumi.getter(name="awsSrcDstCheck")
    def aws_src_dst_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aws_src_dst_check")

    @aws_src_dst_check.setter
    def aws_src_dst_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_src_dst_check", value)

    @property
    @pulumi.getter(name="bpfEnabled")
    def bpf_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "bpf_enabled")

    @bpf_enabled.setter
    def bpf_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bpf_enabled", value)

    @property
    @pulumi.getter(name="bpfExternalServiceMode")
    def bpf_external_service_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bpf_external_service_mode")

    @bpf_external_service_mode.setter
    def bpf_external_service_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bpf_external_service_mode", value)

    @property
    @pulumi.getter(name="bpfKubeProxyIptablesCleanupEnabled")
    def bpf_kube_proxy_iptables_cleanup_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "bpf_kube_proxy_iptables_cleanup_enabled")

    @bpf_kube_proxy_iptables_cleanup_enabled.setter
    def bpf_kube_proxy_iptables_cleanup_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bpf_kube_proxy_iptables_cleanup_enabled", value)

    @property
    @pulumi.getter(name="bpfLogLevel")
    def bpf_log_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bpf_log_level")

    @bpf_log_level.setter
    def bpf_log_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bpf_log_level", value)

    @property
    @pulumi.getter(name="chainInsertMode")
    def chain_insert_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "chain_insert_mode")

    @chain_insert_mode.setter
    def chain_insert_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chain_insert_mode", value)

    @property
    @pulumi.getter(name="cpuRequest")
    def cpu_request(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpu_request")

    @cpu_request.setter
    def cpu_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_request", value)

    @property
    @pulumi.getter(name="crossSubnet")
    def cross_subnet(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "cross_subnet")

    @cross_subnet.setter
    def cross_subnet(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cross_subnet", value)

    @property
    @pulumi.getter(name="encapsulationMode")
    def encapsulation_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "encapsulation_mode")

    @encapsulation_mode.setter
    def encapsulation_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encapsulation_mode", value)

    @property
    @pulumi.getter(name="ipIpMode")
    def ip_ip_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_ip_mode")

    @ip_ip_mode.setter
    def ip_ip_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_ip_mode", value)

    @property
    @pulumi.getter(name="iptablesBackend")
    def iptables_backend(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "iptables_backend")

    @iptables_backend.setter
    def iptables_backend(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iptables_backend", value)

    @property
    @pulumi.getter(name="ipv4AutoDetectionMethod")
    def ipv4_auto_detection_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv4_auto_detection_method")

    @ipv4_auto_detection_method.setter
    def ipv4_auto_detection_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_auto_detection_method", value)

    @property
    @pulumi.getter(name="ipv6AutoDetectionMethod")
    def ipv6_auto_detection_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_auto_detection_method")

    @ipv6_auto_detection_method.setter
    def ipv6_auto_detection_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_auto_detection_method", value)

    @property
    @pulumi.getter(name="logSeverityScreen")
    def log_severity_screen(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_severity_screen")

    @log_severity_screen.setter
    def log_severity_screen(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_severity_screen", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter(name="prometheusGoMetricsEnabled")
    def prometheus_go_metrics_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "prometheus_go_metrics_enabled")

    @prometheus_go_metrics_enabled.setter
    def prometheus_go_metrics_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "prometheus_go_metrics_enabled", value)

    @property
    @pulumi.getter(name="prometheusMetricsEnabled")
    def prometheus_metrics_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "prometheus_metrics_enabled")

    @prometheus_metrics_enabled.setter
    def prometheus_metrics_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "prometheus_metrics_enabled", value)

    @property
    @pulumi.getter(name="prometheusMetricsPort")
    def prometheus_metrics_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "prometheus_metrics_port")

    @prometheus_metrics_port.setter
    def prometheus_metrics_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "prometheus_metrics_port", value)

    @property
    @pulumi.getter(name="prometheusProcessMetricsEnabled")
    def prometheus_process_metrics_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "prometheus_process_metrics_enabled")

    @prometheus_process_metrics_enabled.setter
    def prometheus_process_metrics_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "prometheus_process_metrics_enabled", value)

    @property
    @pulumi.getter
    def registry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "registry")

    @registry.setter
    def registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "registry", value)

    @property
    @pulumi.getter(name="typhaPrometheusMetricsEnabled")
    def typha_prometheus_metrics_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "typha_prometheus_metrics_enabled")

    @typha_prometheus_metrics_enabled.setter
    def typha_prometheus_metrics_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "typha_prometheus_metrics_enabled", value)

    @property
    @pulumi.getter(name="typhaPrometheusMetricsPort")
    def typha_prometheus_metrics_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "typha_prometheus_metrics_port")

    @typha_prometheus_metrics_port.setter
    def typha_prometheus_metrics_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "typha_prometheus_metrics_port", value)

    @property
    @pulumi.getter(name="typhaReplicas")
    def typha_replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "typha_replicas")

    @typha_replicas.setter
    def typha_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "typha_replicas", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="vxlanMode")
    def vxlan_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vxlan_mode")

    @vxlan_mode.setter
    def vxlan_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vxlan_mode", value)

    @property
    @pulumi.getter(name="wireguardEnabled")
    def wireguard_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "wireguard_enabled")

    @wireguard_enabled.setter
    def wireguard_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "wireguard_enabled", value)


@pulumi.input_type
class ClusterNetworkingCanalArgs:
    def __init__(__self__, *,
                 chain_insert_mode: Optional[pulumi.Input[str]] = None,
                 cpu_request: Optional[pulumi.Input[str]] = None,
                 default_endpoint_to_host_action: Optional[pulumi.Input[str]] = None,
                 flanneld_iptables_forward_rules: Optional[pulumi.Input[bool]] = None,
                 iptables_backend: Optional[pulumi.Input[str]] = None,
                 log_severity_sys: Optional[pulumi.Input[str]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 prometheus_go_metrics_enabled: Optional[pulumi.Input[bool]] = None,
                 prometheus_metrics_enabled: Optional[pulumi.Input[bool]] = None,
                 prometheus_metrics_port: Optional[pulumi.Input[int]] = None,
                 prometheus_process_metrics_enabled: Optional[pulumi.Input[bool]] = None,
                 typha_prometheus_metrics_enabled: Optional[pulumi.Input[bool]] = None,
                 typha_prometheus_metrics_port: Optional[pulumi.Input[int]] = None,
                 typha_replicas: Optional[pulumi.Input[int]] = None):
        if chain_insert_mode is not None:
            pulumi.set(__self__, "chain_insert_mode", chain_insert_mode)
        if cpu_request is not None:
            pulumi.set(__self__, "cpu_request", cpu_request)
        if default_endpoint_to_host_action is not None:
            pulumi.set(__self__, "default_endpoint_to_host_action", default_endpoint_to_host_action)
        if flanneld_iptables_forward_rules is not None:
            pulumi.set(__self__, "flanneld_iptables_forward_rules", flanneld_iptables_forward_rules)
        if iptables_backend is not None:
            pulumi.set(__self__, "iptables_backend", iptables_backend)
        if log_severity_sys is not None:
            pulumi.set(__self__, "log_severity_sys", log_severity_sys)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if prometheus_go_metrics_enabled is not None:
            pulumi.set(__self__, "prometheus_go_metrics_enabled", prometheus_go_metrics_enabled)
        if prometheus_metrics_enabled is not None:
            pulumi.set(__self__, "prometheus_metrics_enabled", prometheus_metrics_enabled)
        if prometheus_metrics_port is not None:
            pulumi.set(__self__, "prometheus_metrics_port", prometheus_metrics_port)
        if prometheus_process_metrics_enabled is not None:
            pulumi.set(__self__, "prometheus_process_metrics_enabled", prometheus_process_metrics_enabled)
        if typha_prometheus_metrics_enabled is not None:
            pulumi.set(__self__, "typha_prometheus_metrics_enabled", typha_prometheus_metrics_enabled)
        if typha_prometheus_metrics_port is not None:
            pulumi.set(__self__, "typha_prometheus_metrics_port", typha_prometheus_metrics_port)
        if typha_replicas is not None:
            pulumi.set(__self__, "typha_replicas", typha_replicas)

    @property
    @pulumi.getter(name="chainInsertMode")
    def chain_insert_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "chain_insert_mode")

    @chain_insert_mode.setter
    def chain_insert_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chain_insert_mode", value)

    @property
    @pulumi.getter(name="cpuRequest")
    def cpu_request(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpu_request")

    @cpu_request.setter
    def cpu_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_request", value)

    @property
    @pulumi.getter(name="defaultEndpointToHostAction")
    def default_endpoint_to_host_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_endpoint_to_host_action")

    @default_endpoint_to_host_action.setter
    def default_endpoint_to_host_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_endpoint_to_host_action", value)

    @property
    @pulumi.getter(name="flanneldIptablesForwardRules")
    def flanneld_iptables_forward_rules(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "flanneld_iptables_forward_rules")

    @flanneld_iptables_forward_rules.setter
    def flanneld_iptables_forward_rules(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flanneld_iptables_forward_rules", value)

    @property
    @pulumi.getter(name="iptablesBackend")
    def iptables_backend(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "iptables_backend")

    @iptables_backend.setter
    def iptables_backend(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iptables_backend", value)

    @property
    @pulumi.getter(name="logSeveritySys")
    def log_severity_sys(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_severity_sys")

    @log_severity_sys.setter
    def log_severity_sys(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_severity_sys", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter(name="prometheusGoMetricsEnabled")
    def prometheus_go_metrics_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "prometheus_go_metrics_enabled")

    @prometheus_go_metrics_enabled.setter
    def prometheus_go_metrics_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "prometheus_go_metrics_enabled", value)

    @property
    @pulumi.getter(name="prometheusMetricsEnabled")
    def prometheus_metrics_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "prometheus_metrics_enabled")

    @prometheus_metrics_enabled.setter
    def prometheus_metrics_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "prometheus_metrics_enabled", value)

    @property
    @pulumi.getter(name="prometheusMetricsPort")
    def prometheus_metrics_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "prometheus_metrics_port")

    @prometheus_metrics_port.setter
    def prometheus_metrics_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "prometheus_metrics_port", value)

    @property
    @pulumi.getter(name="prometheusProcessMetricsEnabled")
    def prometheus_process_metrics_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "prometheus_process_metrics_enabled")

    @prometheus_process_metrics_enabled.setter
    def prometheus_process_metrics_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "prometheus_process_metrics_enabled", value)

    @property
    @pulumi.getter(name="typhaPrometheusMetricsEnabled")
    def typha_prometheus_metrics_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "typha_prometheus_metrics_enabled")

    @typha_prometheus_metrics_enabled.setter
    def typha_prometheus_metrics_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "typha_prometheus_metrics_enabled", value)

    @property
    @pulumi.getter(name="typhaPrometheusMetricsPort")
    def typha_prometheus_metrics_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "typha_prometheus_metrics_port")

    @typha_prometheus_metrics_port.setter
    def typha_prometheus_metrics_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "typha_prometheus_metrics_port", value)

    @property
    @pulumi.getter(name="typhaReplicas")
    def typha_replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "typha_replicas")

    @typha_replicas.setter
    def typha_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "typha_replicas", value)


@pulumi.input_type
class ClusterNetworkingCiliumArgs:
    def __init__(__self__, *,
                 enable_remote_node_identity: pulumi.Input[bool],
                 preallocate_bpf_maps: pulumi.Input[bool],
                 agent_pod_annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 agent_prometheus_port: Optional[pulumi.Input[int]] = None,
                 auto_direct_node_routes: Optional[pulumi.Input[bool]] = None,
                 bpf_neigh_global_max: Optional[pulumi.Input[int]] = None,
                 bpf_policy_map_max: Optional[pulumi.Input[int]] = None,
                 bpfct_global_any_max: Optional[pulumi.Input[int]] = None,
                 bpfct_global_tcp_max: Optional[pulumi.Input[int]] = None,
                 bpflb_algorithm: Optional[pulumi.Input[str]] = None,
                 bpflb_maglev_table_size: Optional[pulumi.Input[str]] = None,
                 bpflb_map_max: Optional[pulumi.Input[int]] = None,
                 bpflb_sock_host_ns_only: Optional[pulumi.Input[bool]] = None,
                 bpfnat_global_max: Optional[pulumi.Input[int]] = None,
                 chaining_mode: Optional[pulumi.Input[str]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 cpu_request: Optional[pulumi.Input[str]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 disable_cnp_status_updates: Optional[pulumi.Input[bool]] = None,
                 disable_endpoint_crd: Optional[pulumi.Input[bool]] = None,
                 enable_bpf_masquerade: Optional[pulumi.Input[bool]] = None,
                 enable_encryption: Optional[pulumi.Input[bool]] = None,
                 enable_endpoint_health_checking: Optional[pulumi.Input[bool]] = None,
                 enable_host_reachable_services: Optional[pulumi.Input[bool]] = None,
                 enable_l7_proxy: Optional[pulumi.Input[bool]] = None,
                 enable_node_port: Optional[pulumi.Input[bool]] = None,
                 enable_policy: Optional[pulumi.Input[str]] = None,
                 enable_prometheus_metrics: Optional[pulumi.Input[bool]] = None,
                 enable_service_topology: Optional[pulumi.Input[bool]] = None,
                 encryption_type: Optional[pulumi.Input[str]] = None,
                 etcd_managed: Optional[pulumi.Input[bool]] = None,
                 hubble: Optional[pulumi.Input['ClusterNetworkingCiliumHubbleArgs']] = None,
                 identity_allocation_mode: Optional[pulumi.Input[str]] = None,
                 identity_change_grace_period: Optional[pulumi.Input[str]] = None,
                 install_iptables_rules: Optional[pulumi.Input[bool]] = None,
                 ipam: Optional[pulumi.Input[str]] = None,
                 masquerade: Optional[pulumi.Input[bool]] = None,
                 memory_request: Optional[pulumi.Input[str]] = None,
                 metrics: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 monitor_aggregation: Optional[pulumi.Input[str]] = None,
                 sidecar_istio_proxy_image: Optional[pulumi.Input[str]] = None,
                 to_fqdns_dns_reject_response_code: Optional[pulumi.Input[str]] = None,
                 to_fqdns_enable_poller: Optional[pulumi.Input[bool]] = None,
                 tunnel: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "enable_remote_node_identity", enable_remote_node_identity)
        pulumi.set(__self__, "preallocate_bpf_maps", preallocate_bpf_maps)
        if agent_pod_annotations is not None:
            pulumi.set(__self__, "agent_pod_annotations", agent_pod_annotations)
        if agent_prometheus_port is not None:
            pulumi.set(__self__, "agent_prometheus_port", agent_prometheus_port)
        if auto_direct_node_routes is not None:
            pulumi.set(__self__, "auto_direct_node_routes", auto_direct_node_routes)
        if bpf_neigh_global_max is not None:
            pulumi.set(__self__, "bpf_neigh_global_max", bpf_neigh_global_max)
        if bpf_policy_map_max is not None:
            pulumi.set(__self__, "bpf_policy_map_max", bpf_policy_map_max)
        if bpfct_global_any_max is not None:
            pulumi.set(__self__, "bpfct_global_any_max", bpfct_global_any_max)
        if bpfct_global_tcp_max is not None:
            pulumi.set(__self__, "bpfct_global_tcp_max", bpfct_global_tcp_max)
        if bpflb_algorithm is not None:
            pulumi.set(__self__, "bpflb_algorithm", bpflb_algorithm)
        if bpflb_maglev_table_size is not None:
            pulumi.set(__self__, "bpflb_maglev_table_size", bpflb_maglev_table_size)
        if bpflb_map_max is not None:
            pulumi.set(__self__, "bpflb_map_max", bpflb_map_max)
        if bpflb_sock_host_ns_only is not None:
            pulumi.set(__self__, "bpflb_sock_host_ns_only", bpflb_sock_host_ns_only)
        if bpfnat_global_max is not None:
            pulumi.set(__self__, "bpfnat_global_max", bpfnat_global_max)
        if chaining_mode is not None:
            pulumi.set(__self__, "chaining_mode", chaining_mode)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cpu_request is not None:
            pulumi.set(__self__, "cpu_request", cpu_request)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if disable_cnp_status_updates is not None:
            pulumi.set(__self__, "disable_cnp_status_updates", disable_cnp_status_updates)
        if disable_endpoint_crd is not None:
            pulumi.set(__self__, "disable_endpoint_crd", disable_endpoint_crd)
        if enable_bpf_masquerade is not None:
            pulumi.set(__self__, "enable_bpf_masquerade", enable_bpf_masquerade)
        if enable_encryption is not None:
            pulumi.set(__self__, "enable_encryption", enable_encryption)
        if enable_endpoint_health_checking is not None:
            pulumi.set(__self__, "enable_endpoint_health_checking", enable_endpoint_health_checking)
        if enable_host_reachable_services is not None:
            pulumi.set(__self__, "enable_host_reachable_services", enable_host_reachable_services)
        if enable_l7_proxy is not None:
            pulumi.set(__self__, "enable_l7_proxy", enable_l7_proxy)
        if enable_node_port is not None:
            pulumi.set(__self__, "enable_node_port", enable_node_port)
        if enable_policy is not None:
            pulumi.set(__self__, "enable_policy", enable_policy)
        if enable_prometheus_metrics is not None:
            pulumi.set(__self__, "enable_prometheus_metrics", enable_prometheus_metrics)
        if enable_service_topology is not None:
            pulumi.set(__self__, "enable_service_topology", enable_service_topology)
        if encryption_type is not None:
            pulumi.set(__self__, "encryption_type", encryption_type)
        if etcd_managed is not None:
            pulumi.set(__self__, "etcd_managed", etcd_managed)
        if hubble is not None:
            pulumi.set(__self__, "hubble", hubble)
        if identity_allocation_mode is not None:
            pulumi.set(__self__, "identity_allocation_mode", identity_allocation_mode)
        if identity_change_grace_period is not None:
            pulumi.set(__self__, "identity_change_grace_period", identity_change_grace_period)
        if install_iptables_rules is not None:
            pulumi.set(__self__, "install_iptables_rules", install_iptables_rules)
        if ipam is not None:
            pulumi.set(__self__, "ipam", ipam)
        if masquerade is not None:
            pulumi.set(__self__, "masquerade", masquerade)
        if memory_request is not None:
            pulumi.set(__self__, "memory_request", memory_request)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if monitor_aggregation is not None:
            pulumi.set(__self__, "monitor_aggregation", monitor_aggregation)
        if sidecar_istio_proxy_image is not None:
            pulumi.set(__self__, "sidecar_istio_proxy_image", sidecar_istio_proxy_image)
        if to_fqdns_dns_reject_response_code is not None:
            pulumi.set(__self__, "to_fqdns_dns_reject_response_code", to_fqdns_dns_reject_response_code)
        if to_fqdns_enable_poller is not None:
            pulumi.set(__self__, "to_fqdns_enable_poller", to_fqdns_enable_poller)
        if tunnel is not None:
            pulumi.set(__self__, "tunnel", tunnel)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="enableRemoteNodeIdentity")
    def enable_remote_node_identity(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enable_remote_node_identity")

    @enable_remote_node_identity.setter
    def enable_remote_node_identity(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_remote_node_identity", value)

    @property
    @pulumi.getter(name="preallocateBpfMaps")
    def preallocate_bpf_maps(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "preallocate_bpf_maps")

    @preallocate_bpf_maps.setter
    def preallocate_bpf_maps(self, value: pulumi.Input[bool]):
        pulumi.set(self, "preallocate_bpf_maps", value)

    @property
    @pulumi.getter(name="agentPodAnnotations")
    def agent_pod_annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "agent_pod_annotations")

    @agent_pod_annotations.setter
    def agent_pod_annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "agent_pod_annotations", value)

    @property
    @pulumi.getter(name="agentPrometheusPort")
    def agent_prometheus_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "agent_prometheus_port")

    @agent_prometheus_port.setter
    def agent_prometheus_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "agent_prometheus_port", value)

    @property
    @pulumi.getter(name="autoDirectNodeRoutes")
    def auto_direct_node_routes(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "auto_direct_node_routes")

    @auto_direct_node_routes.setter
    def auto_direct_node_routes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_direct_node_routes", value)

    @property
    @pulumi.getter(name="bpfNeighGlobalMax")
    def bpf_neigh_global_max(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bpf_neigh_global_max")

    @bpf_neigh_global_max.setter
    def bpf_neigh_global_max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bpf_neigh_global_max", value)

    @property
    @pulumi.getter(name="bpfPolicyMapMax")
    def bpf_policy_map_max(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bpf_policy_map_max")

    @bpf_policy_map_max.setter
    def bpf_policy_map_max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bpf_policy_map_max", value)

    @property
    @pulumi.getter(name="bpfctGlobalAnyMax")
    def bpfct_global_any_max(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bpfct_global_any_max")

    @bpfct_global_any_max.setter
    def bpfct_global_any_max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bpfct_global_any_max", value)

    @property
    @pulumi.getter(name="bpfctGlobalTcpMax")
    def bpfct_global_tcp_max(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bpfct_global_tcp_max")

    @bpfct_global_tcp_max.setter
    def bpfct_global_tcp_max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bpfct_global_tcp_max", value)

    @property
    @pulumi.getter(name="bpflbAlgorithm")
    def bpflb_algorithm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bpflb_algorithm")

    @bpflb_algorithm.setter
    def bpflb_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bpflb_algorithm", value)

    @property
    @pulumi.getter(name="bpflbMaglevTableSize")
    def bpflb_maglev_table_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bpflb_maglev_table_size")

    @bpflb_maglev_table_size.setter
    def bpflb_maglev_table_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bpflb_maglev_table_size", value)

    @property
    @pulumi.getter(name="bpflbMapMax")
    def bpflb_map_max(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bpflb_map_max")

    @bpflb_map_max.setter
    def bpflb_map_max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bpflb_map_max", value)

    @property
    @pulumi.getter(name="bpflbSockHostNsOnly")
    def bpflb_sock_host_ns_only(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "bpflb_sock_host_ns_only")

    @bpflb_sock_host_ns_only.setter
    def bpflb_sock_host_ns_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bpflb_sock_host_ns_only", value)

    @property
    @pulumi.getter(name="bpfnatGlobalMax")
    def bpfnat_global_max(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bpfnat_global_max")

    @bpfnat_global_max.setter
    def bpfnat_global_max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bpfnat_global_max", value)

    @property
    @pulumi.getter(name="chainingMode")
    def chaining_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "chaining_mode")

    @chaining_mode.setter
    def chaining_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chaining_mode", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="cpuRequest")
    def cpu_request(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpu_request")

    @cpu_request.setter
    def cpu_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_request", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter(name="disableCnpStatusUpdates")
    def disable_cnp_status_updates(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disable_cnp_status_updates")

    @disable_cnp_status_updates.setter
    def disable_cnp_status_updates(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_cnp_status_updates", value)

    @property
    @pulumi.getter(name="disableEndpointCrd")
    def disable_endpoint_crd(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disable_endpoint_crd")

    @disable_endpoint_crd.setter
    def disable_endpoint_crd(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_endpoint_crd", value)

    @property
    @pulumi.getter(name="enableBpfMasquerade")
    def enable_bpf_masquerade(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_bpf_masquerade")

    @enable_bpf_masquerade.setter
    def enable_bpf_masquerade(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_bpf_masquerade", value)

    @property
    @pulumi.getter(name="enableEncryption")
    def enable_encryption(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_encryption")

    @enable_encryption.setter
    def enable_encryption(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_encryption", value)

    @property
    @pulumi.getter(name="enableEndpointHealthChecking")
    def enable_endpoint_health_checking(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_endpoint_health_checking")

    @enable_endpoint_health_checking.setter
    def enable_endpoint_health_checking(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_endpoint_health_checking", value)

    @property
    @pulumi.getter(name="enableHostReachableServices")
    def enable_host_reachable_services(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_host_reachable_services")

    @enable_host_reachable_services.setter
    def enable_host_reachable_services(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_host_reachable_services", value)

    @property
    @pulumi.getter(name="enableL7Proxy")
    def enable_l7_proxy(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_l7_proxy")

    @enable_l7_proxy.setter
    def enable_l7_proxy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_l7_proxy", value)

    @property
    @pulumi.getter(name="enableNodePort")
    def enable_node_port(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_node_port")

    @enable_node_port.setter
    def enable_node_port(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_node_port", value)

    @property
    @pulumi.getter(name="enablePolicy")
    def enable_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enable_policy")

    @enable_policy.setter
    def enable_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enable_policy", value)

    @property
    @pulumi.getter(name="enablePrometheusMetrics")
    def enable_prometheus_metrics(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_prometheus_metrics")

    @enable_prometheus_metrics.setter
    def enable_prometheus_metrics(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_prometheus_metrics", value)

    @property
    @pulumi.getter(name="enableServiceTopology")
    def enable_service_topology(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_service_topology")

    @enable_service_topology.setter
    def enable_service_topology(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_service_topology", value)

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "encryption_type")

    @encryption_type.setter
    def encryption_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encryption_type", value)

    @property
    @pulumi.getter(name="etcdManaged")
    def etcd_managed(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "etcd_managed")

    @etcd_managed.setter
    def etcd_managed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "etcd_managed", value)

    @property
    @pulumi.getter
    def hubble(self) -> Optional[pulumi.Input['ClusterNetworkingCiliumHubbleArgs']]:
        return pulumi.get(self, "hubble")

    @hubble.setter
    def hubble(self, value: Optional[pulumi.Input['ClusterNetworkingCiliumHubbleArgs']]):
        pulumi.set(self, "hubble", value)

    @property
    @pulumi.getter(name="identityAllocationMode")
    def identity_allocation_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "identity_allocation_mode")

    @identity_allocation_mode.setter
    def identity_allocation_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_allocation_mode", value)

    @property
    @pulumi.getter(name="identityChangeGracePeriod")
    def identity_change_grace_period(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "identity_change_grace_period")

    @identity_change_grace_period.setter
    def identity_change_grace_period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_change_grace_period", value)

    @property
    @pulumi.getter(name="installIptablesRules")
    def install_iptables_rules(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "install_iptables_rules")

    @install_iptables_rules.setter
    def install_iptables_rules(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "install_iptables_rules", value)

    @property
    @pulumi.getter
    def ipam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipam")

    @ipam.setter
    def ipam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipam", value)

    @property
    @pulumi.getter
    def masquerade(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "masquerade")

    @masquerade.setter
    def masquerade(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "masquerade", value)

    @property
    @pulumi.getter(name="memoryRequest")
    def memory_request(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "memory_request")

    @memory_request.setter
    def memory_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory_request", value)

    @property
    @pulumi.getter
    def metrics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "metrics")

    @metrics.setter
    def metrics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "metrics", value)

    @property
    @pulumi.getter(name="monitorAggregation")
    def monitor_aggregation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "monitor_aggregation")

    @monitor_aggregation.setter
    def monitor_aggregation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor_aggregation", value)

    @property
    @pulumi.getter(name="sidecarIstioProxyImage")
    def sidecar_istio_proxy_image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sidecar_istio_proxy_image")

    @sidecar_istio_proxy_image.setter
    def sidecar_istio_proxy_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sidecar_istio_proxy_image", value)

    @property
    @pulumi.getter(name="toFqdnsDnsRejectResponseCode")
    def to_fqdns_dns_reject_response_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "to_fqdns_dns_reject_response_code")

    @to_fqdns_dns_reject_response_code.setter
    def to_fqdns_dns_reject_response_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "to_fqdns_dns_reject_response_code", value)

    @property
    @pulumi.getter(name="toFqdnsEnablePoller")
    def to_fqdns_enable_poller(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "to_fqdns_enable_poller")

    @to_fqdns_enable_poller.setter
    def to_fqdns_enable_poller(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "to_fqdns_enable_poller", value)

    @property
    @pulumi.getter
    def tunnel(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel")

    @tunnel.setter
    def tunnel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ClusterNetworkingCiliumHubbleArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 metrics: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def metrics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "metrics")

    @metrics.setter
    def metrics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "metrics", value)


@pulumi.input_type
class ClusterNetworkingClassicArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ClusterNetworkingCniArgs:
    def __init__(__self__, *,
                 uses_secondary_ip: Optional[pulumi.Input[bool]] = None):
        if uses_secondary_ip is not None:
            pulumi.set(__self__, "uses_secondary_ip", uses_secondary_ip)

    @property
    @pulumi.getter(name="usesSecondaryIp")
    def uses_secondary_ip(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "uses_secondary_ip")

    @uses_secondary_ip.setter
    def uses_secondary_ip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "uses_secondary_ip", value)


@pulumi.input_type
class ClusterNetworkingExternalArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ClusterNetworkingFlannelArgs:
    def __init__(__self__, *,
                 backend: Optional[pulumi.Input[str]] = None,
                 iptables_resync_seconds: Optional[pulumi.Input[int]] = None):
        if backend is not None:
            pulumi.set(__self__, "backend", backend)
        if iptables_resync_seconds is not None:
            pulumi.set(__self__, "iptables_resync_seconds", iptables_resync_seconds)

    @property
    @pulumi.getter
    def backend(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "backend")

    @backend.setter
    def backend(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backend", value)

    @property
    @pulumi.getter(name="iptablesResyncSeconds")
    def iptables_resync_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "iptables_resync_seconds")

    @iptables_resync_seconds.setter
    def iptables_resync_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "iptables_resync_seconds", value)


@pulumi.input_type
class ClusterNetworkingGceArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ClusterNetworkingKopeioArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ClusterNetworkingKubenetArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ClusterNetworkingKuberouterArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ClusterNetworkingLyftVpcArgs:
    def __init__(__self__, *,
                 subnet_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if subnet_tags is not None:
            pulumi.set(__self__, "subnet_tags", subnet_tags)

    @property
    @pulumi.getter(name="subnetTags")
    def subnet_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "subnet_tags")

    @subnet_tags.setter
    def subnet_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "subnet_tags", value)


@pulumi.input_type
class ClusterNetworkingRomanaArgs:
    def __init__(__self__, *,
                 daemon_service_ip: Optional[pulumi.Input[str]] = None,
                 etcd_service_ip: Optional[pulumi.Input[str]] = None):
        if daemon_service_ip is not None:
            pulumi.set(__self__, "daemon_service_ip", daemon_service_ip)
        if etcd_service_ip is not None:
            pulumi.set(__self__, "etcd_service_ip", etcd_service_ip)

    @property
    @pulumi.getter(name="daemonServiceIp")
    def daemon_service_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "daemon_service_ip")

    @daemon_service_ip.setter
    def daemon_service_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "daemon_service_ip", value)

    @property
    @pulumi.getter(name="etcdServiceIp")
    def etcd_service_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "etcd_service_ip")

    @etcd_service_ip.setter
    def etcd_service_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "etcd_service_ip", value)


@pulumi.input_type
class ClusterNetworkingWeaveArgs:
    def __init__(__self__, *,
                 conn_limit: Optional[pulumi.Input[int]] = None,
                 cpu_limit: Optional[pulumi.Input[str]] = None,
                 cpu_request: Optional[pulumi.Input[str]] = None,
                 memory_limit: Optional[pulumi.Input[str]] = None,
                 memory_request: Optional[pulumi.Input[str]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 net_extra_args: Optional[pulumi.Input[str]] = None,
                 no_masq_local: Optional[pulumi.Input[int]] = None,
                 npc_cpu_limit: Optional[pulumi.Input[str]] = None,
                 npc_cpu_request: Optional[pulumi.Input[str]] = None,
                 npc_extra_args: Optional[pulumi.Input[str]] = None,
                 npc_memory_limit: Optional[pulumi.Input[str]] = None,
                 npc_memory_request: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        if conn_limit is not None:
            pulumi.set(__self__, "conn_limit", conn_limit)
        if cpu_limit is not None:
            pulumi.set(__self__, "cpu_limit", cpu_limit)
        if cpu_request is not None:
            pulumi.set(__self__, "cpu_request", cpu_request)
        if memory_limit is not None:
            pulumi.set(__self__, "memory_limit", memory_limit)
        if memory_request is not None:
            pulumi.set(__self__, "memory_request", memory_request)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if net_extra_args is not None:
            pulumi.set(__self__, "net_extra_args", net_extra_args)
        if no_masq_local is not None:
            pulumi.set(__self__, "no_masq_local", no_masq_local)
        if npc_cpu_limit is not None:
            pulumi.set(__self__, "npc_cpu_limit", npc_cpu_limit)
        if npc_cpu_request is not None:
            pulumi.set(__self__, "npc_cpu_request", npc_cpu_request)
        if npc_extra_args is not None:
            pulumi.set(__self__, "npc_extra_args", npc_extra_args)
        if npc_memory_limit is not None:
            pulumi.set(__self__, "npc_memory_limit", npc_memory_limit)
        if npc_memory_request is not None:
            pulumi.set(__self__, "npc_memory_request", npc_memory_request)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="connLimit")
    def conn_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "conn_limit")

    @conn_limit.setter
    def conn_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "conn_limit", value)

    @property
    @pulumi.getter(name="cpuLimit")
    def cpu_limit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpu_limit")

    @cpu_limit.setter
    def cpu_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_limit", value)

    @property
    @pulumi.getter(name="cpuRequest")
    def cpu_request(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpu_request")

    @cpu_request.setter
    def cpu_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_request", value)

    @property
    @pulumi.getter(name="memoryLimit")
    def memory_limit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "memory_limit")

    @memory_limit.setter
    def memory_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory_limit", value)

    @property
    @pulumi.getter(name="memoryRequest")
    def memory_request(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "memory_request")

    @memory_request.setter
    def memory_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory_request", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter(name="netExtraArgs")
    def net_extra_args(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "net_extra_args")

    @net_extra_args.setter
    def net_extra_args(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "net_extra_args", value)

    @property
    @pulumi.getter(name="noMasqLocal")
    def no_masq_local(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "no_masq_local")

    @no_masq_local.setter
    def no_masq_local(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "no_masq_local", value)

    @property
    @pulumi.getter(name="npcCpuLimit")
    def npc_cpu_limit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "npc_cpu_limit")

    @npc_cpu_limit.setter
    def npc_cpu_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "npc_cpu_limit", value)

    @property
    @pulumi.getter(name="npcCpuRequest")
    def npc_cpu_request(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "npc_cpu_request")

    @npc_cpu_request.setter
    def npc_cpu_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "npc_cpu_request", value)

    @property
    @pulumi.getter(name="npcExtraArgs")
    def npc_extra_args(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "npc_extra_args")

    @npc_extra_args.setter
    def npc_extra_args(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "npc_extra_args", value)

    @property
    @pulumi.getter(name="npcMemoryLimit")
    def npc_memory_limit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "npc_memory_limit")

    @npc_memory_limit.setter
    def npc_memory_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "npc_memory_limit", value)

    @property
    @pulumi.getter(name="npcMemoryRequest")
    def npc_memory_request(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "npc_memory_request")

    @npc_memory_request.setter
    def npc_memory_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "npc_memory_request", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ClusterNodeAuthorizationArgs:
    def __init__(__self__, *,
                 node_authorizer: Optional[pulumi.Input['ClusterNodeAuthorizationNodeAuthorizerArgs']] = None):
        if node_authorizer is not None:
            pulumi.set(__self__, "node_authorizer", node_authorizer)

    @property
    @pulumi.getter(name="nodeAuthorizer")
    def node_authorizer(self) -> Optional[pulumi.Input['ClusterNodeAuthorizationNodeAuthorizerArgs']]:
        return pulumi.get(self, "node_authorizer")

    @node_authorizer.setter
    def node_authorizer(self, value: Optional[pulumi.Input['ClusterNodeAuthorizationNodeAuthorizerArgs']]):
        pulumi.set(self, "node_authorizer", value)


@pulumi.input_type
class ClusterNodeAuthorizationNodeAuthorizerArgs:
    def __init__(__self__, *,
                 authorizer: Optional[pulumi.Input[str]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[str]] = None,
                 node_url: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 timeout: Optional[pulumi.Input[str]] = None,
                 token_ttl: Optional[pulumi.Input[str]] = None):
        if authorizer is not None:
            pulumi.set(__self__, "authorizer", authorizer)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if node_url is not None:
            pulumi.set(__self__, "node_url", node_url)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if token_ttl is not None:
            pulumi.set(__self__, "token_ttl", token_ttl)

    @property
    @pulumi.getter
    def authorizer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authorizer")

    @authorizer.setter
    def authorizer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorizer", value)

    @property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "features", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter(name="nodeUrl")
    def node_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "node_url")

    @node_url.setter
    def node_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_url", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter(name="tokenTtl")
    def token_ttl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "token_ttl")

    @token_ttl.setter
    def token_ttl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_ttl", value)


@pulumi.input_type
class ClusterNodeProblemDetectorArgs:
    def __init__(__self__, *,
                 cpu_limit: Optional[pulumi.Input[str]] = None,
                 cpu_request: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 memory_limit: Optional[pulumi.Input[str]] = None,
                 memory_request: Optional[pulumi.Input[str]] = None):
        if cpu_limit is not None:
            pulumi.set(__self__, "cpu_limit", cpu_limit)
        if cpu_request is not None:
            pulumi.set(__self__, "cpu_request", cpu_request)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if memory_limit is not None:
            pulumi.set(__self__, "memory_limit", memory_limit)
        if memory_request is not None:
            pulumi.set(__self__, "memory_request", memory_request)

    @property
    @pulumi.getter(name="cpuLimit")
    def cpu_limit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpu_limit")

    @cpu_limit.setter
    def cpu_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_limit", value)

    @property
    @pulumi.getter(name="cpuRequest")
    def cpu_request(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpu_request")

    @cpu_request.setter
    def cpu_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_request", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="memoryLimit")
    def memory_limit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "memory_limit")

    @memory_limit.setter
    def memory_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory_limit", value)

    @property
    @pulumi.getter(name="memoryRequest")
    def memory_request(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "memory_request")

    @memory_request.setter
    def memory_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory_request", value)


@pulumi.input_type
class ClusterNodeTerminationHandlerArgs:
    def __init__(__self__, *,
                 enable_spot_interruption_draining: pulumi.Input[bool],
                 enabled: pulumi.Input[bool],
                 cpu_request: Optional[pulumi.Input[str]] = None,
                 enable_prometheus_metrics: Optional[pulumi.Input[bool]] = None,
                 enable_rebalance_draining: Optional[pulumi.Input[bool]] = None,
                 enable_rebalance_monitoring: Optional[pulumi.Input[bool]] = None,
                 enable_scheduled_event_draining: Optional[pulumi.Input[bool]] = None,
                 enable_sqs_termination_draining: Optional[pulumi.Input[bool]] = None,
                 exclude_from_load_balancers: Optional[pulumi.Input[bool]] = None,
                 managed_asg_tag: Optional[pulumi.Input[str]] = None,
                 memory_request: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "enable_spot_interruption_draining", enable_spot_interruption_draining)
        pulumi.set(__self__, "enabled", enabled)
        if cpu_request is not None:
            pulumi.set(__self__, "cpu_request", cpu_request)
        if enable_prometheus_metrics is not None:
            pulumi.set(__self__, "enable_prometheus_metrics", enable_prometheus_metrics)
        if enable_rebalance_draining is not None:
            pulumi.set(__self__, "enable_rebalance_draining", enable_rebalance_draining)
        if enable_rebalance_monitoring is not None:
            pulumi.set(__self__, "enable_rebalance_monitoring", enable_rebalance_monitoring)
        if enable_scheduled_event_draining is not None:
            pulumi.set(__self__, "enable_scheduled_event_draining", enable_scheduled_event_draining)
        if enable_sqs_termination_draining is not None:
            pulumi.set(__self__, "enable_sqs_termination_draining", enable_sqs_termination_draining)
        if exclude_from_load_balancers is not None:
            pulumi.set(__self__, "exclude_from_load_balancers", exclude_from_load_balancers)
        if managed_asg_tag is not None:
            pulumi.set(__self__, "managed_asg_tag", managed_asg_tag)
        if memory_request is not None:
            pulumi.set(__self__, "memory_request", memory_request)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="enableSpotInterruptionDraining")
    def enable_spot_interruption_draining(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enable_spot_interruption_draining")

    @enable_spot_interruption_draining.setter
    def enable_spot_interruption_draining(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_spot_interruption_draining", value)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="cpuRequest")
    def cpu_request(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpu_request")

    @cpu_request.setter
    def cpu_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_request", value)

    @property
    @pulumi.getter(name="enablePrometheusMetrics")
    def enable_prometheus_metrics(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_prometheus_metrics")

    @enable_prometheus_metrics.setter
    def enable_prometheus_metrics(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_prometheus_metrics", value)

    @property
    @pulumi.getter(name="enableRebalanceDraining")
    def enable_rebalance_draining(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_rebalance_draining")

    @enable_rebalance_draining.setter
    def enable_rebalance_draining(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_rebalance_draining", value)

    @property
    @pulumi.getter(name="enableRebalanceMonitoring")
    def enable_rebalance_monitoring(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_rebalance_monitoring")

    @enable_rebalance_monitoring.setter
    def enable_rebalance_monitoring(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_rebalance_monitoring", value)

    @property
    @pulumi.getter(name="enableScheduledEventDraining")
    def enable_scheduled_event_draining(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_scheduled_event_draining")

    @enable_scheduled_event_draining.setter
    def enable_scheduled_event_draining(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_scheduled_event_draining", value)

    @property
    @pulumi.getter(name="enableSqsTerminationDraining")
    def enable_sqs_termination_draining(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_sqs_termination_draining")

    @enable_sqs_termination_draining.setter
    def enable_sqs_termination_draining(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_sqs_termination_draining", value)

    @property
    @pulumi.getter(name="excludeFromLoadBalancers")
    def exclude_from_load_balancers(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "exclude_from_load_balancers")

    @exclude_from_load_balancers.setter
    def exclude_from_load_balancers(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "exclude_from_load_balancers", value)

    @property
    @pulumi.getter(name="managedAsgTag")
    def managed_asg_tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "managed_asg_tag")

    @managed_asg_tag.setter
    def managed_asg_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "managed_asg_tag", value)

    @property
    @pulumi.getter(name="memoryRequest")
    def memory_request(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "memory_request")

    @memory_request.setter
    def memory_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory_request", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ClusterNtpArgs:
    def __init__(__self__, *,
                 managed: Optional[pulumi.Input[bool]] = None):
        if managed is not None:
            pulumi.set(__self__, "managed", managed)

    @property
    @pulumi.getter
    def managed(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "managed")

    @managed.setter
    def managed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "managed", value)


@pulumi.input_type
class ClusterPodIdentityWebhookArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 replicas: Optional[pulumi.Input[int]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)


@pulumi.input_type
class ClusterRollingUpdateArgs:
    def __init__(__self__, *,
                 drain_and_terminate: Optional[pulumi.Input[bool]] = None,
                 max_surge: Optional[pulumi.Input[str]] = None,
                 max_unavailable: Optional[pulumi.Input[str]] = None):
        if drain_and_terminate is not None:
            pulumi.set(__self__, "drain_and_terminate", drain_and_terminate)
        if max_surge is not None:
            pulumi.set(__self__, "max_surge", max_surge)
        if max_unavailable is not None:
            pulumi.set(__self__, "max_unavailable", max_unavailable)

    @property
    @pulumi.getter(name="drainAndTerminate")
    def drain_and_terminate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "drain_and_terminate")

    @drain_and_terminate.setter
    def drain_and_terminate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "drain_and_terminate", value)

    @property
    @pulumi.getter(name="maxSurge")
    def max_surge(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_surge")

    @max_surge.setter
    def max_surge(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_surge", value)

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_unavailable")

    @max_unavailable.setter
    def max_unavailable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_unavailable", value)


@pulumi.input_type
class ClusterSecretsArgs:
    def __init__(__self__, *,
                 cluster_ca_cert: Optional[pulumi.Input[str]] = None,
                 cluster_ca_key: Optional[pulumi.Input[str]] = None,
                 docker_config: Optional[pulumi.Input[str]] = None):
        if cluster_ca_cert is not None:
            pulumi.set(__self__, "cluster_ca_cert", cluster_ca_cert)
        if cluster_ca_key is not None:
            pulumi.set(__self__, "cluster_ca_key", cluster_ca_key)
        if docker_config is not None:
            pulumi.set(__self__, "docker_config", docker_config)

    @property
    @pulumi.getter(name="clusterCaCert")
    def cluster_ca_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_ca_cert")

    @cluster_ca_cert.setter
    def cluster_ca_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_ca_cert", value)

    @property
    @pulumi.getter(name="clusterCaKey")
    def cluster_ca_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_ca_key")

    @cluster_ca_key.setter
    def cluster_ca_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_ca_key", value)

    @property
    @pulumi.getter(name="dockerConfig")
    def docker_config(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "docker_config")

    @docker_config.setter
    def docker_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "docker_config", value)


@pulumi.input_type
class ClusterServiceAccountIssuerDiscoveryArgs:
    def __init__(__self__, *,
                 additional_audiences: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 discovery_store: Optional[pulumi.Input[str]] = None,
                 enable_aws_oidc_provider: Optional[pulumi.Input[bool]] = None):
        if additional_audiences is not None:
            pulumi.set(__self__, "additional_audiences", additional_audiences)
        if discovery_store is not None:
            pulumi.set(__self__, "discovery_store", discovery_store)
        if enable_aws_oidc_provider is not None:
            pulumi.set(__self__, "enable_aws_oidc_provider", enable_aws_oidc_provider)

    @property
    @pulumi.getter(name="additionalAudiences")
    def additional_audiences(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "additional_audiences")

    @additional_audiences.setter
    def additional_audiences(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "additional_audiences", value)

    @property
    @pulumi.getter(name="discoveryStore")
    def discovery_store(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "discovery_store")

    @discovery_store.setter
    def discovery_store(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "discovery_store", value)

    @property
    @pulumi.getter(name="enableAwsOidcProvider")
    def enable_aws_oidc_provider(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_aws_oidc_provider")

    @enable_aws_oidc_provider.setter
    def enable_aws_oidc_provider(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_aws_oidc_provider", value)


@pulumi.input_type
class ClusterSnapshotControllerArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 install_default_class: Optional[pulumi.Input[bool]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if install_default_class is not None:
            pulumi.set(__self__, "install_default_class", install_default_class)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="installDefaultClass")
    def install_default_class(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "install_default_class")

    @install_default_class.setter
    def install_default_class(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "install_default_class", value)


@pulumi.input_type
class ClusterSubnetArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 provider_id: pulumi.Input[str],
                 type: pulumi.Input[str],
                 zone: pulumi.Input[str],
                 additional_routes: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterSubnetAdditionalRouteArgs']]]] = None,
                 cidr: Optional[pulumi.Input[str]] = None,
                 egress: Optional[pulumi.Input[str]] = None,
                 ipv6_cidr: Optional[pulumi.Input[str]] = None,
                 public_ip: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: - (Force new) - String - Name defines the cluster name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "provider_id", provider_id)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "zone", zone)
        if additional_routes is not None:
            pulumi.set(__self__, "additional_routes", additional_routes)
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)
        if egress is not None:
            pulumi.set(__self__, "egress", egress)
        if ipv6_cidr is not None:
            pulumi.set(__self__, "ipv6_cidr", ipv6_cidr)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        - (Force new) - String - Name defines the cluster name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="providerId")
    def provider_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "provider_id")

    @provider_id.setter
    def provider_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "provider_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Input[str]:
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone", value)

    @property
    @pulumi.getter(name="additionalRoutes")
    def additional_routes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterSubnetAdditionalRouteArgs']]]]:
        return pulumi.get(self, "additional_routes")

    @additional_routes.setter
    def additional_routes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterSubnetAdditionalRouteArgs']]]]):
        pulumi.set(self, "additional_routes", value)

    @property
    @pulumi.getter
    def cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cidr", value)

    @property
    @pulumi.getter
    def egress(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "egress")

    @egress.setter
    def egress(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress", value)

    @property
    @pulumi.getter(name="ipv6Cidr")
    def ipv6_cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_cidr")

    @ipv6_cidr.setter
    def ipv6_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_cidr", value)

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_ip", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class ClusterSubnetAdditionalRouteArgs:
    def __init__(__self__, *,
                 cidr: Optional[pulumi.Input[str]] = None,
                 target: Optional[pulumi.Input[str]] = None):
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cidr", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target", value)


@pulumi.input_type
class ClusterTagSubnetsArgs:
    def __init__(__self__, *,
                 value: Optional[pulumi.Input[bool]] = None):
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ClusterTopologyArgs:
    def __init__(__self__, *,
                 dns: pulumi.Input['ClusterTopologyDnsArgs'],
                 masters: pulumi.Input[str],
                 nodes: pulumi.Input[str],
                 bastion: Optional[pulumi.Input['ClusterTopologyBastionArgs']] = None):
        pulumi.set(__self__, "dns", dns)
        pulumi.set(__self__, "masters", masters)
        pulumi.set(__self__, "nodes", nodes)
        if bastion is not None:
            pulumi.set(__self__, "bastion", bastion)

    @property
    @pulumi.getter
    def dns(self) -> pulumi.Input['ClusterTopologyDnsArgs']:
        return pulumi.get(self, "dns")

    @dns.setter
    def dns(self, value: pulumi.Input['ClusterTopologyDnsArgs']):
        pulumi.set(self, "dns", value)

    @property
    @pulumi.getter
    def masters(self) -> pulumi.Input[str]:
        return pulumi.get(self, "masters")

    @masters.setter
    def masters(self, value: pulumi.Input[str]):
        pulumi.set(self, "masters", value)

    @property
    @pulumi.getter
    def nodes(self) -> pulumi.Input[str]:
        return pulumi.get(self, "nodes")

    @nodes.setter
    def nodes(self, value: pulumi.Input[str]):
        pulumi.set(self, "nodes", value)

    @property
    @pulumi.getter
    def bastion(self) -> Optional[pulumi.Input['ClusterTopologyBastionArgs']]:
        return pulumi.get(self, "bastion")

    @bastion.setter
    def bastion(self, value: Optional[pulumi.Input['ClusterTopologyBastionArgs']]):
        pulumi.set(self, "bastion", value)


@pulumi.input_type
class ClusterTopologyBastionArgs:
    def __init__(__self__, *,
                 bastion_public_name: pulumi.Input[str],
                 idle_timeout_seconds: Optional[pulumi.Input[int]] = None,
                 load_balancer: Optional[pulumi.Input['ClusterTopologyBastionLoadBalancerArgs']] = None):
        pulumi.set(__self__, "bastion_public_name", bastion_public_name)
        if idle_timeout_seconds is not None:
            pulumi.set(__self__, "idle_timeout_seconds", idle_timeout_seconds)
        if load_balancer is not None:
            pulumi.set(__self__, "load_balancer", load_balancer)

    @property
    @pulumi.getter(name="bastionPublicName")
    def bastion_public_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bastion_public_name")

    @bastion_public_name.setter
    def bastion_public_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "bastion_public_name", value)

    @property
    @pulumi.getter(name="idleTimeoutSeconds")
    def idle_timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "idle_timeout_seconds")

    @idle_timeout_seconds.setter
    def idle_timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "idle_timeout_seconds", value)

    @property
    @pulumi.getter(name="loadBalancer")
    def load_balancer(self) -> Optional[pulumi.Input['ClusterTopologyBastionLoadBalancerArgs']]:
        return pulumi.get(self, "load_balancer")

    @load_balancer.setter
    def load_balancer(self, value: Optional[pulumi.Input['ClusterTopologyBastionLoadBalancerArgs']]):
        pulumi.set(self, "load_balancer", value)


@pulumi.input_type
class ClusterTopologyBastionLoadBalancerArgs:
    def __init__(__self__, *,
                 additional_security_groups: pulumi.Input[Sequence[pulumi.Input[str]]],
                 type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "additional_security_groups", additional_security_groups)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="additionalSecurityGroups")
    def additional_security_groups(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "additional_security_groups")

    @additional_security_groups.setter
    def additional_security_groups(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "additional_security_groups", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ClusterTopologyDnsArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str]):
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ClusterUpdaterApplyArgs:
    def __init__(__self__, *,
                 allow_kops_downgrade: Optional[pulumi.Input[bool]] = None,
                 lifecycle_overrides: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 skip: Optional[pulumi.Input[bool]] = None):
        if allow_kops_downgrade is not None:
            pulumi.set(__self__, "allow_kops_downgrade", allow_kops_downgrade)
        if lifecycle_overrides is not None:
            pulumi.set(__self__, "lifecycle_overrides", lifecycle_overrides)
        if skip is not None:
            pulumi.set(__self__, "skip", skip)

    @property
    @pulumi.getter(name="allowKopsDowngrade")
    def allow_kops_downgrade(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_kops_downgrade")

    @allow_kops_downgrade.setter
    def allow_kops_downgrade(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_kops_downgrade", value)

    @property
    @pulumi.getter(name="lifecycleOverrides")
    def lifecycle_overrides(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "lifecycle_overrides")

    @lifecycle_overrides.setter
    def lifecycle_overrides(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "lifecycle_overrides", value)

    @property
    @pulumi.getter
    def skip(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "skip")

    @skip.setter
    def skip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip", value)


@pulumi.input_type
class ClusterUpdaterRollingUpdateArgs:
    def __init__(__self__, *,
                 bastion_interval: Optional[pulumi.Input[str]] = None,
                 cloud_only: Optional[pulumi.Input[bool]] = None,
                 fail_on_drain_error: Optional[pulumi.Input[bool]] = None,
                 fail_on_validate: Optional[pulumi.Input[bool]] = None,
                 force: Optional[pulumi.Input[bool]] = None,
                 master_interval: Optional[pulumi.Input[str]] = None,
                 node_interval: Optional[pulumi.Input[str]] = None,
                 post_drain_delay: Optional[pulumi.Input[str]] = None,
                 skip: Optional[pulumi.Input[bool]] = None,
                 validate_count: Optional[pulumi.Input[int]] = None,
                 validation_timeout: Optional[pulumi.Input[str]] = None):
        if bastion_interval is not None:
            pulumi.set(__self__, "bastion_interval", bastion_interval)
        if cloud_only is not None:
            pulumi.set(__self__, "cloud_only", cloud_only)
        if fail_on_drain_error is not None:
            pulumi.set(__self__, "fail_on_drain_error", fail_on_drain_error)
        if fail_on_validate is not None:
            pulumi.set(__self__, "fail_on_validate", fail_on_validate)
        if force is not None:
            pulumi.set(__self__, "force", force)
        if master_interval is not None:
            pulumi.set(__self__, "master_interval", master_interval)
        if node_interval is not None:
            pulumi.set(__self__, "node_interval", node_interval)
        if post_drain_delay is not None:
            pulumi.set(__self__, "post_drain_delay", post_drain_delay)
        if skip is not None:
            pulumi.set(__self__, "skip", skip)
        if validate_count is not None:
            pulumi.set(__self__, "validate_count", validate_count)
        if validation_timeout is not None:
            pulumi.set(__self__, "validation_timeout", validation_timeout)

    @property
    @pulumi.getter(name="bastionInterval")
    def bastion_interval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bastion_interval")

    @bastion_interval.setter
    def bastion_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bastion_interval", value)

    @property
    @pulumi.getter(name="cloudOnly")
    def cloud_only(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "cloud_only")

    @cloud_only.setter
    def cloud_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cloud_only", value)

    @property
    @pulumi.getter(name="failOnDrainError")
    def fail_on_drain_error(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "fail_on_drain_error")

    @fail_on_drain_error.setter
    def fail_on_drain_error(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fail_on_drain_error", value)

    @property
    @pulumi.getter(name="failOnValidate")
    def fail_on_validate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "fail_on_validate")

    @fail_on_validate.setter
    def fail_on_validate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fail_on_validate", value)

    @property
    @pulumi.getter
    def force(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "force")

    @force.setter
    def force(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force", value)

    @property
    @pulumi.getter(name="masterInterval")
    def master_interval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "master_interval")

    @master_interval.setter
    def master_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "master_interval", value)

    @property
    @pulumi.getter(name="nodeInterval")
    def node_interval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "node_interval")

    @node_interval.setter
    def node_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_interval", value)

    @property
    @pulumi.getter(name="postDrainDelay")
    def post_drain_delay(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "post_drain_delay")

    @post_drain_delay.setter
    def post_drain_delay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "post_drain_delay", value)

    @property
    @pulumi.getter
    def skip(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "skip")

    @skip.setter
    def skip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip", value)

    @property
    @pulumi.getter(name="validateCount")
    def validate_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "validate_count")

    @validate_count.setter
    def validate_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "validate_count", value)

    @property
    @pulumi.getter(name="validationTimeout")
    def validation_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "validation_timeout")

    @validation_timeout.setter
    def validation_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "validation_timeout", value)


@pulumi.input_type
class ClusterUpdaterValidateArgs:
    def __init__(__self__, *,
                 poll_interval: Optional[pulumi.Input[str]] = None,
                 skip: Optional[pulumi.Input[bool]] = None,
                 timeout: Optional[pulumi.Input[str]] = None):
        if poll_interval is not None:
            pulumi.set(__self__, "poll_interval", poll_interval)
        if skip is not None:
            pulumi.set(__self__, "skip", skip)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter(name="pollInterval")
    def poll_interval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "poll_interval")

    @poll_interval.setter
    def poll_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "poll_interval", value)

    @property
    @pulumi.getter
    def skip(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "skip")

    @skip.setter
    def skip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class ClusterWarmPoolArgs:
    def __init__(__self__, *,
                 enable_lifecycle_hook: Optional[pulumi.Input[bool]] = None,
                 max_size: Optional[pulumi.Input[int]] = None,
                 min_size: Optional[pulumi.Input[int]] = None):
        if enable_lifecycle_hook is not None:
            pulumi.set(__self__, "enable_lifecycle_hook", enable_lifecycle_hook)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if min_size is not None:
            pulumi.set(__self__, "min_size", min_size)

    @property
    @pulumi.getter(name="enableLifecycleHook")
    def enable_lifecycle_hook(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_lifecycle_hook")

    @enable_lifecycle_hook.setter
    def enable_lifecycle_hook(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_lifecycle_hook", value)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_size", value)

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_size")

    @min_size.setter
    def min_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_size", value)


@pulumi.input_type
class InstanceGroupAdditionalUserDataArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 name: pulumi.Input[str],
                 type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: - (Force new) - String - Name defines the instance group name.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        - (Force new) - String - Name defines the instance group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class InstanceGroupContainerdArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None,
                 config_override: Optional[pulumi.Input[str]] = None,
                 log_level: Optional[pulumi.Input[str]] = None,
                 nvidia_gpu: Optional[pulumi.Input['InstanceGroupContainerdNvidiaGpuArgs']] = None,
                 packages: Optional[pulumi.Input['InstanceGroupContainerdPackagesArgs']] = None,
                 registry_mirrors: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceGroupContainerdRegistryMirrorArgs']]]] = None,
                 root: Optional[pulumi.Input[str]] = None,
                 runc: Optional[pulumi.Input['InstanceGroupContainerdRuncArgs']] = None,
                 skip_install: Optional[pulumi.Input[bool]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['InstanceGroupContainerdPackagesArgs'] packages: - List(String) - Packages specifies additional packages to be installed.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if config_override is not None:
            pulumi.set(__self__, "config_override", config_override)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)
        if nvidia_gpu is not None:
            pulumi.set(__self__, "nvidia_gpu", nvidia_gpu)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if registry_mirrors is not None:
            pulumi.set(__self__, "registry_mirrors", registry_mirrors)
        if root is not None:
            pulumi.set(__self__, "root", root)
        if runc is not None:
            pulumi.set(__self__, "runc", runc)
        if skip_install is not None:
            pulumi.set(__self__, "skip_install", skip_install)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="configOverride")
    def config_override(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "config_override")

    @config_override.setter
    def config_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_override", value)

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_level")

    @log_level.setter
    def log_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_level", value)

    @property
    @pulumi.getter(name="nvidiaGpu")
    def nvidia_gpu(self) -> Optional[pulumi.Input['InstanceGroupContainerdNvidiaGpuArgs']]:
        return pulumi.get(self, "nvidia_gpu")

    @nvidia_gpu.setter
    def nvidia_gpu(self, value: Optional[pulumi.Input['InstanceGroupContainerdNvidiaGpuArgs']]):
        pulumi.set(self, "nvidia_gpu", value)

    @property
    @pulumi.getter
    def packages(self) -> Optional[pulumi.Input['InstanceGroupContainerdPackagesArgs']]:
        """
        - List(String) - Packages specifies additional packages to be installed.
        """
        return pulumi.get(self, "packages")

    @packages.setter
    def packages(self, value: Optional[pulumi.Input['InstanceGroupContainerdPackagesArgs']]):
        pulumi.set(self, "packages", value)

    @property
    @pulumi.getter(name="registryMirrors")
    def registry_mirrors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceGroupContainerdRegistryMirrorArgs']]]]:
        return pulumi.get(self, "registry_mirrors")

    @registry_mirrors.setter
    def registry_mirrors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceGroupContainerdRegistryMirrorArgs']]]]):
        pulumi.set(self, "registry_mirrors", value)

    @property
    @pulumi.getter
    def root(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "root")

    @root.setter
    def root(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root", value)

    @property
    @pulumi.getter
    def runc(self) -> Optional[pulumi.Input['InstanceGroupContainerdRuncArgs']]:
        return pulumi.get(self, "runc")

    @runc.setter
    def runc(self, value: Optional[pulumi.Input['InstanceGroupContainerdRuncArgs']]):
        pulumi.set(self, "runc", value)

    @property
    @pulumi.getter(name="skipInstall")
    def skip_install(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "skip_install")

    @skip_install.setter
    def skip_install(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_install", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class InstanceGroupContainerdNvidiaGpuArgs:
    def __init__(__self__, *,
                 driver_package: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if driver_package is not None:
            pulumi.set(__self__, "driver_package", driver_package)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="driverPackage")
    def driver_package(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "driver_package")

    @driver_package.setter
    def driver_package(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "driver_package", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class InstanceGroupContainerdPackagesArgs:
    def __init__(__self__, *,
                 hash_amd64: Optional[pulumi.Input[str]] = None,
                 hash_arm64: Optional[pulumi.Input[str]] = None,
                 url_amd64: Optional[pulumi.Input[str]] = None,
                 url_arm64: Optional[pulumi.Input[str]] = None):
        if hash_amd64 is not None:
            pulumi.set(__self__, "hash_amd64", hash_amd64)
        if hash_arm64 is not None:
            pulumi.set(__self__, "hash_arm64", hash_arm64)
        if url_amd64 is not None:
            pulumi.set(__self__, "url_amd64", url_amd64)
        if url_arm64 is not None:
            pulumi.set(__self__, "url_arm64", url_arm64)

    @property
    @pulumi.getter(name="hashAmd64")
    def hash_amd64(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hash_amd64")

    @hash_amd64.setter
    def hash_amd64(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hash_amd64", value)

    @property
    @pulumi.getter(name="hashArm64")
    def hash_arm64(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hash_arm64")

    @hash_arm64.setter
    def hash_arm64(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hash_arm64", value)

    @property
    @pulumi.getter(name="urlAmd64")
    def url_amd64(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url_amd64")

    @url_amd64.setter
    def url_amd64(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_amd64", value)

    @property
    @pulumi.getter(name="urlArm64")
    def url_arm64(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url_arm64")

    @url_arm64.setter
    def url_arm64(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_arm64", value)


@pulumi.input_type
class InstanceGroupContainerdRegistryMirrorArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class InstanceGroupContainerdRuncArgs:
    def __init__(__self__, *,
                 packages: Optional[pulumi.Input['InstanceGroupContainerdRuncPackagesArgs']] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['InstanceGroupContainerdRuncPackagesArgs'] packages: - List(String) - Packages specifies additional packages to be installed.
        """
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def packages(self) -> Optional[pulumi.Input['InstanceGroupContainerdRuncPackagesArgs']]:
        """
        - List(String) - Packages specifies additional packages to be installed.
        """
        return pulumi.get(self, "packages")

    @packages.setter
    def packages(self, value: Optional[pulumi.Input['InstanceGroupContainerdRuncPackagesArgs']]):
        pulumi.set(self, "packages", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class InstanceGroupContainerdRuncPackagesArgs:
    def __init__(__self__, *,
                 hash_amd64: Optional[pulumi.Input[str]] = None,
                 hash_arm64: Optional[pulumi.Input[str]] = None,
                 url_amd64: Optional[pulumi.Input[str]] = None,
                 url_arm64: Optional[pulumi.Input[str]] = None):
        if hash_amd64 is not None:
            pulumi.set(__self__, "hash_amd64", hash_amd64)
        if hash_arm64 is not None:
            pulumi.set(__self__, "hash_arm64", hash_arm64)
        if url_amd64 is not None:
            pulumi.set(__self__, "url_amd64", url_amd64)
        if url_arm64 is not None:
            pulumi.set(__self__, "url_arm64", url_arm64)

    @property
    @pulumi.getter(name="hashAmd64")
    def hash_amd64(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hash_amd64")

    @hash_amd64.setter
    def hash_amd64(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hash_amd64", value)

    @property
    @pulumi.getter(name="hashArm64")
    def hash_arm64(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hash_arm64")

    @hash_arm64.setter
    def hash_arm64(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hash_arm64", value)

    @property
    @pulumi.getter(name="urlAmd64")
    def url_amd64(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url_amd64")

    @url_amd64.setter
    def url_amd64(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_amd64", value)

    @property
    @pulumi.getter(name="urlArm64")
    def url_arm64(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url_arm64")

    @url_arm64.setter
    def url_arm64(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_arm64", value)


@pulumi.input_type
class InstanceGroupExternalLoadBalancerArgs:
    def __init__(__self__, *,
                 load_balancer_name: Optional[pulumi.Input[str]] = None,
                 target_group_arn: Optional[pulumi.Input[str]] = None):
        if load_balancer_name is not None:
            pulumi.set(__self__, "load_balancer_name", load_balancer_name)
        if target_group_arn is not None:
            pulumi.set(__self__, "target_group_arn", target_group_arn)

    @property
    @pulumi.getter(name="loadBalancerName")
    def load_balancer_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "load_balancer_name")

    @load_balancer_name.setter
    def load_balancer_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancer_name", value)

    @property
    @pulumi.getter(name="targetGroupArn")
    def target_group_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target_group_arn")

    @target_group_arn.setter
    def target_group_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_group_arn", value)


@pulumi.input_type
class InstanceGroupFileAssetArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 name: pulumi.Input[str],
                 path: pulumi.Input[str],
                 is_base64: Optional[pulumi.Input[bool]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: - (Force new) - String - Name defines the instance group name.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)
        if is_base64 is not None:
            pulumi.set(__self__, "is_base64", is_base64)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        - (Force new) - String - Name defines the instance group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="isBase64")
    def is_base64(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_base64")

    @is_base64.setter
    def is_base64(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_base64", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "roles", value)


@pulumi.input_type
class InstanceGroupGuestAcceleratorArgs:
    def __init__(__self__, *,
                 accelerator_count: Optional[pulumi.Input[int]] = None,
                 accelerator_type: Optional[pulumi.Input[str]] = None):
        if accelerator_count is not None:
            pulumi.set(__self__, "accelerator_count", accelerator_count)
        if accelerator_type is not None:
            pulumi.set(__self__, "accelerator_type", accelerator_type)

    @property
    @pulumi.getter(name="acceleratorCount")
    def accelerator_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "accelerator_count")

    @accelerator_count.setter
    def accelerator_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "accelerator_count", value)

    @property
    @pulumi.getter(name="acceleratorType")
    def accelerator_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "accelerator_type")

    @accelerator_type.setter
    def accelerator_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accelerator_type", value)


@pulumi.input_type
class InstanceGroupHookArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 befores: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 exec_container: Optional[pulumi.Input['InstanceGroupHookExecContainerArgs']] = None,
                 manifest: Optional[pulumi.Input[str]] = None,
                 requires: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 use_raw_manifest: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] name: - (Force new) - String - Name defines the instance group name.
        """
        pulumi.set(__self__, "name", name)
        if befores is not None:
            pulumi.set(__self__, "befores", befores)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exec_container is not None:
            pulumi.set(__self__, "exec_container", exec_container)
        if manifest is not None:
            pulumi.set(__self__, "manifest", manifest)
        if requires is not None:
            pulumi.set(__self__, "requires", requires)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if use_raw_manifest is not None:
            pulumi.set(__self__, "use_raw_manifest", use_raw_manifest)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        - (Force new) - String - Name defines the instance group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def befores(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "befores")

    @befores.setter
    def befores(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "befores", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="execContainer")
    def exec_container(self) -> Optional[pulumi.Input['InstanceGroupHookExecContainerArgs']]:
        return pulumi.get(self, "exec_container")

    @exec_container.setter
    def exec_container(self, value: Optional[pulumi.Input['InstanceGroupHookExecContainerArgs']]):
        pulumi.set(self, "exec_container", value)

    @property
    @pulumi.getter
    def manifest(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "manifest")

    @manifest.setter
    def manifest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "manifest", value)

    @property
    @pulumi.getter
    def requires(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "requires")

    @requires.setter
    def requires(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "requires", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter(name="useRawManifest")
    def use_raw_manifest(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_raw_manifest")

    @use_raw_manifest.setter
    def use_raw_manifest(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_raw_manifest", value)


@pulumi.input_type
class InstanceGroupHookExecContainerArgs:
    def __init__(__self__, *,
                 image: pulumi.Input[str],
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 environment: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] image: - (Computed) - String - Image is the instance (ami etc) we should use.
        """
        pulumi.set(__self__, "image", image)
        if commands is not None:
            pulumi.set(__self__, "commands", commands)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)

    @property
    @pulumi.getter
    def image(self) -> pulumi.Input[str]:
        """
        - (Computed) - String - Image is the instance (ami etc) we should use.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: pulumi.Input[str]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "commands", value)

    @property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "environment", value)


@pulumi.input_type
class InstanceGroupIamArgs:
    def __init__(__self__, *,
                 profile: pulumi.Input[str]):
        pulumi.set(__self__, "profile", profile)

    @property
    @pulumi.getter
    def profile(self) -> pulumi.Input[str]:
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: pulumi.Input[str]):
        pulumi.set(self, "profile", value)


@pulumi.input_type
class InstanceGroupInstanceMetadataArgs:
    def __init__(__self__, *,
                 http_put_response_hop_limit: Optional[pulumi.Input[int]] = None,
                 http_tokens: Optional[pulumi.Input[str]] = None):
        if http_put_response_hop_limit is not None:
            pulumi.set(__self__, "http_put_response_hop_limit", http_put_response_hop_limit)
        if http_tokens is not None:
            pulumi.set(__self__, "http_tokens", http_tokens)

    @property
    @pulumi.getter(name="httpPutResponseHopLimit")
    def http_put_response_hop_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "http_put_response_hop_limit")

    @http_put_response_hop_limit.setter
    def http_put_response_hop_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_put_response_hop_limit", value)

    @property
    @pulumi.getter(name="httpTokens")
    def http_tokens(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_tokens")

    @http_tokens.setter
    def http_tokens(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_tokens", value)


@pulumi.input_type
class InstanceGroupKubeletArgs:
    def __init__(__self__, *,
                 allow_privileged: Optional[pulumi.Input[bool]] = None,
                 allowed_unsafe_sysctls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 anonymous_auth: Optional[pulumi.Input['InstanceGroupKubeletAnonymousAuthArgs']] = None,
                 api_servers: Optional[pulumi.Input[str]] = None,
                 authentication_token_webhook: Optional[pulumi.Input[bool]] = None,
                 authentication_token_webhook_cache_ttl: Optional[pulumi.Input[str]] = None,
                 authorization_mode: Optional[pulumi.Input[str]] = None,
                 babysit_daemons: Optional[pulumi.Input[bool]] = None,
                 bootstrap_kubeconfig: Optional[pulumi.Input[str]] = None,
                 cgroup_driver: Optional[pulumi.Input[str]] = None,
                 cgroup_root: Optional[pulumi.Input[str]] = None,
                 client_ca_file: Optional[pulumi.Input[str]] = None,
                 cloud_provider: Optional[pulumi.Input[str]] = None,
                 cluster_dns: Optional[pulumi.Input[str]] = None,
                 cluster_domain: Optional[pulumi.Input[str]] = None,
                 configure_cbr0: Optional[pulumi.Input[bool]] = None,
                 container_log_max_files: Optional[pulumi.Input[int]] = None,
                 container_log_max_size: Optional[pulumi.Input[str]] = None,
                 cpu_cfs_quota: Optional[pulumi.Input['InstanceGroupKubeletCpuCfsQuotaArgs']] = None,
                 cpu_cfs_quota_period: Optional[pulumi.Input[str]] = None,
                 cpu_manager_policy: Optional[pulumi.Input[str]] = None,
                 docker_disable_shared_pid: Optional[pulumi.Input[bool]] = None,
                 enable_cadvisor_json_endpoints: Optional[pulumi.Input[bool]] = None,
                 enable_custom_metrics: Optional[pulumi.Input[bool]] = None,
                 enable_debugging_handlers: Optional[pulumi.Input[bool]] = None,
                 enforce_node_allocatable: Optional[pulumi.Input[str]] = None,
                 event_burst: Optional[pulumi.Input[int]] = None,
                 event_qps: Optional[pulumi.Input[int]] = None,
                 eviction_hard: Optional[pulumi.Input[str]] = None,
                 eviction_max_pod_grace_period: Optional[pulumi.Input[int]] = None,
                 eviction_minimum_reclaim: Optional[pulumi.Input[str]] = None,
                 eviction_pressure_transition_period: Optional[pulumi.Input[str]] = None,
                 eviction_soft: Optional[pulumi.Input[str]] = None,
                 eviction_soft_grace_period: Optional[pulumi.Input[str]] = None,
                 experimental_allowed_unsafe_sysctls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 fail_swap_on: Optional[pulumi.Input[bool]] = None,
                 feature_gates: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 hairpin_mode: Optional[pulumi.Input[str]] = None,
                 hostname_override: Optional[pulumi.Input[str]] = None,
                 housekeeping_interval: Optional[pulumi.Input[str]] = None,
                 image_gc_high_threshold_percent: Optional[pulumi.Input[int]] = None,
                 image_gc_low_threshold_percent: Optional[pulumi.Input[int]] = None,
                 image_pull_progress_deadline: Optional[pulumi.Input[str]] = None,
                 kernel_memcg_notification: Optional[pulumi.Input[bool]] = None,
                 kube_reserved: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 kube_reserved_cgroup: Optional[pulumi.Input[str]] = None,
                 kubeconfig_path: Optional[pulumi.Input[str]] = None,
                 kubelet_cgroups: Optional[pulumi.Input[str]] = None,
                 log_format: Optional[pulumi.Input[str]] = None,
                 log_level: Optional[pulumi.Input[int]] = None,
                 max_pods: Optional[pulumi.Input[int]] = None,
                 network_plugin_mtu: Optional[pulumi.Input[int]] = None,
                 network_plugin_name: Optional[pulumi.Input[str]] = None,
                 node_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 node_status_update_frequency: Optional[pulumi.Input[str]] = None,
                 non_masquerade_cidr: Optional[pulumi.Input[str]] = None,
                 nvidia_gp_us: Optional[pulumi.Input[int]] = None,
                 pod_cidr: Optional[pulumi.Input[str]] = None,
                 pod_infra_container_image: Optional[pulumi.Input[str]] = None,
                 pod_manifest_path: Optional[pulumi.Input[str]] = None,
                 pod_pids_limit: Optional[pulumi.Input[int]] = None,
                 protect_kernel_defaults: Optional[pulumi.Input[bool]] = None,
                 read_only_port: Optional[pulumi.Input[int]] = None,
                 reconcile_cidr: Optional[pulumi.Input[bool]] = None,
                 register_node: Optional[pulumi.Input[bool]] = None,
                 register_schedulable: Optional[pulumi.Input[bool]] = None,
                 registry_burst: Optional[pulumi.Input[int]] = None,
                 registry_pull_qps: Optional[pulumi.Input[int]] = None,
                 require_kubeconfig: Optional[pulumi.Input[bool]] = None,
                 resolver_config: Optional[pulumi.Input[str]] = None,
                 root_dir: Optional[pulumi.Input[str]] = None,
                 rotate_certificates: Optional[pulumi.Input[bool]] = None,
                 runtime_cgroups: Optional[pulumi.Input[str]] = None,
                 runtime_request_timeout: Optional[pulumi.Input[str]] = None,
                 seccomp_profile_root: Optional[pulumi.Input[str]] = None,
                 serialize_image_pulls: Optional[pulumi.Input[bool]] = None,
                 shutdown_grace_period: Optional[pulumi.Input[str]] = None,
                 shutdown_grace_period_critical_pods: Optional[pulumi.Input[str]] = None,
                 streaming_connection_idle_timeout: Optional[pulumi.Input[str]] = None,
                 system_cgroups: Optional[pulumi.Input[str]] = None,
                 system_reserved: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 system_reserved_cgroup: Optional[pulumi.Input[str]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tls_cert_file: Optional[pulumi.Input[str]] = None,
                 tls_cipher_suites: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tls_min_version: Optional[pulumi.Input[str]] = None,
                 tls_private_key_file: Optional[pulumi.Input[str]] = None,
                 topology_manager_policy: Optional[pulumi.Input[str]] = None,
                 volume_plugin_directory: Optional[pulumi.Input[str]] = None,
                 volume_stats_agg_period: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] node_labels: - Map(String) - NodeLabels indicates the kubernetes labels for nodes in this instance group.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] taints: - List(String) - Taints indicates the kubernetes taints for nodes in this instance group.
        """
        if allow_privileged is not None:
            pulumi.set(__self__, "allow_privileged", allow_privileged)
        if allowed_unsafe_sysctls is not None:
            pulumi.set(__self__, "allowed_unsafe_sysctls", allowed_unsafe_sysctls)
        if anonymous_auth is not None:
            pulumi.set(__self__, "anonymous_auth", anonymous_auth)
        if api_servers is not None:
            pulumi.set(__self__, "api_servers", api_servers)
        if authentication_token_webhook is not None:
            pulumi.set(__self__, "authentication_token_webhook", authentication_token_webhook)
        if authentication_token_webhook_cache_ttl is not None:
            pulumi.set(__self__, "authentication_token_webhook_cache_ttl", authentication_token_webhook_cache_ttl)
        if authorization_mode is not None:
            pulumi.set(__self__, "authorization_mode", authorization_mode)
        if babysit_daemons is not None:
            pulumi.set(__self__, "babysit_daemons", babysit_daemons)
        if bootstrap_kubeconfig is not None:
            pulumi.set(__self__, "bootstrap_kubeconfig", bootstrap_kubeconfig)
        if cgroup_driver is not None:
            pulumi.set(__self__, "cgroup_driver", cgroup_driver)
        if cgroup_root is not None:
            pulumi.set(__self__, "cgroup_root", cgroup_root)
        if client_ca_file is not None:
            pulumi.set(__self__, "client_ca_file", client_ca_file)
        if cloud_provider is not None:
            pulumi.set(__self__, "cloud_provider", cloud_provider)
        if cluster_dns is not None:
            pulumi.set(__self__, "cluster_dns", cluster_dns)
        if cluster_domain is not None:
            pulumi.set(__self__, "cluster_domain", cluster_domain)
        if configure_cbr0 is not None:
            pulumi.set(__self__, "configure_cbr0", configure_cbr0)
        if container_log_max_files is not None:
            pulumi.set(__self__, "container_log_max_files", container_log_max_files)
        if container_log_max_size is not None:
            pulumi.set(__self__, "container_log_max_size", container_log_max_size)
        if cpu_cfs_quota is not None:
            pulumi.set(__self__, "cpu_cfs_quota", cpu_cfs_quota)
        if cpu_cfs_quota_period is not None:
            pulumi.set(__self__, "cpu_cfs_quota_period", cpu_cfs_quota_period)
        if cpu_manager_policy is not None:
            pulumi.set(__self__, "cpu_manager_policy", cpu_manager_policy)
        if docker_disable_shared_pid is not None:
            pulumi.set(__self__, "docker_disable_shared_pid", docker_disable_shared_pid)
        if enable_cadvisor_json_endpoints is not None:
            pulumi.set(__self__, "enable_cadvisor_json_endpoints", enable_cadvisor_json_endpoints)
        if enable_custom_metrics is not None:
            pulumi.set(__self__, "enable_custom_metrics", enable_custom_metrics)
        if enable_debugging_handlers is not None:
            pulumi.set(__self__, "enable_debugging_handlers", enable_debugging_handlers)
        if enforce_node_allocatable is not None:
            pulumi.set(__self__, "enforce_node_allocatable", enforce_node_allocatable)
        if event_burst is not None:
            pulumi.set(__self__, "event_burst", event_burst)
        if event_qps is not None:
            pulumi.set(__self__, "event_qps", event_qps)
        if eviction_hard is not None:
            pulumi.set(__self__, "eviction_hard", eviction_hard)
        if eviction_max_pod_grace_period is not None:
            pulumi.set(__self__, "eviction_max_pod_grace_period", eviction_max_pod_grace_period)
        if eviction_minimum_reclaim is not None:
            pulumi.set(__self__, "eviction_minimum_reclaim", eviction_minimum_reclaim)
        if eviction_pressure_transition_period is not None:
            pulumi.set(__self__, "eviction_pressure_transition_period", eviction_pressure_transition_period)
        if eviction_soft is not None:
            pulumi.set(__self__, "eviction_soft", eviction_soft)
        if eviction_soft_grace_period is not None:
            pulumi.set(__self__, "eviction_soft_grace_period", eviction_soft_grace_period)
        if experimental_allowed_unsafe_sysctls is not None:
            pulumi.set(__self__, "experimental_allowed_unsafe_sysctls", experimental_allowed_unsafe_sysctls)
        if fail_swap_on is not None:
            pulumi.set(__self__, "fail_swap_on", fail_swap_on)
        if feature_gates is not None:
            pulumi.set(__self__, "feature_gates", feature_gates)
        if hairpin_mode is not None:
            pulumi.set(__self__, "hairpin_mode", hairpin_mode)
        if hostname_override is not None:
            pulumi.set(__self__, "hostname_override", hostname_override)
        if housekeeping_interval is not None:
            pulumi.set(__self__, "housekeeping_interval", housekeeping_interval)
        if image_gc_high_threshold_percent is not None:
            pulumi.set(__self__, "image_gc_high_threshold_percent", image_gc_high_threshold_percent)
        if image_gc_low_threshold_percent is not None:
            pulumi.set(__self__, "image_gc_low_threshold_percent", image_gc_low_threshold_percent)
        if image_pull_progress_deadline is not None:
            pulumi.set(__self__, "image_pull_progress_deadline", image_pull_progress_deadline)
        if kernel_memcg_notification is not None:
            pulumi.set(__self__, "kernel_memcg_notification", kernel_memcg_notification)
        if kube_reserved is not None:
            pulumi.set(__self__, "kube_reserved", kube_reserved)
        if kube_reserved_cgroup is not None:
            pulumi.set(__self__, "kube_reserved_cgroup", kube_reserved_cgroup)
        if kubeconfig_path is not None:
            pulumi.set(__self__, "kubeconfig_path", kubeconfig_path)
        if kubelet_cgroups is not None:
            pulumi.set(__self__, "kubelet_cgroups", kubelet_cgroups)
        if log_format is not None:
            pulumi.set(__self__, "log_format", log_format)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)
        if max_pods is not None:
            pulumi.set(__self__, "max_pods", max_pods)
        if network_plugin_mtu is not None:
            pulumi.set(__self__, "network_plugin_mtu", network_plugin_mtu)
        if network_plugin_name is not None:
            pulumi.set(__self__, "network_plugin_name", network_plugin_name)
        if node_labels is not None:
            pulumi.set(__self__, "node_labels", node_labels)
        if node_status_update_frequency is not None:
            pulumi.set(__self__, "node_status_update_frequency", node_status_update_frequency)
        if non_masquerade_cidr is not None:
            pulumi.set(__self__, "non_masquerade_cidr", non_masquerade_cidr)
        if nvidia_gp_us is not None:
            pulumi.set(__self__, "nvidia_gp_us", nvidia_gp_us)
        if pod_cidr is not None:
            pulumi.set(__self__, "pod_cidr", pod_cidr)
        if pod_infra_container_image is not None:
            pulumi.set(__self__, "pod_infra_container_image", pod_infra_container_image)
        if pod_manifest_path is not None:
            pulumi.set(__self__, "pod_manifest_path", pod_manifest_path)
        if pod_pids_limit is not None:
            pulumi.set(__self__, "pod_pids_limit", pod_pids_limit)
        if protect_kernel_defaults is not None:
            pulumi.set(__self__, "protect_kernel_defaults", protect_kernel_defaults)
        if read_only_port is not None:
            pulumi.set(__self__, "read_only_port", read_only_port)
        if reconcile_cidr is not None:
            pulumi.set(__self__, "reconcile_cidr", reconcile_cidr)
        if register_node is not None:
            pulumi.set(__self__, "register_node", register_node)
        if register_schedulable is not None:
            pulumi.set(__self__, "register_schedulable", register_schedulable)
        if registry_burst is not None:
            pulumi.set(__self__, "registry_burst", registry_burst)
        if registry_pull_qps is not None:
            pulumi.set(__self__, "registry_pull_qps", registry_pull_qps)
        if require_kubeconfig is not None:
            pulumi.set(__self__, "require_kubeconfig", require_kubeconfig)
        if resolver_config is not None:
            pulumi.set(__self__, "resolver_config", resolver_config)
        if root_dir is not None:
            pulumi.set(__self__, "root_dir", root_dir)
        if rotate_certificates is not None:
            pulumi.set(__self__, "rotate_certificates", rotate_certificates)
        if runtime_cgroups is not None:
            pulumi.set(__self__, "runtime_cgroups", runtime_cgroups)
        if runtime_request_timeout is not None:
            pulumi.set(__self__, "runtime_request_timeout", runtime_request_timeout)
        if seccomp_profile_root is not None:
            pulumi.set(__self__, "seccomp_profile_root", seccomp_profile_root)
        if serialize_image_pulls is not None:
            pulumi.set(__self__, "serialize_image_pulls", serialize_image_pulls)
        if shutdown_grace_period is not None:
            pulumi.set(__self__, "shutdown_grace_period", shutdown_grace_period)
        if shutdown_grace_period_critical_pods is not None:
            pulumi.set(__self__, "shutdown_grace_period_critical_pods", shutdown_grace_period_critical_pods)
        if streaming_connection_idle_timeout is not None:
            pulumi.set(__self__, "streaming_connection_idle_timeout", streaming_connection_idle_timeout)
        if system_cgroups is not None:
            pulumi.set(__self__, "system_cgroups", system_cgroups)
        if system_reserved is not None:
            pulumi.set(__self__, "system_reserved", system_reserved)
        if system_reserved_cgroup is not None:
            pulumi.set(__self__, "system_reserved_cgroup", system_reserved_cgroup)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)
        if tls_cert_file is not None:
            pulumi.set(__self__, "tls_cert_file", tls_cert_file)
        if tls_cipher_suites is not None:
            pulumi.set(__self__, "tls_cipher_suites", tls_cipher_suites)
        if tls_min_version is not None:
            pulumi.set(__self__, "tls_min_version", tls_min_version)
        if tls_private_key_file is not None:
            pulumi.set(__self__, "tls_private_key_file", tls_private_key_file)
        if topology_manager_policy is not None:
            pulumi.set(__self__, "topology_manager_policy", topology_manager_policy)
        if volume_plugin_directory is not None:
            pulumi.set(__self__, "volume_plugin_directory", volume_plugin_directory)
        if volume_stats_agg_period is not None:
            pulumi.set(__self__, "volume_stats_agg_period", volume_stats_agg_period)

    @property
    @pulumi.getter(name="allowPrivileged")
    def allow_privileged(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_privileged")

    @allow_privileged.setter
    def allow_privileged(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_privileged", value)

    @property
    @pulumi.getter(name="allowedUnsafeSysctls")
    def allowed_unsafe_sysctls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "allowed_unsafe_sysctls")

    @allowed_unsafe_sysctls.setter
    def allowed_unsafe_sysctls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_unsafe_sysctls", value)

    @property
    @pulumi.getter(name="anonymousAuth")
    def anonymous_auth(self) -> Optional[pulumi.Input['InstanceGroupKubeletAnonymousAuthArgs']]:
        return pulumi.get(self, "anonymous_auth")

    @anonymous_auth.setter
    def anonymous_auth(self, value: Optional[pulumi.Input['InstanceGroupKubeletAnonymousAuthArgs']]):
        pulumi.set(self, "anonymous_auth", value)

    @property
    @pulumi.getter(name="apiServers")
    def api_servers(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "api_servers")

    @api_servers.setter
    def api_servers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_servers", value)

    @property
    @pulumi.getter(name="authenticationTokenWebhook")
    def authentication_token_webhook(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "authentication_token_webhook")

    @authentication_token_webhook.setter
    def authentication_token_webhook(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "authentication_token_webhook", value)

    @property
    @pulumi.getter(name="authenticationTokenWebhookCacheTtl")
    def authentication_token_webhook_cache_ttl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authentication_token_webhook_cache_ttl")

    @authentication_token_webhook_cache_ttl.setter
    def authentication_token_webhook_cache_ttl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_token_webhook_cache_ttl", value)

    @property
    @pulumi.getter(name="authorizationMode")
    def authorization_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authorization_mode")

    @authorization_mode.setter
    def authorization_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorization_mode", value)

    @property
    @pulumi.getter(name="babysitDaemons")
    def babysit_daemons(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "babysit_daemons")

    @babysit_daemons.setter
    def babysit_daemons(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "babysit_daemons", value)

    @property
    @pulumi.getter(name="bootstrapKubeconfig")
    def bootstrap_kubeconfig(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bootstrap_kubeconfig")

    @bootstrap_kubeconfig.setter
    def bootstrap_kubeconfig(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bootstrap_kubeconfig", value)

    @property
    @pulumi.getter(name="cgroupDriver")
    def cgroup_driver(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cgroup_driver")

    @cgroup_driver.setter
    def cgroup_driver(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cgroup_driver", value)

    @property
    @pulumi.getter(name="cgroupRoot")
    def cgroup_root(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cgroup_root")

    @cgroup_root.setter
    def cgroup_root(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cgroup_root", value)

    @property
    @pulumi.getter(name="clientCaFile")
    def client_ca_file(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_ca_file")

    @client_ca_file.setter
    def client_ca_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_ca_file", value)

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloud_provider")

    @cloud_provider.setter
    def cloud_provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_provider", value)

    @property
    @pulumi.getter(name="clusterDns")
    def cluster_dns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_dns")

    @cluster_dns.setter
    def cluster_dns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_dns", value)

    @property
    @pulumi.getter(name="clusterDomain")
    def cluster_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_domain")

    @cluster_domain.setter
    def cluster_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_domain", value)

    @property
    @pulumi.getter(name="configureCbr0")
    def configure_cbr0(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "configure_cbr0")

    @configure_cbr0.setter
    def configure_cbr0(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "configure_cbr0", value)

    @property
    @pulumi.getter(name="containerLogMaxFiles")
    def container_log_max_files(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "container_log_max_files")

    @container_log_max_files.setter
    def container_log_max_files(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "container_log_max_files", value)

    @property
    @pulumi.getter(name="containerLogMaxSize")
    def container_log_max_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "container_log_max_size")

    @container_log_max_size.setter
    def container_log_max_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_log_max_size", value)

    @property
    @pulumi.getter(name="cpuCfsQuota")
    def cpu_cfs_quota(self) -> Optional[pulumi.Input['InstanceGroupKubeletCpuCfsQuotaArgs']]:
        return pulumi.get(self, "cpu_cfs_quota")

    @cpu_cfs_quota.setter
    def cpu_cfs_quota(self, value: Optional[pulumi.Input['InstanceGroupKubeletCpuCfsQuotaArgs']]):
        pulumi.set(self, "cpu_cfs_quota", value)

    @property
    @pulumi.getter(name="cpuCfsQuotaPeriod")
    def cpu_cfs_quota_period(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpu_cfs_quota_period")

    @cpu_cfs_quota_period.setter
    def cpu_cfs_quota_period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_cfs_quota_period", value)

    @property
    @pulumi.getter(name="cpuManagerPolicy")
    def cpu_manager_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpu_manager_policy")

    @cpu_manager_policy.setter
    def cpu_manager_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_manager_policy", value)

    @property
    @pulumi.getter(name="dockerDisableSharedPid")
    def docker_disable_shared_pid(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "docker_disable_shared_pid")

    @docker_disable_shared_pid.setter
    def docker_disable_shared_pid(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "docker_disable_shared_pid", value)

    @property
    @pulumi.getter(name="enableCadvisorJsonEndpoints")
    def enable_cadvisor_json_endpoints(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_cadvisor_json_endpoints")

    @enable_cadvisor_json_endpoints.setter
    def enable_cadvisor_json_endpoints(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_cadvisor_json_endpoints", value)

    @property
    @pulumi.getter(name="enableCustomMetrics")
    def enable_custom_metrics(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_custom_metrics")

    @enable_custom_metrics.setter
    def enable_custom_metrics(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_custom_metrics", value)

    @property
    @pulumi.getter(name="enableDebuggingHandlers")
    def enable_debugging_handlers(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_debugging_handlers")

    @enable_debugging_handlers.setter
    def enable_debugging_handlers(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_debugging_handlers", value)

    @property
    @pulumi.getter(name="enforceNodeAllocatable")
    def enforce_node_allocatable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enforce_node_allocatable")

    @enforce_node_allocatable.setter
    def enforce_node_allocatable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enforce_node_allocatable", value)

    @property
    @pulumi.getter(name="eventBurst")
    def event_burst(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "event_burst")

    @event_burst.setter
    def event_burst(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "event_burst", value)

    @property
    @pulumi.getter(name="eventQps")
    def event_qps(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "event_qps")

    @event_qps.setter
    def event_qps(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "event_qps", value)

    @property
    @pulumi.getter(name="evictionHard")
    def eviction_hard(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "eviction_hard")

    @eviction_hard.setter
    def eviction_hard(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eviction_hard", value)

    @property
    @pulumi.getter(name="evictionMaxPodGracePeriod")
    def eviction_max_pod_grace_period(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "eviction_max_pod_grace_period")

    @eviction_max_pod_grace_period.setter
    def eviction_max_pod_grace_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "eviction_max_pod_grace_period", value)

    @property
    @pulumi.getter(name="evictionMinimumReclaim")
    def eviction_minimum_reclaim(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "eviction_minimum_reclaim")

    @eviction_minimum_reclaim.setter
    def eviction_minimum_reclaim(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eviction_minimum_reclaim", value)

    @property
    @pulumi.getter(name="evictionPressureTransitionPeriod")
    def eviction_pressure_transition_period(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "eviction_pressure_transition_period")

    @eviction_pressure_transition_period.setter
    def eviction_pressure_transition_period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eviction_pressure_transition_period", value)

    @property
    @pulumi.getter(name="evictionSoft")
    def eviction_soft(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "eviction_soft")

    @eviction_soft.setter
    def eviction_soft(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eviction_soft", value)

    @property
    @pulumi.getter(name="evictionSoftGracePeriod")
    def eviction_soft_grace_period(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "eviction_soft_grace_period")

    @eviction_soft_grace_period.setter
    def eviction_soft_grace_period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eviction_soft_grace_period", value)

    @property
    @pulumi.getter(name="experimentalAllowedUnsafeSysctls")
    def experimental_allowed_unsafe_sysctls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "experimental_allowed_unsafe_sysctls")

    @experimental_allowed_unsafe_sysctls.setter
    def experimental_allowed_unsafe_sysctls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "experimental_allowed_unsafe_sysctls", value)

    @property
    @pulumi.getter(name="failSwapOn")
    def fail_swap_on(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "fail_swap_on")

    @fail_swap_on.setter
    def fail_swap_on(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fail_swap_on", value)

    @property
    @pulumi.getter(name="featureGates")
    def feature_gates(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "feature_gates")

    @feature_gates.setter
    def feature_gates(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "feature_gates", value)

    @property
    @pulumi.getter(name="hairpinMode")
    def hairpin_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hairpin_mode")

    @hairpin_mode.setter
    def hairpin_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hairpin_mode", value)

    @property
    @pulumi.getter(name="hostnameOverride")
    def hostname_override(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hostname_override")

    @hostname_override.setter
    def hostname_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname_override", value)

    @property
    @pulumi.getter(name="housekeepingInterval")
    def housekeeping_interval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "housekeeping_interval")

    @housekeeping_interval.setter
    def housekeeping_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "housekeeping_interval", value)

    @property
    @pulumi.getter(name="imageGcHighThresholdPercent")
    def image_gc_high_threshold_percent(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "image_gc_high_threshold_percent")

    @image_gc_high_threshold_percent.setter
    def image_gc_high_threshold_percent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "image_gc_high_threshold_percent", value)

    @property
    @pulumi.getter(name="imageGcLowThresholdPercent")
    def image_gc_low_threshold_percent(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "image_gc_low_threshold_percent")

    @image_gc_low_threshold_percent.setter
    def image_gc_low_threshold_percent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "image_gc_low_threshold_percent", value)

    @property
    @pulumi.getter(name="imagePullProgressDeadline")
    def image_pull_progress_deadline(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_pull_progress_deadline")

    @image_pull_progress_deadline.setter
    def image_pull_progress_deadline(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_pull_progress_deadline", value)

    @property
    @pulumi.getter(name="kernelMemcgNotification")
    def kernel_memcg_notification(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "kernel_memcg_notification")

    @kernel_memcg_notification.setter
    def kernel_memcg_notification(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "kernel_memcg_notification", value)

    @property
    @pulumi.getter(name="kubeReserved")
    def kube_reserved(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "kube_reserved")

    @kube_reserved.setter
    def kube_reserved(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "kube_reserved", value)

    @property
    @pulumi.getter(name="kubeReservedCgroup")
    def kube_reserved_cgroup(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kube_reserved_cgroup")

    @kube_reserved_cgroup.setter
    def kube_reserved_cgroup(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kube_reserved_cgroup", value)

    @property
    @pulumi.getter(name="kubeconfigPath")
    def kubeconfig_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kubeconfig_path")

    @kubeconfig_path.setter
    def kubeconfig_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubeconfig_path", value)

    @property
    @pulumi.getter(name="kubeletCgroups")
    def kubelet_cgroups(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kubelet_cgroups")

    @kubelet_cgroups.setter
    def kubelet_cgroups(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubelet_cgroups", value)

    @property
    @pulumi.getter(name="logFormat")
    def log_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_format")

    @log_format.setter
    def log_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_format", value)

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "log_level")

    @log_level.setter
    def log_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "log_level", value)

    @property
    @pulumi.getter(name="maxPods")
    def max_pods(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_pods")

    @max_pods.setter
    def max_pods(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_pods", value)

    @property
    @pulumi.getter(name="networkPluginMtu")
    def network_plugin_mtu(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "network_plugin_mtu")

    @network_plugin_mtu.setter
    def network_plugin_mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "network_plugin_mtu", value)

    @property
    @pulumi.getter(name="networkPluginName")
    def network_plugin_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "network_plugin_name")

    @network_plugin_name.setter
    def network_plugin_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_plugin_name", value)

    @property
    @pulumi.getter(name="nodeLabels")
    def node_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        - Map(String) - NodeLabels indicates the kubernetes labels for nodes in this instance group.
        """
        return pulumi.get(self, "node_labels")

    @node_labels.setter
    def node_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "node_labels", value)

    @property
    @pulumi.getter(name="nodeStatusUpdateFrequency")
    def node_status_update_frequency(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "node_status_update_frequency")

    @node_status_update_frequency.setter
    def node_status_update_frequency(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_status_update_frequency", value)

    @property
    @pulumi.getter(name="nonMasqueradeCidr")
    def non_masquerade_cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "non_masquerade_cidr")

    @non_masquerade_cidr.setter
    def non_masquerade_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "non_masquerade_cidr", value)

    @property
    @pulumi.getter(name="nvidiaGpUs")
    def nvidia_gp_us(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "nvidia_gp_us")

    @nvidia_gp_us.setter
    def nvidia_gp_us(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "nvidia_gp_us", value)

    @property
    @pulumi.getter(name="podCidr")
    def pod_cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pod_cidr")

    @pod_cidr.setter
    def pod_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pod_cidr", value)

    @property
    @pulumi.getter(name="podInfraContainerImage")
    def pod_infra_container_image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pod_infra_container_image")

    @pod_infra_container_image.setter
    def pod_infra_container_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pod_infra_container_image", value)

    @property
    @pulumi.getter(name="podManifestPath")
    def pod_manifest_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pod_manifest_path")

    @pod_manifest_path.setter
    def pod_manifest_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pod_manifest_path", value)

    @property
    @pulumi.getter(name="podPidsLimit")
    def pod_pids_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "pod_pids_limit")

    @pod_pids_limit.setter
    def pod_pids_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pod_pids_limit", value)

    @property
    @pulumi.getter(name="protectKernelDefaults")
    def protect_kernel_defaults(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "protect_kernel_defaults")

    @protect_kernel_defaults.setter
    def protect_kernel_defaults(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "protect_kernel_defaults", value)

    @property
    @pulumi.getter(name="readOnlyPort")
    def read_only_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "read_only_port")

    @read_only_port.setter
    def read_only_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "read_only_port", value)

    @property
    @pulumi.getter(name="reconcileCidr")
    def reconcile_cidr(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "reconcile_cidr")

    @reconcile_cidr.setter
    def reconcile_cidr(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "reconcile_cidr", value)

    @property
    @pulumi.getter(name="registerNode")
    def register_node(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "register_node")

    @register_node.setter
    def register_node(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "register_node", value)

    @property
    @pulumi.getter(name="registerSchedulable")
    def register_schedulable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "register_schedulable")

    @register_schedulable.setter
    def register_schedulable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "register_schedulable", value)

    @property
    @pulumi.getter(name="registryBurst")
    def registry_burst(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "registry_burst")

    @registry_burst.setter
    def registry_burst(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "registry_burst", value)

    @property
    @pulumi.getter(name="registryPullQps")
    def registry_pull_qps(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "registry_pull_qps")

    @registry_pull_qps.setter
    def registry_pull_qps(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "registry_pull_qps", value)

    @property
    @pulumi.getter(name="requireKubeconfig")
    def require_kubeconfig(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "require_kubeconfig")

    @require_kubeconfig.setter
    def require_kubeconfig(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "require_kubeconfig", value)

    @property
    @pulumi.getter(name="resolverConfig")
    def resolver_config(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resolver_config")

    @resolver_config.setter
    def resolver_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resolver_config", value)

    @property
    @pulumi.getter(name="rootDir")
    def root_dir(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "root_dir")

    @root_dir.setter
    def root_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_dir", value)

    @property
    @pulumi.getter(name="rotateCertificates")
    def rotate_certificates(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "rotate_certificates")

    @rotate_certificates.setter
    def rotate_certificates(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "rotate_certificates", value)

    @property
    @pulumi.getter(name="runtimeCgroups")
    def runtime_cgroups(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "runtime_cgroups")

    @runtime_cgroups.setter
    def runtime_cgroups(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "runtime_cgroups", value)

    @property
    @pulumi.getter(name="runtimeRequestTimeout")
    def runtime_request_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "runtime_request_timeout")

    @runtime_request_timeout.setter
    def runtime_request_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "runtime_request_timeout", value)

    @property
    @pulumi.getter(name="seccompProfileRoot")
    def seccomp_profile_root(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "seccomp_profile_root")

    @seccomp_profile_root.setter
    def seccomp_profile_root(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "seccomp_profile_root", value)

    @property
    @pulumi.getter(name="serializeImagePulls")
    def serialize_image_pulls(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "serialize_image_pulls")

    @serialize_image_pulls.setter
    def serialize_image_pulls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "serialize_image_pulls", value)

    @property
    @pulumi.getter(name="shutdownGracePeriod")
    def shutdown_grace_period(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "shutdown_grace_period")

    @shutdown_grace_period.setter
    def shutdown_grace_period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shutdown_grace_period", value)

    @property
    @pulumi.getter(name="shutdownGracePeriodCriticalPods")
    def shutdown_grace_period_critical_pods(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "shutdown_grace_period_critical_pods")

    @shutdown_grace_period_critical_pods.setter
    def shutdown_grace_period_critical_pods(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shutdown_grace_period_critical_pods", value)

    @property
    @pulumi.getter(name="streamingConnectionIdleTimeout")
    def streaming_connection_idle_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "streaming_connection_idle_timeout")

    @streaming_connection_idle_timeout.setter
    def streaming_connection_idle_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "streaming_connection_idle_timeout", value)

    @property
    @pulumi.getter(name="systemCgroups")
    def system_cgroups(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "system_cgroups")

    @system_cgroups.setter
    def system_cgroups(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_cgroups", value)

    @property
    @pulumi.getter(name="systemReserved")
    def system_reserved(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "system_reserved")

    @system_reserved.setter
    def system_reserved(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "system_reserved", value)

    @property
    @pulumi.getter(name="systemReservedCgroup")
    def system_reserved_cgroup(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "system_reserved_cgroup")

    @system_reserved_cgroup.setter
    def system_reserved_cgroup(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_reserved_cgroup", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        - List(String) - Taints indicates the kubernetes taints for nodes in this instance group.
        """
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "taints", value)

    @property
    @pulumi.getter(name="tlsCertFile")
    def tls_cert_file(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tls_cert_file")

    @tls_cert_file.setter
    def tls_cert_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_cert_file", value)

    @property
    @pulumi.getter(name="tlsCipherSuites")
    def tls_cipher_suites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tls_cipher_suites")

    @tls_cipher_suites.setter
    def tls_cipher_suites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tls_cipher_suites", value)

    @property
    @pulumi.getter(name="tlsMinVersion")
    def tls_min_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tls_min_version")

    @tls_min_version.setter
    def tls_min_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_min_version", value)

    @property
    @pulumi.getter(name="tlsPrivateKeyFile")
    def tls_private_key_file(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tls_private_key_file")

    @tls_private_key_file.setter
    def tls_private_key_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_private_key_file", value)

    @property
    @pulumi.getter(name="topologyManagerPolicy")
    def topology_manager_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topology_manager_policy")

    @topology_manager_policy.setter
    def topology_manager_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_manager_policy", value)

    @property
    @pulumi.getter(name="volumePluginDirectory")
    def volume_plugin_directory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "volume_plugin_directory")

    @volume_plugin_directory.setter
    def volume_plugin_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_plugin_directory", value)

    @property
    @pulumi.getter(name="volumeStatsAggPeriod")
    def volume_stats_agg_period(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "volume_stats_agg_period")

    @volume_stats_agg_period.setter
    def volume_stats_agg_period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_stats_agg_period", value)


@pulumi.input_type
class InstanceGroupKubeletAnonymousAuthArgs:
    def __init__(__self__, *,
                 value: Optional[pulumi.Input[bool]] = None):
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InstanceGroupKubeletCpuCfsQuotaArgs:
    def __init__(__self__, *,
                 value: Optional[pulumi.Input[bool]] = None):
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InstanceGroupMixedInstancesPolicyArgs:
    def __init__(__self__, *,
                 instance_requirements: Optional[pulumi.Input['InstanceGroupMixedInstancesPolicyInstanceRequirementsArgs']] = None,
                 instances: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 on_demand_above_base: Optional[pulumi.Input['InstanceGroupMixedInstancesPolicyOnDemandAboveBaseArgs']] = None,
                 on_demand_allocation_strategy: Optional[pulumi.Input[str]] = None,
                 on_demand_base: Optional[pulumi.Input['InstanceGroupMixedInstancesPolicyOnDemandBaseArgs']] = None,
                 spot_allocation_strategy: Optional[pulumi.Input[str]] = None,
                 spot_instance_pools: Optional[pulumi.Input[int]] = None):
        if instance_requirements is not None:
            pulumi.set(__self__, "instance_requirements", instance_requirements)
        if instances is not None:
            pulumi.set(__self__, "instances", instances)
        if on_demand_above_base is not None:
            pulumi.set(__self__, "on_demand_above_base", on_demand_above_base)
        if on_demand_allocation_strategy is not None:
            pulumi.set(__self__, "on_demand_allocation_strategy", on_demand_allocation_strategy)
        if on_demand_base is not None:
            pulumi.set(__self__, "on_demand_base", on_demand_base)
        if spot_allocation_strategy is not None:
            pulumi.set(__self__, "spot_allocation_strategy", spot_allocation_strategy)
        if spot_instance_pools is not None:
            pulumi.set(__self__, "spot_instance_pools", spot_instance_pools)

    @property
    @pulumi.getter(name="instanceRequirements")
    def instance_requirements(self) -> Optional[pulumi.Input['InstanceGroupMixedInstancesPolicyInstanceRequirementsArgs']]:
        return pulumi.get(self, "instance_requirements")

    @instance_requirements.setter
    def instance_requirements(self, value: Optional[pulumi.Input['InstanceGroupMixedInstancesPolicyInstanceRequirementsArgs']]):
        pulumi.set(self, "instance_requirements", value)

    @property
    @pulumi.getter
    def instances(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "instances")

    @instances.setter
    def instances(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "instances", value)

    @property
    @pulumi.getter(name="onDemandAboveBase")
    def on_demand_above_base(self) -> Optional[pulumi.Input['InstanceGroupMixedInstancesPolicyOnDemandAboveBaseArgs']]:
        return pulumi.get(self, "on_demand_above_base")

    @on_demand_above_base.setter
    def on_demand_above_base(self, value: Optional[pulumi.Input['InstanceGroupMixedInstancesPolicyOnDemandAboveBaseArgs']]):
        pulumi.set(self, "on_demand_above_base", value)

    @property
    @pulumi.getter(name="onDemandAllocationStrategy")
    def on_demand_allocation_strategy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "on_demand_allocation_strategy")

    @on_demand_allocation_strategy.setter
    def on_demand_allocation_strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "on_demand_allocation_strategy", value)

    @property
    @pulumi.getter(name="onDemandBase")
    def on_demand_base(self) -> Optional[pulumi.Input['InstanceGroupMixedInstancesPolicyOnDemandBaseArgs']]:
        return pulumi.get(self, "on_demand_base")

    @on_demand_base.setter
    def on_demand_base(self, value: Optional[pulumi.Input['InstanceGroupMixedInstancesPolicyOnDemandBaseArgs']]):
        pulumi.set(self, "on_demand_base", value)

    @property
    @pulumi.getter(name="spotAllocationStrategy")
    def spot_allocation_strategy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spot_allocation_strategy")

    @spot_allocation_strategy.setter
    def spot_allocation_strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spot_allocation_strategy", value)

    @property
    @pulumi.getter(name="spotInstancePools")
    def spot_instance_pools(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "spot_instance_pools")

    @spot_instance_pools.setter
    def spot_instance_pools(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "spot_instance_pools", value)


@pulumi.input_type
class InstanceGroupMixedInstancesPolicyInstanceRequirementsArgs:
    def __init__(__self__, *,
                 cpu: Optional[pulumi.Input['InstanceGroupMixedInstancesPolicyInstanceRequirementsCpuArgs']] = None,
                 memory: Optional[pulumi.Input['InstanceGroupMixedInstancesPolicyInstanceRequirementsMemoryArgs']] = None):
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input['InstanceGroupMixedInstancesPolicyInstanceRequirementsCpuArgs']]:
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input['InstanceGroupMixedInstancesPolicyInstanceRequirementsCpuArgs']]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input['InstanceGroupMixedInstancesPolicyInstanceRequirementsMemoryArgs']]:
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input['InstanceGroupMixedInstancesPolicyInstanceRequirementsMemoryArgs']]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class InstanceGroupMixedInstancesPolicyInstanceRequirementsCpuArgs:
    def __init__(__self__, *,
                 max: Optional[pulumi.Input[str]] = None,
                 min: Optional[pulumi.Input[str]] = None):
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min", value)


@pulumi.input_type
class InstanceGroupMixedInstancesPolicyInstanceRequirementsMemoryArgs:
    def __init__(__self__, *,
                 max: Optional[pulumi.Input[str]] = None,
                 min: Optional[pulumi.Input[str]] = None):
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min", value)


@pulumi.input_type
class InstanceGroupMixedInstancesPolicyOnDemandAboveBaseArgs:
    def __init__(__self__, *,
                 value: Optional[pulumi.Input[int]] = None):
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InstanceGroupMixedInstancesPolicyOnDemandBaseArgs:
    def __init__(__self__, *,
                 value: Optional[pulumi.Input[int]] = None):
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InstanceGroupRollingUpdateArgs:
    def __init__(__self__, *,
                 drain_and_terminate: Optional[pulumi.Input[bool]] = None,
                 max_surge: Optional[pulumi.Input[str]] = None,
                 max_unavailable: Optional[pulumi.Input[str]] = None):
        if drain_and_terminate is not None:
            pulumi.set(__self__, "drain_and_terminate", drain_and_terminate)
        if max_surge is not None:
            pulumi.set(__self__, "max_surge", max_surge)
        if max_unavailable is not None:
            pulumi.set(__self__, "max_unavailable", max_unavailable)

    @property
    @pulumi.getter(name="drainAndTerminate")
    def drain_and_terminate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "drain_and_terminate")

    @drain_and_terminate.setter
    def drain_and_terminate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "drain_and_terminate", value)

    @property
    @pulumi.getter(name="maxSurge")
    def max_surge(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_surge")

    @max_surge.setter
    def max_surge(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_surge", value)

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_unavailable")

    @max_unavailable.setter
    def max_unavailable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_unavailable", value)


@pulumi.input_type
class InstanceGroupVolumeArgs:
    def __init__(__self__, *,
                 device: pulumi.Input[str],
                 delete_on_termination: Optional[pulumi.Input[bool]] = None,
                 encrypted: Optional[pulumi.Input[bool]] = None,
                 iops: Optional[pulumi.Input[int]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[int]] = None,
                 throughput: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "device", device)
        if delete_on_termination is not None:
            pulumi.set(__self__, "delete_on_termination", delete_on_termination)
        if encrypted is not None:
            pulumi.set(__self__, "encrypted", encrypted)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if throughput is not None:
            pulumi.set(__self__, "throughput", throughput)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def device(self) -> pulumi.Input[str]:
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: pulumi.Input[str]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="deleteOnTermination")
    def delete_on_termination(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "delete_on_termination")

    @delete_on_termination.setter
    def delete_on_termination(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_on_termination", value)

    @property
    @pulumi.getter
    def encrypted(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "encrypted")

    @encrypted.setter
    def encrypted(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "encrypted", value)

    @property
    @pulumi.getter
    def iops(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "iops")

    @iops.setter
    def iops(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "iops", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def throughput(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "throughput")

    @throughput.setter
    def throughput(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "throughput", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class InstanceGroupVolumeMountArgs:
    def __init__(__self__, *,
                 device: pulumi.Input[str],
                 filesystem: pulumi.Input[str],
                 path: pulumi.Input[str],
                 format_options: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 mount_options: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "device", device)
        pulumi.set(__self__, "filesystem", filesystem)
        pulumi.set(__self__, "path", path)
        if format_options is not None:
            pulumi.set(__self__, "format_options", format_options)
        if mount_options is not None:
            pulumi.set(__self__, "mount_options", mount_options)

    @property
    @pulumi.getter
    def device(self) -> pulumi.Input[str]:
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: pulumi.Input[str]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def filesystem(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filesystem")

    @filesystem.setter
    def filesystem(self, value: pulumi.Input[str]):
        pulumi.set(self, "filesystem", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="formatOptions")
    def format_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "format_options")

    @format_options.setter
    def format_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "format_options", value)

    @property
    @pulumi.getter(name="mountOptions")
    def mount_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "mount_options")

    @mount_options.setter
    def mount_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "mount_options", value)


@pulumi.input_type
class InstanceGroupWarmPoolArgs:
    def __init__(__self__, *,
                 enable_lifecycle_hook: Optional[pulumi.Input[bool]] = None,
                 max_size: Optional[pulumi.Input[int]] = None,
                 min_size: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] max_size: - Int - MaxSize is the maximum size of the pool.
        :param pulumi.Input[int] min_size: - Int - MinSize is the minimum size of the pool.
        """
        if enable_lifecycle_hook is not None:
            pulumi.set(__self__, "enable_lifecycle_hook", enable_lifecycle_hook)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if min_size is not None:
            pulumi.set(__self__, "min_size", min_size)

    @property
    @pulumi.getter(name="enableLifecycleHook")
    def enable_lifecycle_hook(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_lifecycle_hook")

    @enable_lifecycle_hook.setter
    def enable_lifecycle_hook(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_lifecycle_hook", value)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[pulumi.Input[int]]:
        """
        - Int - MaxSize is the maximum size of the pool.
        """
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_size", value)

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[pulumi.Input[int]]:
        """
        - Int - MinSize is the minimum size of the pool.
        """
        return pulumi.get(self, "min_size")

    @min_size.setter
    def min_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_size", value)


@pulumi.input_type
class ProviderAwsArgs:
    def __init__(__self__, *,
                 access_key: Optional[pulumi.Input[str]] = None,
                 assume_role: Optional[pulumi.Input['ProviderAwsAssumeRoleArgs']] = None,
                 profile: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 s3_access_key: Optional[pulumi.Input[str]] = None,
                 s3_endpoint: Optional[pulumi.Input[str]] = None,
                 s3_region: Optional[pulumi.Input[str]] = None,
                 s3_secret_key: Optional[pulumi.Input[str]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None,
                 skip_region_check: Optional[pulumi.Input[bool]] = None):
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if s3_access_key is not None:
            pulumi.set(__self__, "s3_access_key", s3_access_key)
        if s3_endpoint is not None:
            pulumi.set(__self__, "s3_endpoint", s3_endpoint)
        if s3_region is not None:
            pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if skip_region_check is not None:
            pulumi.set(__self__, "skip_region_check", skip_region_check)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[pulumi.Input['ProviderAwsAssumeRoleArgs']]:
        return pulumi.get(self, "assume_role")

    @assume_role.setter
    def assume_role(self, value: Optional[pulumi.Input['ProviderAwsAssumeRoleArgs']]):
        pulumi.set(self, "assume_role", value)

    @property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="s3AccessKey")
    def s3_access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_access_key")

    @s3_access_key.setter
    def s3_access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_access_key", value)

    @property
    @pulumi.getter(name="s3Endpoint")
    def s3_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_endpoint")

    @s3_endpoint.setter
    def s3_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_endpoint", value)

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_region")

    @s3_region.setter
    def s3_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_region", value)

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_key")

    @s3_secret_key.setter
    def s3_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_key", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter(name="skipRegionCheck")
    def skip_region_check(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "skip_region_check")

    @skip_region_check.setter
    def skip_region_check(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_region_check", value)


@pulumi.input_type
class ProviderAwsAssumeRoleArgs:
    def __init__(__self__, *,
                 role_arn: Optional[pulumi.Input[str]] = None):
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)


@pulumi.input_type
class ProviderKlogArgs:
    def __init__(__self__, *,
                 verbosity: Optional[pulumi.Input['ProviderKlogVerbosityArgs']] = None):
        if verbosity is not None:
            pulumi.set(__self__, "verbosity", verbosity)

    @property
    @pulumi.getter
    def verbosity(self) -> Optional[pulumi.Input['ProviderKlogVerbosityArgs']]:
        return pulumi.get(self, "verbosity")

    @verbosity.setter
    def verbosity(self, value: Optional[pulumi.Input['ProviderKlogVerbosityArgs']]):
        pulumi.set(self, "verbosity", value)


@pulumi.input_type
class ProviderKlogVerbosityArgs:
    def __init__(__self__, *,
                 value: Optional[pulumi.Input[int]] = None):
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProviderOpenstackArgs:
    def __init__(__self__, *,
                 application_credential_id: Optional[pulumi.Input[str]] = None,
                 application_credential_secret: Optional[pulumi.Input[str]] = None,
                 auth_url: Optional[pulumi.Input[str]] = None,
                 domain_id: Optional[pulumi.Input[str]] = None,
                 domain_name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 project_domain_id: Optional[pulumi.Input[str]] = None,
                 project_domain_name: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 region_name: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None,
                 tenant_name: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        if application_credential_id is not None:
            pulumi.set(__self__, "application_credential_id", application_credential_id)
        if application_credential_secret is not None:
            pulumi.set(__self__, "application_credential_secret", application_credential_secret)
        if auth_url is not None:
            pulumi.set(__self__, "auth_url", auth_url)
        if domain_id is not None:
            pulumi.set(__self__, "domain_id", domain_id)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if project_domain_id is not None:
            pulumi.set(__self__, "project_domain_id", project_domain_id)
        if project_domain_name is not None:
            pulumi.set(__self__, "project_domain_name", project_domain_name)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if region_name is not None:
            pulumi.set(__self__, "region_name", region_name)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if tenant_name is not None:
            pulumi.set(__self__, "tenant_name", tenant_name)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="applicationCredentialId")
    def application_credential_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "application_credential_id")

    @application_credential_id.setter
    def application_credential_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_credential_id", value)

    @property
    @pulumi.getter(name="applicationCredentialSecret")
    def application_credential_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "application_credential_secret")

    @application_credential_secret.setter
    def application_credential_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_credential_secret", value)

    @property
    @pulumi.getter(name="authUrl")
    def auth_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_url")

    @auth_url.setter
    def auth_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_url", value)

    @property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_id", value)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="projectDomainId")
    def project_domain_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project_domain_id")

    @project_domain_id.setter
    def project_domain_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_domain_id", value)

    @property
    @pulumi.getter(name="projectDomainName")
    def project_domain_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project_domain_name")

    @project_domain_name.setter
    def project_domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_domain_name", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter(name="regionName")
    def region_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region_name")

    @region_name.setter
    def region_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region_name", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)

    @property
    @pulumi.getter(name="tenantName")
    def tenant_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tenant_name")

    @tenant_name.setter
    def tenant_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_name", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class GetClusterExternalPolicyArgs:
    def __init__(__self__, *,
                 key: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: str):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetClusterTagSubnetsArgs:
    def __init__(__self__, *,
                 value: bool):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> bool:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: bool):
        pulumi.set(self, "value", value)


