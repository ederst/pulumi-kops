# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from ._inputs import *

__all__ = ['ProviderArgs', 'Provider']

@pulumi.input_type
class ProviderArgs:
    def __init__(__self__, *,
                 state_store: pulumi.Input[str],
                 aws: Optional[pulumi.Input['ProviderAwsArgs']] = None,
                 feature_flags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 klog: Optional[pulumi.Input['ProviderKlogArgs']] = None,
                 mock: Optional[pulumi.Input[bool]] = None,
                 openstack: Optional[pulumi.Input['ProviderOpenstackArgs']] = None):
        """
        The set of arguments for constructing a Provider resource.
        """
        pulumi.set(__self__, "state_store", state_store)
        if aws is not None:
            pulumi.set(__self__, "aws", aws)
        if feature_flags is not None:
            pulumi.set(__self__, "feature_flags", feature_flags)
        if klog is not None:
            pulumi.set(__self__, "klog", klog)
        if mock is not None:
            pulumi.set(__self__, "mock", mock)
        if openstack is not None:
            pulumi.set(__self__, "openstack", openstack)

    @property
    @pulumi.getter(name="stateStore")
    def state_store(self) -> pulumi.Input[str]:
        return pulumi.get(self, "state_store")

    @state_store.setter
    def state_store(self, value: pulumi.Input[str]):
        pulumi.set(self, "state_store", value)

    @property
    @pulumi.getter
    def aws(self) -> Optional[pulumi.Input['ProviderAwsArgs']]:
        return pulumi.get(self, "aws")

    @aws.setter
    def aws(self, value: Optional[pulumi.Input['ProviderAwsArgs']]):
        pulumi.set(self, "aws", value)

    @property
    @pulumi.getter(name="featureFlags")
    def feature_flags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "feature_flags")

    @feature_flags.setter
    def feature_flags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "feature_flags", value)

    @property
    @pulumi.getter
    def klog(self) -> Optional[pulumi.Input['ProviderKlogArgs']]:
        return pulumi.get(self, "klog")

    @klog.setter
    def klog(self, value: Optional[pulumi.Input['ProviderKlogArgs']]):
        pulumi.set(self, "klog", value)

    @property
    @pulumi.getter
    def mock(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "mock")

    @mock.setter
    def mock(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mock", value)

    @property
    @pulumi.getter
    def openstack(self) -> Optional[pulumi.Input['ProviderOpenstackArgs']]:
        return pulumi.get(self, "openstack")

    @openstack.setter
    def openstack(self, value: Optional[pulumi.Input['ProviderOpenstackArgs']]):
        pulumi.set(self, "openstack", value)


class Provider(pulumi.ProviderResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aws: Optional[pulumi.Input[pulumi.InputType['ProviderAwsArgs']]] = None,
                 feature_flags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 klog: Optional[pulumi.Input[pulumi.InputType['ProviderKlogArgs']]] = None,
                 mock: Optional[pulumi.Input[bool]] = None,
                 openstack: Optional[pulumi.Input[pulumi.InputType['ProviderOpenstackArgs']]] = None,
                 state_store: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The provider type for the kops package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProviderArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The provider type for the kops package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param ProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aws: Optional[pulumi.Input[pulumi.InputType['ProviderAwsArgs']]] = None,
                 feature_flags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 klog: Optional[pulumi.Input[pulumi.InputType['ProviderKlogArgs']]] = None,
                 mock: Optional[pulumi.Input[bool]] = None,
                 openstack: Optional[pulumi.Input[pulumi.InputType['ProviderOpenstackArgs']]] = None,
                 state_store: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderArgs.__new__(ProviderArgs)

            __props__.__dict__["aws"] = pulumi.Output.from_input(aws).apply(pulumi.runtime.to_json) if aws is not None else None
            __props__.__dict__["feature_flags"] = pulumi.Output.from_input(feature_flags).apply(pulumi.runtime.to_json) if feature_flags is not None else None
            __props__.__dict__["klog"] = pulumi.Output.from_input(klog).apply(pulumi.runtime.to_json) if klog is not None else None
            __props__.__dict__["mock"] = pulumi.Output.from_input(mock).apply(pulumi.runtime.to_json) if mock is not None else None
            __props__.__dict__["openstack"] = pulumi.Output.from_input(openstack).apply(pulumi.runtime.to_json) if openstack is not None else None
            if state_store is None and not opts.urn:
                raise TypeError("Missing required property 'state_store'")
            __props__.__dict__["state_store"] = state_store
        super(Provider, __self__).__init__(
            'kops',
            resource_name,
            __props__,
            opts)

    @property
    @pulumi.getter(name="stateStore")
    def state_store(self) -> pulumi.Output[str]:
        return pulumi.get(self, "state_store")

