# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetKubeConfigResult',
    'AwaitableGetKubeConfigResult',
    'get_kube_config',
    'get_kube_config_output',
]

@pulumi.output_type
class GetKubeConfigResult:
    """
    A collection of values returned by getKubeConfig.
    """
    def __init__(__self__, admin=None, ca_certs=None, client_cert=None, client_key=None, cluster_name=None, context=None, id=None, internal=None, kube_password=None, kube_user=None, namespace=None, server=None):
        if admin and not isinstance(admin, int):
            raise TypeError("Expected argument 'admin' to be a int")
        pulumi.set(__self__, "admin", admin)
        if ca_certs and not isinstance(ca_certs, str):
            raise TypeError("Expected argument 'ca_certs' to be a str")
        pulumi.set(__self__, "ca_certs", ca_certs)
        if client_cert and not isinstance(client_cert, str):
            raise TypeError("Expected argument 'client_cert' to be a str")
        pulumi.set(__self__, "client_cert", client_cert)
        if client_key and not isinstance(client_key, str):
            raise TypeError("Expected argument 'client_key' to be a str")
        pulumi.set(__self__, "client_key", client_key)
        if cluster_name and not isinstance(cluster_name, str):
            raise TypeError("Expected argument 'cluster_name' to be a str")
        pulumi.set(__self__, "cluster_name", cluster_name)
        if context and not isinstance(context, str):
            raise TypeError("Expected argument 'context' to be a str")
        pulumi.set(__self__, "context", context)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if internal and not isinstance(internal, bool):
            raise TypeError("Expected argument 'internal' to be a bool")
        pulumi.set(__self__, "internal", internal)
        if kube_password and not isinstance(kube_password, str):
            raise TypeError("Expected argument 'kube_password' to be a str")
        pulumi.set(__self__, "kube_password", kube_password)
        if kube_user and not isinstance(kube_user, str):
            raise TypeError("Expected argument 'kube_user' to be a str")
        pulumi.set(__self__, "kube_user", kube_user)
        if namespace and not isinstance(namespace, str):
            raise TypeError("Expected argument 'namespace' to be a str")
        pulumi.set(__self__, "namespace", namespace)
        if server and not isinstance(server, str):
            raise TypeError("Expected argument 'server' to be a str")
        pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def admin(self) -> int:
        return pulumi.get(self, "admin")

    @property
    @pulumi.getter(name="caCerts")
    def ca_certs(self) -> str:
        return pulumi.get(self, "ca_certs")

    @property
    @pulumi.getter(name="clientCert")
    def client_cert(self) -> str:
        return pulumi.get(self, "client_cert")

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> str:
        return pulumi.get(self, "client_key")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter
    def context(self) -> str:
        return pulumi.get(self, "context")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def internal(self) -> bool:
        return pulumi.get(self, "internal")

    @property
    @pulumi.getter(name="kubePassword")
    def kube_password(self) -> str:
        return pulumi.get(self, "kube_password")

    @property
    @pulumi.getter(name="kubeUser")
    def kube_user(self) -> str:
        return pulumi.get(self, "kube_user")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> str:
        return pulumi.get(self, "server")


class AwaitableGetKubeConfigResult(GetKubeConfigResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetKubeConfigResult(
            admin=self.admin,
            ca_certs=self.ca_certs,
            client_cert=self.client_cert,
            client_key=self.client_key,
            cluster_name=self.cluster_name,
            context=self.context,
            id=self.id,
            internal=self.internal,
            kube_password=self.kube_password,
            kube_user=self.kube_user,
            namespace=self.namespace,
            server=self.server)


def get_kube_config(admin: Optional[int] = None,
                    cluster_name: Optional[str] = None,
                    internal: Optional[bool] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetKubeConfigResult:
    """
    ## # get_kube_config

    Provides a kOps kube config data source.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_kops as kops

    kube_config = kops.get_kube_config(cluster_name="cluster.example.com")
    ```


    :param int admin: - (Computed) - Int - Admin is the cluster admin user credential lifetime.
    :param str cluster_name: - String - The cluster name.
    :param bool internal: - (Computed) - Bool - Internal use the cluster's internal DNS name.
    """
    __args__ = dict()
    __args__['admin'] = admin
    __args__['clusterName'] = cluster_name
    __args__['internal'] = internal
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('kops:index/getKubeConfig:getKubeConfig', __args__, opts=opts, typ=GetKubeConfigResult).value

    return AwaitableGetKubeConfigResult(
        admin=__ret__.admin,
        ca_certs=__ret__.ca_certs,
        client_cert=__ret__.client_cert,
        client_key=__ret__.client_key,
        cluster_name=__ret__.cluster_name,
        context=__ret__.context,
        id=__ret__.id,
        internal=__ret__.internal,
        kube_password=__ret__.kube_password,
        kube_user=__ret__.kube_user,
        namespace=__ret__.namespace,
        server=__ret__.server)


@_utilities.lift_output_func(get_kube_config)
def get_kube_config_output(admin: Optional[pulumi.Input[Optional[int]]] = None,
                           cluster_name: Optional[pulumi.Input[str]] = None,
                           internal: Optional[pulumi.Input[Optional[bool]]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetKubeConfigResult]:
    """
    ## # get_kube_config

    Provides a kOps kube config data source.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_kops as kops

    kube_config = kops.get_kube_config(cluster_name="cluster.example.com")
    ```


    :param int admin: - (Computed) - Int - Admin is the cluster admin user credential lifetime.
    :param str cluster_name: - String - The cluster name.
    :param bool internal: - (Computed) - Bool - Internal use the cluster's internal DNS name.
    """
    ...
