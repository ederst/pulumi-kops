# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['InstanceGroupArgs', 'InstanceGroup']

@pulumi.input_type
class InstanceGroupArgs:
    def __init__(__self__, *,
                 cluster_name: pulumi.Input[str],
                 machine_type: pulumi.Input[str],
                 max_size: pulumi.Input[int],
                 min_size: pulumi.Input[int],
                 role: pulumi.Input[str],
                 subnets: pulumi.Input[Sequence[pulumi.Input[str]]],
                 additional_security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 additional_user_datas: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceGroupAdditionalUserDataArgs']]]] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 associate_public_ip: Optional[pulumi.Input[bool]] = None,
                 autoscale: Optional[pulumi.Input[bool]] = None,
                 cloud_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 compress_user_data: Optional[pulumi.Input[bool]] = None,
                 containerd: Optional[pulumi.Input['InstanceGroupContainerdArgs']] = None,
                 cpu_credits: Optional[pulumi.Input[str]] = None,
                 detailed_instance_monitoring: Optional[pulumi.Input[bool]] = None,
                 external_load_balancers: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceGroupExternalLoadBalancerArgs']]]] = None,
                 file_assets: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceGroupFileAssetArgs']]]] = None,
                 gcp_provisioning_model: Optional[pulumi.Input[str]] = None,
                 guest_accelerators: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceGroupGuestAcceleratorArgs']]]] = None,
                 hooks: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceGroupHookArgs']]]] = None,
                 iam: Optional[pulumi.Input['InstanceGroupIamArgs']] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 instance_interruption_behavior: Optional[pulumi.Input[str]] = None,
                 instance_metadata: Optional[pulumi.Input['InstanceGroupInstanceMetadataArgs']] = None,
                 instance_protection: Optional[pulumi.Input[bool]] = None,
                 kubelet: Optional[pulumi.Input['InstanceGroupKubeletArgs']] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 manager: Optional[pulumi.Input[str]] = None,
                 max_instance_lifetime: Optional[pulumi.Input[str]] = None,
                 max_price: Optional[pulumi.Input[str]] = None,
                 mixed_instances_policy: Optional[pulumi.Input['InstanceGroupMixedInstancesPolicyArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 packages: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 rolling_update: Optional[pulumi.Input['InstanceGroupRollingUpdateArgs']] = None,
                 root_volume_encryption: Optional[pulumi.Input[bool]] = None,
                 root_volume_encryption_key: Optional[pulumi.Input[str]] = None,
                 root_volume_iops: Optional[pulumi.Input[int]] = None,
                 root_volume_optimization: Optional[pulumi.Input[bool]] = None,
                 root_volume_size: Optional[pulumi.Input[int]] = None,
                 root_volume_throughput: Optional[pulumi.Input[int]] = None,
                 root_volume_type: Optional[pulumi.Input[str]] = None,
                 security_group_override: Optional[pulumi.Input[str]] = None,
                 spot_duration_in_minutes: Optional[pulumi.Input[int]] = None,
                 suspend_processes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sysctl_parameters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenancy: Optional[pulumi.Input[str]] = None,
                 update_policy: Optional[pulumi.Input[str]] = None,
                 volume_mounts: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceGroupVolumeMountArgs']]]] = None,
                 volumes: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceGroupVolumeArgs']]]] = None,
                 warm_pool: Optional[pulumi.Input['InstanceGroupWarmPoolArgs']] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a InstanceGroup resource.
        :param pulumi.Input[str] cluster_name: - (Force new) - String - ClusterName defines the cluster name the instance group belongs to.
        :param pulumi.Input[str] machine_type: - String - MachineType is the instance class.
        :param pulumi.Input[int] max_size: - Int - MaxSize is the maximum size of the pool.
        :param pulumi.Input[int] min_size: - Int - MinSize is the minimum size of the pool.
        :param pulumi.Input[str] role: - String - Type determines the role of instances in this instance group: masters or nodes.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnets: - List(String) - Subnets is the names of the Subnets (as specified in the Cluster) where machines in this instance group should be placed.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] additional_security_groups: - List(String) - AdditionalSecurityGroups attaches additional security groups (e.g. i-123456).
        :param pulumi.Input[Sequence[pulumi.Input['InstanceGroupAdditionalUserDataArgs']]] additional_user_datas: - List(user_data) - AdditionalUserData is any additional user-data to be passed to the host.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: - Map(String) - Annotations is an unstructured key value map stored with a resource that may be<br />set by external tools to store and retrieve arbitrary metadata. They are not<br />queryable and should be preserved when modifying objects.
        :param pulumi.Input[bool] associate_public_ip: - Bool - AssociatePublicIP is true if we want instances to have a public IP.
        :param pulumi.Input[bool] autoscale: - Bool - Autoscale determines if autoscaling will be enabled for this instance group if cluster autoscaler is enabled.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] cloud_labels: - Map(String) - CloudLabels defines additional tags or labels on cloud provider resources.
        :param pulumi.Input[bool] compress_user_data: - Bool - CompressUserData compresses parts of the user data to save space.
        :param pulumi.Input['InstanceGroupContainerdArgs'] containerd: - containerd_config - Containerd specifies override configuration for instance group.
        :param pulumi.Input[str] cpu_credits: - String - CPUCredits is the credit option for CPU Usage on burstable instance types (AWS only).
        :param pulumi.Input[bool] detailed_instance_monitoring: - Bool - DetailedInstanceMonitoring defines if detailed-monitoring is enabled (AWS only).
        :param pulumi.Input[Sequence[pulumi.Input['InstanceGroupExternalLoadBalancerArgs']]] external_load_balancers: - List(load_balancer) - ExternalLoadBalancers define loadbalancers that should be attached to this instance group.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceGroupFileAssetArgs']]] file_assets: - List(file_asset_spec) - FileAssets is a collection of file assets for this instance group.
        :param pulumi.Input[str] gcp_provisioning_model: - String - GCPProvisioningModel: Specifies the provisioning model of the GCP instance.<br />Valid values:<br />  'STANDARD': (default) standard provisioning with user controlled run time, no discounts<br />  'SPOT': heavily discounted, no guaranteed run time.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceGroupGuestAcceleratorArgs']]] guest_accelerators: - List(accelerator_config) - GuestAccelerators configures additional accelerators.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceGroupHookArgs']]] hooks: - List(hook_spec) - Hooks is a list of hooks for this instance group, note: these can override the cluster wide ones if required.
        :param pulumi.Input['InstanceGroupIamArgs'] iam: - iam_profile_spec - IAMProfileSpec defines the identity of the cloud group IAM profile (AWS only).
        :param pulumi.Input[str] image: - (Computed) - String - Image is the instance (ami etc) we should use.
        :param pulumi.Input[str] instance_interruption_behavior: - String - InstanceInterruptionBehavior defines if a spot instance should be terminated, hibernated,<br />or stopped after interruption.
        :param pulumi.Input['InstanceGroupInstanceMetadataArgs'] instance_metadata: - instance_metadata_options - InstanceMetadata defines the EC2 instance metadata service options (AWS Only).
        :param pulumi.Input[bool] instance_protection: - Bool - InstanceProtection makes new instances in an autoscaling group protected from scale in.
        :param pulumi.Input['InstanceGroupKubeletArgs'] kubelet: - (Computed) - kubelet_config_spec - Kubelet overrides kubelet config from the ClusterSpec.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: - Map(String) - Map of string keys and values that can be used to organize and categorize<br />(scope and select) objects. May match selectors of replication controllers<br />and services.
        :param pulumi.Input[str] manager: - (Computed) - String - Manager determines what is managing the node lifecycle.
        :param pulumi.Input[str] max_instance_lifetime: - Duration - MaxInstanceLifetime to the maximum amount of time, in seconds, that an instance can be in service.<br />Value expected must be in form of duration ("ms", "s", "m", "h").
        :param pulumi.Input[str] max_price: - String - MaxPrice indicates this is a spot-pricing group, with the specified value as our max-price bid.
        :param pulumi.Input['InstanceGroupMixedInstancesPolicyArgs'] mixed_instances_policy: - mixed_instances_policy_spec - MixedInstancesPolicy defined a optional backing of an AWS ASG by a EC2 Fleet (AWS Only).
        :param pulumi.Input[str] name: - (Force new) - String - Name defines the instance group name.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] node_labels: - Map(String) - NodeLabels indicates the kubernetes labels for nodes in this instance group.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] packages: - List(String) - Packages specifies additional packages to be installed.
        :param pulumi.Input['InstanceGroupRollingUpdateArgs'] rolling_update: - rolling_update - RollingUpdate defines the rolling-update behavior.
        :param pulumi.Input[bool] root_volume_encryption: - Bool - RootVolumeEncryption enables EBS root volume encryption for an instance.
        :param pulumi.Input[str] root_volume_encryption_key: - String - RootVolumeEncryptionKey provides the key identifier for root volume encryption.
        :param pulumi.Input[int] root_volume_iops: - Int - RootVolumeIOPS is the provisioned IOPS when the volume type is io1, io2 or gp3 (AWS only).
        :param pulumi.Input[bool] root_volume_optimization: - Bool - RootVolumeOptimization enables EBS optimization for an instance.
        :param pulumi.Input[int] root_volume_size: - Int - RootVolumeSize is the size of the EBS root volume to use, in GB.
        :param pulumi.Input[int] root_volume_throughput: - Int - RootVolumeThroughput is the volume throughput in MBps when the volume type is gp3 (AWS only).
        :param pulumi.Input[str] root_volume_type: - String - RootVolumeType is the type of the EBS root volume to use (e.g. gp2).
        :param pulumi.Input[str] security_group_override: - String - SecurityGroupOverride overrides the default security group created by Kops for this IG (AWS only).
        :param pulumi.Input[int] spot_duration_in_minutes: - Int - SpotDurationInMinutes reserves a spot block for the period specified.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] suspend_processes: - List(String) - SuspendProcesses disables the listed Scaling Policies.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sysctl_parameters: - List(String) - SysctlParameters will configure kernel parameters using sysctl(8). When<br />specified, each parameter must follow the form variable=value, the way<br />it would appear in sysctl.conf.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] taints: - List(String) - Taints indicates the kubernetes taints for nodes in this instance group.
        :param pulumi.Input[str] tenancy: - String - Describes the tenancy of this instance group. Can be either default or dedicated. Currently only applies to AWS.
        :param pulumi.Input[str] update_policy: - String - UpdatePolicy determines the policy for applying upgrades automatically.<br />If specified, this value overrides a value specified in the Cluster's "spec.updatePolicy" field.<br />Valid values:<br />  'automatic' (default): apply updates automatically (apply OS security upgrades, avoiding rebooting when possible)<br />  'external': do not apply updates automatically; they are applied manually or by an external system.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceGroupVolumeMountArgs']]] volume_mounts: - List(volume_mount_spec) - VolumeMounts a collection of volume mounts.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceGroupVolumeArgs']]] volumes: - List(volume_spec) - Volumes is a collection of additional volumes to create for instances within this instance group.
        :param pulumi.Input['InstanceGroupWarmPoolArgs'] warm_pool: - warm_pool_spec - WarmPool specifies a pool of pre-warmed instances for later use (AWS only).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zones: - List(String) - Zones is the names of the Zones where machines in this instance group should be placed<br />This is needed for regional subnets (e.g. GCE), to restrict placement to particular zones.
        """
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "machine_type", machine_type)
        pulumi.set(__self__, "max_size", max_size)
        pulumi.set(__self__, "min_size", min_size)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "subnets", subnets)
        if additional_security_groups is not None:
            pulumi.set(__self__, "additional_security_groups", additional_security_groups)
        if additional_user_datas is not None:
            pulumi.set(__self__, "additional_user_datas", additional_user_datas)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if associate_public_ip is not None:
            pulumi.set(__self__, "associate_public_ip", associate_public_ip)
        if autoscale is not None:
            pulumi.set(__self__, "autoscale", autoscale)
        if cloud_labels is not None:
            pulumi.set(__self__, "cloud_labels", cloud_labels)
        if compress_user_data is not None:
            pulumi.set(__self__, "compress_user_data", compress_user_data)
        if containerd is not None:
            pulumi.set(__self__, "containerd", containerd)
        if cpu_credits is not None:
            pulumi.set(__self__, "cpu_credits", cpu_credits)
        if detailed_instance_monitoring is not None:
            pulumi.set(__self__, "detailed_instance_monitoring", detailed_instance_monitoring)
        if external_load_balancers is not None:
            pulumi.set(__self__, "external_load_balancers", external_load_balancers)
        if file_assets is not None:
            pulumi.set(__self__, "file_assets", file_assets)
        if gcp_provisioning_model is not None:
            pulumi.set(__self__, "gcp_provisioning_model", gcp_provisioning_model)
        if guest_accelerators is not None:
            pulumi.set(__self__, "guest_accelerators", guest_accelerators)
        if hooks is not None:
            pulumi.set(__self__, "hooks", hooks)
        if iam is not None:
            pulumi.set(__self__, "iam", iam)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if instance_interruption_behavior is not None:
            pulumi.set(__self__, "instance_interruption_behavior", instance_interruption_behavior)
        if instance_metadata is not None:
            pulumi.set(__self__, "instance_metadata", instance_metadata)
        if instance_protection is not None:
            pulumi.set(__self__, "instance_protection", instance_protection)
        if kubelet is not None:
            pulumi.set(__self__, "kubelet", kubelet)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if manager is not None:
            pulumi.set(__self__, "manager", manager)
        if max_instance_lifetime is not None:
            pulumi.set(__self__, "max_instance_lifetime", max_instance_lifetime)
        if max_price is not None:
            pulumi.set(__self__, "max_price", max_price)
        if mixed_instances_policy is not None:
            pulumi.set(__self__, "mixed_instances_policy", mixed_instances_policy)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_labels is not None:
            pulumi.set(__self__, "node_labels", node_labels)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if rolling_update is not None:
            pulumi.set(__self__, "rolling_update", rolling_update)
        if root_volume_encryption is not None:
            pulumi.set(__self__, "root_volume_encryption", root_volume_encryption)
        if root_volume_encryption_key is not None:
            pulumi.set(__self__, "root_volume_encryption_key", root_volume_encryption_key)
        if root_volume_iops is not None:
            pulumi.set(__self__, "root_volume_iops", root_volume_iops)
        if root_volume_optimization is not None:
            pulumi.set(__self__, "root_volume_optimization", root_volume_optimization)
        if root_volume_size is not None:
            pulumi.set(__self__, "root_volume_size", root_volume_size)
        if root_volume_throughput is not None:
            pulumi.set(__self__, "root_volume_throughput", root_volume_throughput)
        if root_volume_type is not None:
            pulumi.set(__self__, "root_volume_type", root_volume_type)
        if security_group_override is not None:
            pulumi.set(__self__, "security_group_override", security_group_override)
        if spot_duration_in_minutes is not None:
            pulumi.set(__self__, "spot_duration_in_minutes", spot_duration_in_minutes)
        if suspend_processes is not None:
            pulumi.set(__self__, "suspend_processes", suspend_processes)
        if sysctl_parameters is not None:
            pulumi.set(__self__, "sysctl_parameters", sysctl_parameters)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)
        if tenancy is not None:
            pulumi.set(__self__, "tenancy", tenancy)
        if update_policy is not None:
            pulumi.set(__self__, "update_policy", update_policy)
        if volume_mounts is not None:
            pulumi.set(__self__, "volume_mounts", volume_mounts)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)
        if warm_pool is not None:
            pulumi.set(__self__, "warm_pool", warm_pool)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Input[str]:
        """
        - (Force new) - String - ClusterName defines the cluster name the instance group belongs to.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> pulumi.Input[str]:
        """
        - String - MachineType is the instance class.
        """
        return pulumi.get(self, "machine_type")

    @machine_type.setter
    def machine_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "machine_type", value)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> pulumi.Input[int]:
        """
        - Int - MaxSize is the maximum size of the pool.
        """
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_size", value)

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> pulumi.Input[int]:
        """
        - Int - MinSize is the minimum size of the pool.
        """
        return pulumi.get(self, "min_size")

    @min_size.setter
    def min_size(self, value: pulumi.Input[int]):
        pulumi.set(self, "min_size", value)

    @property
    @pulumi.getter
    def role(self) -> pulumi.Input[str]:
        """
        - String - Type determines the role of instances in this instance group: masters or nodes.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: pulumi.Input[str]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def subnets(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        - List(String) - Subnets is the names of the Subnets (as specified in the Cluster) where machines in this instance group should be placed.
        """
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "subnets", value)

    @property
    @pulumi.getter(name="additionalSecurityGroups")
    def additional_security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        - List(String) - AdditionalSecurityGroups attaches additional security groups (e.g. i-123456).
        """
        return pulumi.get(self, "additional_security_groups")

    @additional_security_groups.setter
    def additional_security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "additional_security_groups", value)

    @property
    @pulumi.getter(name="additionalUserDatas")
    def additional_user_datas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceGroupAdditionalUserDataArgs']]]]:
        """
        - List(user_data) - AdditionalUserData is any additional user-data to be passed to the host.
        """
        return pulumi.get(self, "additional_user_datas")

    @additional_user_datas.setter
    def additional_user_datas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceGroupAdditionalUserDataArgs']]]]):
        pulumi.set(self, "additional_user_datas", value)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        - Map(String) - Annotations is an unstructured key value map stored with a resource that may be<br />set by external tools to store and retrieve arbitrary metadata. They are not<br />queryable and should be preserved when modifying objects.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter(name="associatePublicIp")
    def associate_public_ip(self) -> Optional[pulumi.Input[bool]]:
        """
        - Bool - AssociatePublicIP is true if we want instances to have a public IP.
        """
        return pulumi.get(self, "associate_public_ip")

    @associate_public_ip.setter
    def associate_public_ip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "associate_public_ip", value)

    @property
    @pulumi.getter
    def autoscale(self) -> Optional[pulumi.Input[bool]]:
        """
        - Bool - Autoscale determines if autoscaling will be enabled for this instance group if cluster autoscaler is enabled.
        """
        return pulumi.get(self, "autoscale")

    @autoscale.setter
    def autoscale(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "autoscale", value)

    @property
    @pulumi.getter(name="cloudLabels")
    def cloud_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        - Map(String) - CloudLabels defines additional tags or labels on cloud provider resources.
        """
        return pulumi.get(self, "cloud_labels")

    @cloud_labels.setter
    def cloud_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "cloud_labels", value)

    @property
    @pulumi.getter(name="compressUserData")
    def compress_user_data(self) -> Optional[pulumi.Input[bool]]:
        """
        - Bool - CompressUserData compresses parts of the user data to save space.
        """
        return pulumi.get(self, "compress_user_data")

    @compress_user_data.setter
    def compress_user_data(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "compress_user_data", value)

    @property
    @pulumi.getter
    def containerd(self) -> Optional[pulumi.Input['InstanceGroupContainerdArgs']]:
        """
        - containerd_config - Containerd specifies override configuration for instance group.
        """
        return pulumi.get(self, "containerd")

    @containerd.setter
    def containerd(self, value: Optional[pulumi.Input['InstanceGroupContainerdArgs']]):
        pulumi.set(self, "containerd", value)

    @property
    @pulumi.getter(name="cpuCredits")
    def cpu_credits(self) -> Optional[pulumi.Input[str]]:
        """
        - String - CPUCredits is the credit option for CPU Usage on burstable instance types (AWS only).
        """
        return pulumi.get(self, "cpu_credits")

    @cpu_credits.setter
    def cpu_credits(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_credits", value)

    @property
    @pulumi.getter(name="detailedInstanceMonitoring")
    def detailed_instance_monitoring(self) -> Optional[pulumi.Input[bool]]:
        """
        - Bool - DetailedInstanceMonitoring defines if detailed-monitoring is enabled (AWS only).
        """
        return pulumi.get(self, "detailed_instance_monitoring")

    @detailed_instance_monitoring.setter
    def detailed_instance_monitoring(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "detailed_instance_monitoring", value)

    @property
    @pulumi.getter(name="externalLoadBalancers")
    def external_load_balancers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceGroupExternalLoadBalancerArgs']]]]:
        """
        - List(load_balancer) - ExternalLoadBalancers define loadbalancers that should be attached to this instance group.
        """
        return pulumi.get(self, "external_load_balancers")

    @external_load_balancers.setter
    def external_load_balancers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceGroupExternalLoadBalancerArgs']]]]):
        pulumi.set(self, "external_load_balancers", value)

    @property
    @pulumi.getter(name="fileAssets")
    def file_assets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceGroupFileAssetArgs']]]]:
        """
        - List(file_asset_spec) - FileAssets is a collection of file assets for this instance group.
        """
        return pulumi.get(self, "file_assets")

    @file_assets.setter
    def file_assets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceGroupFileAssetArgs']]]]):
        pulumi.set(self, "file_assets", value)

    @property
    @pulumi.getter(name="gcpProvisioningModel")
    def gcp_provisioning_model(self) -> Optional[pulumi.Input[str]]:
        """
        - String - GCPProvisioningModel: Specifies the provisioning model of the GCP instance.<br />Valid values:<br />  'STANDARD': (default) standard provisioning with user controlled run time, no discounts<br />  'SPOT': heavily discounted, no guaranteed run time.
        """
        return pulumi.get(self, "gcp_provisioning_model")

    @gcp_provisioning_model.setter
    def gcp_provisioning_model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gcp_provisioning_model", value)

    @property
    @pulumi.getter(name="guestAccelerators")
    def guest_accelerators(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceGroupGuestAcceleratorArgs']]]]:
        """
        - List(accelerator_config) - GuestAccelerators configures additional accelerators.
        """
        return pulumi.get(self, "guest_accelerators")

    @guest_accelerators.setter
    def guest_accelerators(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceGroupGuestAcceleratorArgs']]]]):
        pulumi.set(self, "guest_accelerators", value)

    @property
    @pulumi.getter
    def hooks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceGroupHookArgs']]]]:
        """
        - List(hook_spec) - Hooks is a list of hooks for this instance group, note: these can override the cluster wide ones if required.
        """
        return pulumi.get(self, "hooks")

    @hooks.setter
    def hooks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceGroupHookArgs']]]]):
        pulumi.set(self, "hooks", value)

    @property
    @pulumi.getter
    def iam(self) -> Optional[pulumi.Input['InstanceGroupIamArgs']]:
        """
        - iam_profile_spec - IAMProfileSpec defines the identity of the cloud group IAM profile (AWS only).
        """
        return pulumi.get(self, "iam")

    @iam.setter
    def iam(self, value: Optional[pulumi.Input['InstanceGroupIamArgs']]):
        pulumi.set(self, "iam", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        """
        - (Computed) - String - Image is the instance (ami etc) we should use.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="instanceInterruptionBehavior")
    def instance_interruption_behavior(self) -> Optional[pulumi.Input[str]]:
        """
        - String - InstanceInterruptionBehavior defines if a spot instance should be terminated, hibernated,<br />or stopped after interruption.
        """
        return pulumi.get(self, "instance_interruption_behavior")

    @instance_interruption_behavior.setter
    def instance_interruption_behavior(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_interruption_behavior", value)

    @property
    @pulumi.getter(name="instanceMetadata")
    def instance_metadata(self) -> Optional[pulumi.Input['InstanceGroupInstanceMetadataArgs']]:
        """
        - instance_metadata_options - InstanceMetadata defines the EC2 instance metadata service options (AWS Only).
        """
        return pulumi.get(self, "instance_metadata")

    @instance_metadata.setter
    def instance_metadata(self, value: Optional[pulumi.Input['InstanceGroupInstanceMetadataArgs']]):
        pulumi.set(self, "instance_metadata", value)

    @property
    @pulumi.getter(name="instanceProtection")
    def instance_protection(self) -> Optional[pulumi.Input[bool]]:
        """
        - Bool - InstanceProtection makes new instances in an autoscaling group protected from scale in.
        """
        return pulumi.get(self, "instance_protection")

    @instance_protection.setter
    def instance_protection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "instance_protection", value)

    @property
    @pulumi.getter
    def kubelet(self) -> Optional[pulumi.Input['InstanceGroupKubeletArgs']]:
        """
        - (Computed) - kubelet_config_spec - Kubelet overrides kubelet config from the ClusterSpec.
        """
        return pulumi.get(self, "kubelet")

    @kubelet.setter
    def kubelet(self, value: Optional[pulumi.Input['InstanceGroupKubeletArgs']]):
        pulumi.set(self, "kubelet", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        - Map(String) - Map of string keys and values that can be used to organize and categorize<br />(scope and select) objects. May match selectors of replication controllers<br />and services.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def manager(self) -> Optional[pulumi.Input[str]]:
        """
        - (Computed) - String - Manager determines what is managing the node lifecycle.
        """
        return pulumi.get(self, "manager")

    @manager.setter
    def manager(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "manager", value)

    @property
    @pulumi.getter(name="maxInstanceLifetime")
    def max_instance_lifetime(self) -> Optional[pulumi.Input[str]]:
        """
        - Duration - MaxInstanceLifetime to the maximum amount of time, in seconds, that an instance can be in service.<br />Value expected must be in form of duration ("ms", "s", "m", "h").
        """
        return pulumi.get(self, "max_instance_lifetime")

    @max_instance_lifetime.setter
    def max_instance_lifetime(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_instance_lifetime", value)

    @property
    @pulumi.getter(name="maxPrice")
    def max_price(self) -> Optional[pulumi.Input[str]]:
        """
        - String - MaxPrice indicates this is a spot-pricing group, with the specified value as our max-price bid.
        """
        return pulumi.get(self, "max_price")

    @max_price.setter
    def max_price(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_price", value)

    @property
    @pulumi.getter(name="mixedInstancesPolicy")
    def mixed_instances_policy(self) -> Optional[pulumi.Input['InstanceGroupMixedInstancesPolicyArgs']]:
        """
        - mixed_instances_policy_spec - MixedInstancesPolicy defined a optional backing of an AWS ASG by a EC2 Fleet (AWS Only).
        """
        return pulumi.get(self, "mixed_instances_policy")

    @mixed_instances_policy.setter
    def mixed_instances_policy(self, value: Optional[pulumi.Input['InstanceGroupMixedInstancesPolicyArgs']]):
        pulumi.set(self, "mixed_instances_policy", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - (Force new) - String - Name defines the instance group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodeLabels")
    def node_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        - Map(String) - NodeLabels indicates the kubernetes labels for nodes in this instance group.
        """
        return pulumi.get(self, "node_labels")

    @node_labels.setter
    def node_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "node_labels", value)

    @property
    @pulumi.getter
    def packages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        - List(String) - Packages specifies additional packages to be installed.
        """
        return pulumi.get(self, "packages")

    @packages.setter
    def packages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "packages", value)

    @property
    @pulumi.getter(name="rollingUpdate")
    def rolling_update(self) -> Optional[pulumi.Input['InstanceGroupRollingUpdateArgs']]:
        """
        - rolling_update - RollingUpdate defines the rolling-update behavior.
        """
        return pulumi.get(self, "rolling_update")

    @rolling_update.setter
    def rolling_update(self, value: Optional[pulumi.Input['InstanceGroupRollingUpdateArgs']]):
        pulumi.set(self, "rolling_update", value)

    @property
    @pulumi.getter(name="rootVolumeEncryption")
    def root_volume_encryption(self) -> Optional[pulumi.Input[bool]]:
        """
        - Bool - RootVolumeEncryption enables EBS root volume encryption for an instance.
        """
        return pulumi.get(self, "root_volume_encryption")

    @root_volume_encryption.setter
    def root_volume_encryption(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "root_volume_encryption", value)

    @property
    @pulumi.getter(name="rootVolumeEncryptionKey")
    def root_volume_encryption_key(self) -> Optional[pulumi.Input[str]]:
        """
        - String - RootVolumeEncryptionKey provides the key identifier for root volume encryption.
        """
        return pulumi.get(self, "root_volume_encryption_key")

    @root_volume_encryption_key.setter
    def root_volume_encryption_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_volume_encryption_key", value)

    @property
    @pulumi.getter(name="rootVolumeIops")
    def root_volume_iops(self) -> Optional[pulumi.Input[int]]:
        """
        - Int - RootVolumeIOPS is the provisioned IOPS when the volume type is io1, io2 or gp3 (AWS only).
        """
        return pulumi.get(self, "root_volume_iops")

    @root_volume_iops.setter
    def root_volume_iops(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "root_volume_iops", value)

    @property
    @pulumi.getter(name="rootVolumeOptimization")
    def root_volume_optimization(self) -> Optional[pulumi.Input[bool]]:
        """
        - Bool - RootVolumeOptimization enables EBS optimization for an instance.
        """
        return pulumi.get(self, "root_volume_optimization")

    @root_volume_optimization.setter
    def root_volume_optimization(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "root_volume_optimization", value)

    @property
    @pulumi.getter(name="rootVolumeSize")
    def root_volume_size(self) -> Optional[pulumi.Input[int]]:
        """
        - Int - RootVolumeSize is the size of the EBS root volume to use, in GB.
        """
        return pulumi.get(self, "root_volume_size")

    @root_volume_size.setter
    def root_volume_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "root_volume_size", value)

    @property
    @pulumi.getter(name="rootVolumeThroughput")
    def root_volume_throughput(self) -> Optional[pulumi.Input[int]]:
        """
        - Int - RootVolumeThroughput is the volume throughput in MBps when the volume type is gp3 (AWS only).
        """
        return pulumi.get(self, "root_volume_throughput")

    @root_volume_throughput.setter
    def root_volume_throughput(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "root_volume_throughput", value)

    @property
    @pulumi.getter(name="rootVolumeType")
    def root_volume_type(self) -> Optional[pulumi.Input[str]]:
        """
        - String - RootVolumeType is the type of the EBS root volume to use (e.g. gp2).
        """
        return pulumi.get(self, "root_volume_type")

    @root_volume_type.setter
    def root_volume_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_volume_type", value)

    @property
    @pulumi.getter(name="securityGroupOverride")
    def security_group_override(self) -> Optional[pulumi.Input[str]]:
        """
        - String - SecurityGroupOverride overrides the default security group created by Kops for this IG (AWS only).
        """
        return pulumi.get(self, "security_group_override")

    @security_group_override.setter
    def security_group_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_group_override", value)

    @property
    @pulumi.getter(name="spotDurationInMinutes")
    def spot_duration_in_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        - Int - SpotDurationInMinutes reserves a spot block for the period specified.
        """
        return pulumi.get(self, "spot_duration_in_minutes")

    @spot_duration_in_minutes.setter
    def spot_duration_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "spot_duration_in_minutes", value)

    @property
    @pulumi.getter(name="suspendProcesses")
    def suspend_processes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        - List(String) - SuspendProcesses disables the listed Scaling Policies.
        """
        return pulumi.get(self, "suspend_processes")

    @suspend_processes.setter
    def suspend_processes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "suspend_processes", value)

    @property
    @pulumi.getter(name="sysctlParameters")
    def sysctl_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        - List(String) - SysctlParameters will configure kernel parameters using sysctl(8). When<br />specified, each parameter must follow the form variable=value, the way<br />it would appear in sysctl.conf.
        """
        return pulumi.get(self, "sysctl_parameters")

    @sysctl_parameters.setter
    def sysctl_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sysctl_parameters", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        - List(String) - Taints indicates the kubernetes taints for nodes in this instance group.
        """
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "taints", value)

    @property
    @pulumi.getter
    def tenancy(self) -> Optional[pulumi.Input[str]]:
        """
        - String - Describes the tenancy of this instance group. Can be either default or dedicated. Currently only applies to AWS.
        """
        return pulumi.get(self, "tenancy")

    @tenancy.setter
    def tenancy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenancy", value)

    @property
    @pulumi.getter(name="updatePolicy")
    def update_policy(self) -> Optional[pulumi.Input[str]]:
        """
        - String - UpdatePolicy determines the policy for applying upgrades automatically.<br />If specified, this value overrides a value specified in the Cluster's "spec.updatePolicy" field.<br />Valid values:<br />  'automatic' (default): apply updates automatically (apply OS security upgrades, avoiding rebooting when possible)<br />  'external': do not apply updates automatically; they are applied manually or by an external system.
        """
        return pulumi.get(self, "update_policy")

    @update_policy.setter
    def update_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_policy", value)

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceGroupVolumeMountArgs']]]]:
        """
        - List(volume_mount_spec) - VolumeMounts a collection of volume mounts.
        """
        return pulumi.get(self, "volume_mounts")

    @volume_mounts.setter
    def volume_mounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceGroupVolumeMountArgs']]]]):
        pulumi.set(self, "volume_mounts", value)

    @property
    @pulumi.getter
    def volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceGroupVolumeArgs']]]]:
        """
        - List(volume_spec) - Volumes is a collection of additional volumes to create for instances within this instance group.
        """
        return pulumi.get(self, "volumes")

    @volumes.setter
    def volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceGroupVolumeArgs']]]]):
        pulumi.set(self, "volumes", value)

    @property
    @pulumi.getter(name="warmPool")
    def warm_pool(self) -> Optional[pulumi.Input['InstanceGroupWarmPoolArgs']]:
        """
        - warm_pool_spec - WarmPool specifies a pool of pre-warmed instances for later use (AWS only).
        """
        return pulumi.get(self, "warm_pool")

    @warm_pool.setter
    def warm_pool(self, value: Optional[pulumi.Input['InstanceGroupWarmPoolArgs']]):
        pulumi.set(self, "warm_pool", value)

    @property
    @pulumi.getter
    def zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        - List(String) - Zones is the names of the Zones where machines in this instance group should be placed<br />This is needed for regional subnets (e.g. GCE), to restrict placement to particular zones.
        """
        return pulumi.get(self, "zones")

    @zones.setter
    def zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "zones", value)


@pulumi.input_type
class _InstanceGroupState:
    def __init__(__self__, *,
                 additional_security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 additional_user_datas: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceGroupAdditionalUserDataArgs']]]] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 associate_public_ip: Optional[pulumi.Input[bool]] = None,
                 autoscale: Optional[pulumi.Input[bool]] = None,
                 cloud_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 compress_user_data: Optional[pulumi.Input[bool]] = None,
                 containerd: Optional[pulumi.Input['InstanceGroupContainerdArgs']] = None,
                 cpu_credits: Optional[pulumi.Input[str]] = None,
                 detailed_instance_monitoring: Optional[pulumi.Input[bool]] = None,
                 external_load_balancers: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceGroupExternalLoadBalancerArgs']]]] = None,
                 file_assets: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceGroupFileAssetArgs']]]] = None,
                 gcp_provisioning_model: Optional[pulumi.Input[str]] = None,
                 guest_accelerators: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceGroupGuestAcceleratorArgs']]]] = None,
                 hooks: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceGroupHookArgs']]]] = None,
                 iam: Optional[pulumi.Input['InstanceGroupIamArgs']] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 instance_interruption_behavior: Optional[pulumi.Input[str]] = None,
                 instance_metadata: Optional[pulumi.Input['InstanceGroupInstanceMetadataArgs']] = None,
                 instance_protection: Optional[pulumi.Input[bool]] = None,
                 kubelet: Optional[pulumi.Input['InstanceGroupKubeletArgs']] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 machine_type: Optional[pulumi.Input[str]] = None,
                 manager: Optional[pulumi.Input[str]] = None,
                 max_instance_lifetime: Optional[pulumi.Input[str]] = None,
                 max_price: Optional[pulumi.Input[str]] = None,
                 max_size: Optional[pulumi.Input[int]] = None,
                 min_size: Optional[pulumi.Input[int]] = None,
                 mixed_instances_policy: Optional[pulumi.Input['InstanceGroupMixedInstancesPolicyArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 packages: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 revision: Optional[pulumi.Input[int]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 rolling_update: Optional[pulumi.Input['InstanceGroupRollingUpdateArgs']] = None,
                 root_volume_encryption: Optional[pulumi.Input[bool]] = None,
                 root_volume_encryption_key: Optional[pulumi.Input[str]] = None,
                 root_volume_iops: Optional[pulumi.Input[int]] = None,
                 root_volume_optimization: Optional[pulumi.Input[bool]] = None,
                 root_volume_size: Optional[pulumi.Input[int]] = None,
                 root_volume_throughput: Optional[pulumi.Input[int]] = None,
                 root_volume_type: Optional[pulumi.Input[str]] = None,
                 security_group_override: Optional[pulumi.Input[str]] = None,
                 spot_duration_in_minutes: Optional[pulumi.Input[int]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 suspend_processes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sysctl_parameters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenancy: Optional[pulumi.Input[str]] = None,
                 update_policy: Optional[pulumi.Input[str]] = None,
                 volume_mounts: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceGroupVolumeMountArgs']]]] = None,
                 volumes: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceGroupVolumeArgs']]]] = None,
                 warm_pool: Optional[pulumi.Input['InstanceGroupWarmPoolArgs']] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering InstanceGroup resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] additional_security_groups: - List(String) - AdditionalSecurityGroups attaches additional security groups (e.g. i-123456).
        :param pulumi.Input[Sequence[pulumi.Input['InstanceGroupAdditionalUserDataArgs']]] additional_user_datas: - List(user_data) - AdditionalUserData is any additional user-data to be passed to the host.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: - Map(String) - Annotations is an unstructured key value map stored with a resource that may be<br />set by external tools to store and retrieve arbitrary metadata. They are not<br />queryable and should be preserved when modifying objects.
        :param pulumi.Input[bool] associate_public_ip: - Bool - AssociatePublicIP is true if we want instances to have a public IP.
        :param pulumi.Input[bool] autoscale: - Bool - Autoscale determines if autoscaling will be enabled for this instance group if cluster autoscaler is enabled.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] cloud_labels: - Map(String) - CloudLabels defines additional tags or labels on cloud provider resources.
        :param pulumi.Input[str] cluster_name: - (Force new) - String - ClusterName defines the cluster name the instance group belongs to.
        :param pulumi.Input[bool] compress_user_data: - Bool - CompressUserData compresses parts of the user data to save space.
        :param pulumi.Input['InstanceGroupContainerdArgs'] containerd: - containerd_config - Containerd specifies override configuration for instance group.
        :param pulumi.Input[str] cpu_credits: - String - CPUCredits is the credit option for CPU Usage on burstable instance types (AWS only).
        :param pulumi.Input[bool] detailed_instance_monitoring: - Bool - DetailedInstanceMonitoring defines if detailed-monitoring is enabled (AWS only).
        :param pulumi.Input[Sequence[pulumi.Input['InstanceGroupExternalLoadBalancerArgs']]] external_load_balancers: - List(load_balancer) - ExternalLoadBalancers define loadbalancers that should be attached to this instance group.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceGroupFileAssetArgs']]] file_assets: - List(file_asset_spec) - FileAssets is a collection of file assets for this instance group.
        :param pulumi.Input[str] gcp_provisioning_model: - String - GCPProvisioningModel: Specifies the provisioning model of the GCP instance.<br />Valid values:<br />  'STANDARD': (default) standard provisioning with user controlled run time, no discounts<br />  'SPOT': heavily discounted, no guaranteed run time.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceGroupGuestAcceleratorArgs']]] guest_accelerators: - List(accelerator_config) - GuestAccelerators configures additional accelerators.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceGroupHookArgs']]] hooks: - List(hook_spec) - Hooks is a list of hooks for this instance group, note: these can override the cluster wide ones if required.
        :param pulumi.Input['InstanceGroupIamArgs'] iam: - iam_profile_spec - IAMProfileSpec defines the identity of the cloud group IAM profile (AWS only).
        :param pulumi.Input[str] image: - (Computed) - String - Image is the instance (ami etc) we should use.
        :param pulumi.Input[str] instance_interruption_behavior: - String - InstanceInterruptionBehavior defines if a spot instance should be terminated, hibernated,<br />or stopped after interruption.
        :param pulumi.Input['InstanceGroupInstanceMetadataArgs'] instance_metadata: - instance_metadata_options - InstanceMetadata defines the EC2 instance metadata service options (AWS Only).
        :param pulumi.Input[bool] instance_protection: - Bool - InstanceProtection makes new instances in an autoscaling group protected from scale in.
        :param pulumi.Input['InstanceGroupKubeletArgs'] kubelet: - (Computed) - kubelet_config_spec - Kubelet overrides kubelet config from the ClusterSpec.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: - Map(String) - Map of string keys and values that can be used to organize and categorize<br />(scope and select) objects. May match selectors of replication controllers<br />and services.
        :param pulumi.Input[str] machine_type: - String - MachineType is the instance class.
        :param pulumi.Input[str] manager: - (Computed) - String - Manager determines what is managing the node lifecycle.
        :param pulumi.Input[str] max_instance_lifetime: - Duration - MaxInstanceLifetime to the maximum amount of time, in seconds, that an instance can be in service.<br />Value expected must be in form of duration ("ms", "s", "m", "h").
        :param pulumi.Input[str] max_price: - String - MaxPrice indicates this is a spot-pricing group, with the specified value as our max-price bid.
        :param pulumi.Input[int] max_size: - Int - MaxSize is the maximum size of the pool.
        :param pulumi.Input[int] min_size: - Int - MinSize is the minimum size of the pool.
        :param pulumi.Input['InstanceGroupMixedInstancesPolicyArgs'] mixed_instances_policy: - mixed_instances_policy_spec - MixedInstancesPolicy defined a optional backing of an AWS ASG by a EC2 Fleet (AWS Only).
        :param pulumi.Input[str] name: - (Force new) - String - Name defines the instance group name.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] node_labels: - Map(String) - NodeLabels indicates the kubernetes labels for nodes in this instance group.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] packages: - List(String) - Packages specifies additional packages to be installed.
        :param pulumi.Input[int] revision: - Int - Revision is incremented every time the resource changes, this is useful for triggering cluster updater.
        :param pulumi.Input[str] role: - String - Type determines the role of instances in this instance group: masters or nodes.
        :param pulumi.Input['InstanceGroupRollingUpdateArgs'] rolling_update: - rolling_update - RollingUpdate defines the rolling-update behavior.
        :param pulumi.Input[bool] root_volume_encryption: - Bool - RootVolumeEncryption enables EBS root volume encryption for an instance.
        :param pulumi.Input[str] root_volume_encryption_key: - String - RootVolumeEncryptionKey provides the key identifier for root volume encryption.
        :param pulumi.Input[int] root_volume_iops: - Int - RootVolumeIOPS is the provisioned IOPS when the volume type is io1, io2 or gp3 (AWS only).
        :param pulumi.Input[bool] root_volume_optimization: - Bool - RootVolumeOptimization enables EBS optimization for an instance.
        :param pulumi.Input[int] root_volume_size: - Int - RootVolumeSize is the size of the EBS root volume to use, in GB.
        :param pulumi.Input[int] root_volume_throughput: - Int - RootVolumeThroughput is the volume throughput in MBps when the volume type is gp3 (AWS only).
        :param pulumi.Input[str] root_volume_type: - String - RootVolumeType is the type of the EBS root volume to use (e.g. gp2).
        :param pulumi.Input[str] security_group_override: - String - SecurityGroupOverride overrides the default security group created by Kops for this IG (AWS only).
        :param pulumi.Input[int] spot_duration_in_minutes: - Int - SpotDurationInMinutes reserves a spot block for the period specified.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnets: - List(String) - Subnets is the names of the Subnets (as specified in the Cluster) where machines in this instance group should be placed.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] suspend_processes: - List(String) - SuspendProcesses disables the listed Scaling Policies.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sysctl_parameters: - List(String) - SysctlParameters will configure kernel parameters using sysctl(8). When<br />specified, each parameter must follow the form variable=value, the way<br />it would appear in sysctl.conf.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] taints: - List(String) - Taints indicates the kubernetes taints for nodes in this instance group.
        :param pulumi.Input[str] tenancy: - String - Describes the tenancy of this instance group. Can be either default or dedicated. Currently only applies to AWS.
        :param pulumi.Input[str] update_policy: - String - UpdatePolicy determines the policy for applying upgrades automatically.<br />If specified, this value overrides a value specified in the Cluster's "spec.updatePolicy" field.<br />Valid values:<br />  'automatic' (default): apply updates automatically (apply OS security upgrades, avoiding rebooting when possible)<br />  'external': do not apply updates automatically; they are applied manually or by an external system.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceGroupVolumeMountArgs']]] volume_mounts: - List(volume_mount_spec) - VolumeMounts a collection of volume mounts.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceGroupVolumeArgs']]] volumes: - List(volume_spec) - Volumes is a collection of additional volumes to create for instances within this instance group.
        :param pulumi.Input['InstanceGroupWarmPoolArgs'] warm_pool: - warm_pool_spec - WarmPool specifies a pool of pre-warmed instances for later use (AWS only).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zones: - List(String) - Zones is the names of the Zones where machines in this instance group should be placed<br />This is needed for regional subnets (e.g. GCE), to restrict placement to particular zones.
        """
        if additional_security_groups is not None:
            pulumi.set(__self__, "additional_security_groups", additional_security_groups)
        if additional_user_datas is not None:
            pulumi.set(__self__, "additional_user_datas", additional_user_datas)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if associate_public_ip is not None:
            pulumi.set(__self__, "associate_public_ip", associate_public_ip)
        if autoscale is not None:
            pulumi.set(__self__, "autoscale", autoscale)
        if cloud_labels is not None:
            pulumi.set(__self__, "cloud_labels", cloud_labels)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if compress_user_data is not None:
            pulumi.set(__self__, "compress_user_data", compress_user_data)
        if containerd is not None:
            pulumi.set(__self__, "containerd", containerd)
        if cpu_credits is not None:
            pulumi.set(__self__, "cpu_credits", cpu_credits)
        if detailed_instance_monitoring is not None:
            pulumi.set(__self__, "detailed_instance_monitoring", detailed_instance_monitoring)
        if external_load_balancers is not None:
            pulumi.set(__self__, "external_load_balancers", external_load_balancers)
        if file_assets is not None:
            pulumi.set(__self__, "file_assets", file_assets)
        if gcp_provisioning_model is not None:
            pulumi.set(__self__, "gcp_provisioning_model", gcp_provisioning_model)
        if guest_accelerators is not None:
            pulumi.set(__self__, "guest_accelerators", guest_accelerators)
        if hooks is not None:
            pulumi.set(__self__, "hooks", hooks)
        if iam is not None:
            pulumi.set(__self__, "iam", iam)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if instance_interruption_behavior is not None:
            pulumi.set(__self__, "instance_interruption_behavior", instance_interruption_behavior)
        if instance_metadata is not None:
            pulumi.set(__self__, "instance_metadata", instance_metadata)
        if instance_protection is not None:
            pulumi.set(__self__, "instance_protection", instance_protection)
        if kubelet is not None:
            pulumi.set(__self__, "kubelet", kubelet)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if machine_type is not None:
            pulumi.set(__self__, "machine_type", machine_type)
        if manager is not None:
            pulumi.set(__self__, "manager", manager)
        if max_instance_lifetime is not None:
            pulumi.set(__self__, "max_instance_lifetime", max_instance_lifetime)
        if max_price is not None:
            pulumi.set(__self__, "max_price", max_price)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if min_size is not None:
            pulumi.set(__self__, "min_size", min_size)
        if mixed_instances_policy is not None:
            pulumi.set(__self__, "mixed_instances_policy", mixed_instances_policy)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_labels is not None:
            pulumi.set(__self__, "node_labels", node_labels)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if rolling_update is not None:
            pulumi.set(__self__, "rolling_update", rolling_update)
        if root_volume_encryption is not None:
            pulumi.set(__self__, "root_volume_encryption", root_volume_encryption)
        if root_volume_encryption_key is not None:
            pulumi.set(__self__, "root_volume_encryption_key", root_volume_encryption_key)
        if root_volume_iops is not None:
            pulumi.set(__self__, "root_volume_iops", root_volume_iops)
        if root_volume_optimization is not None:
            pulumi.set(__self__, "root_volume_optimization", root_volume_optimization)
        if root_volume_size is not None:
            pulumi.set(__self__, "root_volume_size", root_volume_size)
        if root_volume_throughput is not None:
            pulumi.set(__self__, "root_volume_throughput", root_volume_throughput)
        if root_volume_type is not None:
            pulumi.set(__self__, "root_volume_type", root_volume_type)
        if security_group_override is not None:
            pulumi.set(__self__, "security_group_override", security_group_override)
        if spot_duration_in_minutes is not None:
            pulumi.set(__self__, "spot_duration_in_minutes", spot_duration_in_minutes)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)
        if suspend_processes is not None:
            pulumi.set(__self__, "suspend_processes", suspend_processes)
        if sysctl_parameters is not None:
            pulumi.set(__self__, "sysctl_parameters", sysctl_parameters)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)
        if tenancy is not None:
            pulumi.set(__self__, "tenancy", tenancy)
        if update_policy is not None:
            pulumi.set(__self__, "update_policy", update_policy)
        if volume_mounts is not None:
            pulumi.set(__self__, "volume_mounts", volume_mounts)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)
        if warm_pool is not None:
            pulumi.set(__self__, "warm_pool", warm_pool)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter(name="additionalSecurityGroups")
    def additional_security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        - List(String) - AdditionalSecurityGroups attaches additional security groups (e.g. i-123456).
        """
        return pulumi.get(self, "additional_security_groups")

    @additional_security_groups.setter
    def additional_security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "additional_security_groups", value)

    @property
    @pulumi.getter(name="additionalUserDatas")
    def additional_user_datas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceGroupAdditionalUserDataArgs']]]]:
        """
        - List(user_data) - AdditionalUserData is any additional user-data to be passed to the host.
        """
        return pulumi.get(self, "additional_user_datas")

    @additional_user_datas.setter
    def additional_user_datas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceGroupAdditionalUserDataArgs']]]]):
        pulumi.set(self, "additional_user_datas", value)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        - Map(String) - Annotations is an unstructured key value map stored with a resource that may be<br />set by external tools to store and retrieve arbitrary metadata. They are not<br />queryable and should be preserved when modifying objects.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter(name="associatePublicIp")
    def associate_public_ip(self) -> Optional[pulumi.Input[bool]]:
        """
        - Bool - AssociatePublicIP is true if we want instances to have a public IP.
        """
        return pulumi.get(self, "associate_public_ip")

    @associate_public_ip.setter
    def associate_public_ip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "associate_public_ip", value)

    @property
    @pulumi.getter
    def autoscale(self) -> Optional[pulumi.Input[bool]]:
        """
        - Bool - Autoscale determines if autoscaling will be enabled for this instance group if cluster autoscaler is enabled.
        """
        return pulumi.get(self, "autoscale")

    @autoscale.setter
    def autoscale(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "autoscale", value)

    @property
    @pulumi.getter(name="cloudLabels")
    def cloud_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        - Map(String) - CloudLabels defines additional tags or labels on cloud provider resources.
        """
        return pulumi.get(self, "cloud_labels")

    @cloud_labels.setter
    def cloud_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "cloud_labels", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[str]]:
        """
        - (Force new) - String - ClusterName defines the cluster name the instance group belongs to.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="compressUserData")
    def compress_user_data(self) -> Optional[pulumi.Input[bool]]:
        """
        - Bool - CompressUserData compresses parts of the user data to save space.
        """
        return pulumi.get(self, "compress_user_data")

    @compress_user_data.setter
    def compress_user_data(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "compress_user_data", value)

    @property
    @pulumi.getter
    def containerd(self) -> Optional[pulumi.Input['InstanceGroupContainerdArgs']]:
        """
        - containerd_config - Containerd specifies override configuration for instance group.
        """
        return pulumi.get(self, "containerd")

    @containerd.setter
    def containerd(self, value: Optional[pulumi.Input['InstanceGroupContainerdArgs']]):
        pulumi.set(self, "containerd", value)

    @property
    @pulumi.getter(name="cpuCredits")
    def cpu_credits(self) -> Optional[pulumi.Input[str]]:
        """
        - String - CPUCredits is the credit option for CPU Usage on burstable instance types (AWS only).
        """
        return pulumi.get(self, "cpu_credits")

    @cpu_credits.setter
    def cpu_credits(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_credits", value)

    @property
    @pulumi.getter(name="detailedInstanceMonitoring")
    def detailed_instance_monitoring(self) -> Optional[pulumi.Input[bool]]:
        """
        - Bool - DetailedInstanceMonitoring defines if detailed-monitoring is enabled (AWS only).
        """
        return pulumi.get(self, "detailed_instance_monitoring")

    @detailed_instance_monitoring.setter
    def detailed_instance_monitoring(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "detailed_instance_monitoring", value)

    @property
    @pulumi.getter(name="externalLoadBalancers")
    def external_load_balancers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceGroupExternalLoadBalancerArgs']]]]:
        """
        - List(load_balancer) - ExternalLoadBalancers define loadbalancers that should be attached to this instance group.
        """
        return pulumi.get(self, "external_load_balancers")

    @external_load_balancers.setter
    def external_load_balancers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceGroupExternalLoadBalancerArgs']]]]):
        pulumi.set(self, "external_load_balancers", value)

    @property
    @pulumi.getter(name="fileAssets")
    def file_assets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceGroupFileAssetArgs']]]]:
        """
        - List(file_asset_spec) - FileAssets is a collection of file assets for this instance group.
        """
        return pulumi.get(self, "file_assets")

    @file_assets.setter
    def file_assets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceGroupFileAssetArgs']]]]):
        pulumi.set(self, "file_assets", value)

    @property
    @pulumi.getter(name="gcpProvisioningModel")
    def gcp_provisioning_model(self) -> Optional[pulumi.Input[str]]:
        """
        - String - GCPProvisioningModel: Specifies the provisioning model of the GCP instance.<br />Valid values:<br />  'STANDARD': (default) standard provisioning with user controlled run time, no discounts<br />  'SPOT': heavily discounted, no guaranteed run time.
        """
        return pulumi.get(self, "gcp_provisioning_model")

    @gcp_provisioning_model.setter
    def gcp_provisioning_model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gcp_provisioning_model", value)

    @property
    @pulumi.getter(name="guestAccelerators")
    def guest_accelerators(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceGroupGuestAcceleratorArgs']]]]:
        """
        - List(accelerator_config) - GuestAccelerators configures additional accelerators.
        """
        return pulumi.get(self, "guest_accelerators")

    @guest_accelerators.setter
    def guest_accelerators(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceGroupGuestAcceleratorArgs']]]]):
        pulumi.set(self, "guest_accelerators", value)

    @property
    @pulumi.getter
    def hooks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceGroupHookArgs']]]]:
        """
        - List(hook_spec) - Hooks is a list of hooks for this instance group, note: these can override the cluster wide ones if required.
        """
        return pulumi.get(self, "hooks")

    @hooks.setter
    def hooks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceGroupHookArgs']]]]):
        pulumi.set(self, "hooks", value)

    @property
    @pulumi.getter
    def iam(self) -> Optional[pulumi.Input['InstanceGroupIamArgs']]:
        """
        - iam_profile_spec - IAMProfileSpec defines the identity of the cloud group IAM profile (AWS only).
        """
        return pulumi.get(self, "iam")

    @iam.setter
    def iam(self, value: Optional[pulumi.Input['InstanceGroupIamArgs']]):
        pulumi.set(self, "iam", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        """
        - (Computed) - String - Image is the instance (ami etc) we should use.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="instanceInterruptionBehavior")
    def instance_interruption_behavior(self) -> Optional[pulumi.Input[str]]:
        """
        - String - InstanceInterruptionBehavior defines if a spot instance should be terminated, hibernated,<br />or stopped after interruption.
        """
        return pulumi.get(self, "instance_interruption_behavior")

    @instance_interruption_behavior.setter
    def instance_interruption_behavior(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_interruption_behavior", value)

    @property
    @pulumi.getter(name="instanceMetadata")
    def instance_metadata(self) -> Optional[pulumi.Input['InstanceGroupInstanceMetadataArgs']]:
        """
        - instance_metadata_options - InstanceMetadata defines the EC2 instance metadata service options (AWS Only).
        """
        return pulumi.get(self, "instance_metadata")

    @instance_metadata.setter
    def instance_metadata(self, value: Optional[pulumi.Input['InstanceGroupInstanceMetadataArgs']]):
        pulumi.set(self, "instance_metadata", value)

    @property
    @pulumi.getter(name="instanceProtection")
    def instance_protection(self) -> Optional[pulumi.Input[bool]]:
        """
        - Bool - InstanceProtection makes new instances in an autoscaling group protected from scale in.
        """
        return pulumi.get(self, "instance_protection")

    @instance_protection.setter
    def instance_protection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "instance_protection", value)

    @property
    @pulumi.getter
    def kubelet(self) -> Optional[pulumi.Input['InstanceGroupKubeletArgs']]:
        """
        - (Computed) - kubelet_config_spec - Kubelet overrides kubelet config from the ClusterSpec.
        """
        return pulumi.get(self, "kubelet")

    @kubelet.setter
    def kubelet(self, value: Optional[pulumi.Input['InstanceGroupKubeletArgs']]):
        pulumi.set(self, "kubelet", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        - Map(String) - Map of string keys and values that can be used to organize and categorize<br />(scope and select) objects. May match selectors of replication controllers<br />and services.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> Optional[pulumi.Input[str]]:
        """
        - String - MachineType is the instance class.
        """
        return pulumi.get(self, "machine_type")

    @machine_type.setter
    def machine_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "machine_type", value)

    @property
    @pulumi.getter
    def manager(self) -> Optional[pulumi.Input[str]]:
        """
        - (Computed) - String - Manager determines what is managing the node lifecycle.
        """
        return pulumi.get(self, "manager")

    @manager.setter
    def manager(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "manager", value)

    @property
    @pulumi.getter(name="maxInstanceLifetime")
    def max_instance_lifetime(self) -> Optional[pulumi.Input[str]]:
        """
        - Duration - MaxInstanceLifetime to the maximum amount of time, in seconds, that an instance can be in service.<br />Value expected must be in form of duration ("ms", "s", "m", "h").
        """
        return pulumi.get(self, "max_instance_lifetime")

    @max_instance_lifetime.setter
    def max_instance_lifetime(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_instance_lifetime", value)

    @property
    @pulumi.getter(name="maxPrice")
    def max_price(self) -> Optional[pulumi.Input[str]]:
        """
        - String - MaxPrice indicates this is a spot-pricing group, with the specified value as our max-price bid.
        """
        return pulumi.get(self, "max_price")

    @max_price.setter
    def max_price(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_price", value)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[pulumi.Input[int]]:
        """
        - Int - MaxSize is the maximum size of the pool.
        """
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_size", value)

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[pulumi.Input[int]]:
        """
        - Int - MinSize is the minimum size of the pool.
        """
        return pulumi.get(self, "min_size")

    @min_size.setter
    def min_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_size", value)

    @property
    @pulumi.getter(name="mixedInstancesPolicy")
    def mixed_instances_policy(self) -> Optional[pulumi.Input['InstanceGroupMixedInstancesPolicyArgs']]:
        """
        - mixed_instances_policy_spec - MixedInstancesPolicy defined a optional backing of an AWS ASG by a EC2 Fleet (AWS Only).
        """
        return pulumi.get(self, "mixed_instances_policy")

    @mixed_instances_policy.setter
    def mixed_instances_policy(self, value: Optional[pulumi.Input['InstanceGroupMixedInstancesPolicyArgs']]):
        pulumi.set(self, "mixed_instances_policy", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - (Force new) - String - Name defines the instance group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodeLabels")
    def node_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        - Map(String) - NodeLabels indicates the kubernetes labels for nodes in this instance group.
        """
        return pulumi.get(self, "node_labels")

    @node_labels.setter
    def node_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "node_labels", value)

    @property
    @pulumi.getter
    def packages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        - List(String) - Packages specifies additional packages to be installed.
        """
        return pulumi.get(self, "packages")

    @packages.setter
    def packages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "packages", value)

    @property
    @pulumi.getter
    def revision(self) -> Optional[pulumi.Input[int]]:
        """
        - Int - Revision is incremented every time the resource changes, this is useful for triggering cluster updater.
        """
        return pulumi.get(self, "revision")

    @revision.setter
    def revision(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "revision", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        - String - Type determines the role of instances in this instance group: masters or nodes.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="rollingUpdate")
    def rolling_update(self) -> Optional[pulumi.Input['InstanceGroupRollingUpdateArgs']]:
        """
        - rolling_update - RollingUpdate defines the rolling-update behavior.
        """
        return pulumi.get(self, "rolling_update")

    @rolling_update.setter
    def rolling_update(self, value: Optional[pulumi.Input['InstanceGroupRollingUpdateArgs']]):
        pulumi.set(self, "rolling_update", value)

    @property
    @pulumi.getter(name="rootVolumeEncryption")
    def root_volume_encryption(self) -> Optional[pulumi.Input[bool]]:
        """
        - Bool - RootVolumeEncryption enables EBS root volume encryption for an instance.
        """
        return pulumi.get(self, "root_volume_encryption")

    @root_volume_encryption.setter
    def root_volume_encryption(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "root_volume_encryption", value)

    @property
    @pulumi.getter(name="rootVolumeEncryptionKey")
    def root_volume_encryption_key(self) -> Optional[pulumi.Input[str]]:
        """
        - String - RootVolumeEncryptionKey provides the key identifier for root volume encryption.
        """
        return pulumi.get(self, "root_volume_encryption_key")

    @root_volume_encryption_key.setter
    def root_volume_encryption_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_volume_encryption_key", value)

    @property
    @pulumi.getter(name="rootVolumeIops")
    def root_volume_iops(self) -> Optional[pulumi.Input[int]]:
        """
        - Int - RootVolumeIOPS is the provisioned IOPS when the volume type is io1, io2 or gp3 (AWS only).
        """
        return pulumi.get(self, "root_volume_iops")

    @root_volume_iops.setter
    def root_volume_iops(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "root_volume_iops", value)

    @property
    @pulumi.getter(name="rootVolumeOptimization")
    def root_volume_optimization(self) -> Optional[pulumi.Input[bool]]:
        """
        - Bool - RootVolumeOptimization enables EBS optimization for an instance.
        """
        return pulumi.get(self, "root_volume_optimization")

    @root_volume_optimization.setter
    def root_volume_optimization(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "root_volume_optimization", value)

    @property
    @pulumi.getter(name="rootVolumeSize")
    def root_volume_size(self) -> Optional[pulumi.Input[int]]:
        """
        - Int - RootVolumeSize is the size of the EBS root volume to use, in GB.
        """
        return pulumi.get(self, "root_volume_size")

    @root_volume_size.setter
    def root_volume_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "root_volume_size", value)

    @property
    @pulumi.getter(name="rootVolumeThroughput")
    def root_volume_throughput(self) -> Optional[pulumi.Input[int]]:
        """
        - Int - RootVolumeThroughput is the volume throughput in MBps when the volume type is gp3 (AWS only).
        """
        return pulumi.get(self, "root_volume_throughput")

    @root_volume_throughput.setter
    def root_volume_throughput(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "root_volume_throughput", value)

    @property
    @pulumi.getter(name="rootVolumeType")
    def root_volume_type(self) -> Optional[pulumi.Input[str]]:
        """
        - String - RootVolumeType is the type of the EBS root volume to use (e.g. gp2).
        """
        return pulumi.get(self, "root_volume_type")

    @root_volume_type.setter
    def root_volume_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_volume_type", value)

    @property
    @pulumi.getter(name="securityGroupOverride")
    def security_group_override(self) -> Optional[pulumi.Input[str]]:
        """
        - String - SecurityGroupOverride overrides the default security group created by Kops for this IG (AWS only).
        """
        return pulumi.get(self, "security_group_override")

    @security_group_override.setter
    def security_group_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_group_override", value)

    @property
    @pulumi.getter(name="spotDurationInMinutes")
    def spot_duration_in_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        - Int - SpotDurationInMinutes reserves a spot block for the period specified.
        """
        return pulumi.get(self, "spot_duration_in_minutes")

    @spot_duration_in_minutes.setter
    def spot_duration_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "spot_duration_in_minutes", value)

    @property
    @pulumi.getter
    def subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        - List(String) - Subnets is the names of the Subnets (as specified in the Cluster) where machines in this instance group should be placed.
        """
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subnets", value)

    @property
    @pulumi.getter(name="suspendProcesses")
    def suspend_processes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        - List(String) - SuspendProcesses disables the listed Scaling Policies.
        """
        return pulumi.get(self, "suspend_processes")

    @suspend_processes.setter
    def suspend_processes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "suspend_processes", value)

    @property
    @pulumi.getter(name="sysctlParameters")
    def sysctl_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        - List(String) - SysctlParameters will configure kernel parameters using sysctl(8). When<br />specified, each parameter must follow the form variable=value, the way<br />it would appear in sysctl.conf.
        """
        return pulumi.get(self, "sysctl_parameters")

    @sysctl_parameters.setter
    def sysctl_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sysctl_parameters", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        - List(String) - Taints indicates the kubernetes taints for nodes in this instance group.
        """
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "taints", value)

    @property
    @pulumi.getter
    def tenancy(self) -> Optional[pulumi.Input[str]]:
        """
        - String - Describes the tenancy of this instance group. Can be either default or dedicated. Currently only applies to AWS.
        """
        return pulumi.get(self, "tenancy")

    @tenancy.setter
    def tenancy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenancy", value)

    @property
    @pulumi.getter(name="updatePolicy")
    def update_policy(self) -> Optional[pulumi.Input[str]]:
        """
        - String - UpdatePolicy determines the policy for applying upgrades automatically.<br />If specified, this value overrides a value specified in the Cluster's "spec.updatePolicy" field.<br />Valid values:<br />  'automatic' (default): apply updates automatically (apply OS security upgrades, avoiding rebooting when possible)<br />  'external': do not apply updates automatically; they are applied manually or by an external system.
        """
        return pulumi.get(self, "update_policy")

    @update_policy.setter
    def update_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_policy", value)

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceGroupVolumeMountArgs']]]]:
        """
        - List(volume_mount_spec) - VolumeMounts a collection of volume mounts.
        """
        return pulumi.get(self, "volume_mounts")

    @volume_mounts.setter
    def volume_mounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceGroupVolumeMountArgs']]]]):
        pulumi.set(self, "volume_mounts", value)

    @property
    @pulumi.getter
    def volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceGroupVolumeArgs']]]]:
        """
        - List(volume_spec) - Volumes is a collection of additional volumes to create for instances within this instance group.
        """
        return pulumi.get(self, "volumes")

    @volumes.setter
    def volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceGroupVolumeArgs']]]]):
        pulumi.set(self, "volumes", value)

    @property
    @pulumi.getter(name="warmPool")
    def warm_pool(self) -> Optional[pulumi.Input['InstanceGroupWarmPoolArgs']]:
        """
        - warm_pool_spec - WarmPool specifies a pool of pre-warmed instances for later use (AWS only).
        """
        return pulumi.get(self, "warm_pool")

    @warm_pool.setter
    def warm_pool(self, value: Optional[pulumi.Input['InstanceGroupWarmPoolArgs']]):
        pulumi.set(self, "warm_pool", value)

    @property
    @pulumi.getter
    def zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        - List(String) - Zones is the names of the Zones where machines in this instance group should be placed<br />This is needed for regional subnets (e.g. GCE), to restrict placement to particular zones.
        """
        return pulumi.get(self, "zones")

    @zones.setter
    def zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "zones", value)


class InstanceGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 additional_security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 additional_user_datas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceGroupAdditionalUserDataArgs']]]]] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 associate_public_ip: Optional[pulumi.Input[bool]] = None,
                 autoscale: Optional[pulumi.Input[bool]] = None,
                 cloud_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 compress_user_data: Optional[pulumi.Input[bool]] = None,
                 containerd: Optional[pulumi.Input[pulumi.InputType['InstanceGroupContainerdArgs']]] = None,
                 cpu_credits: Optional[pulumi.Input[str]] = None,
                 detailed_instance_monitoring: Optional[pulumi.Input[bool]] = None,
                 external_load_balancers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceGroupExternalLoadBalancerArgs']]]]] = None,
                 file_assets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceGroupFileAssetArgs']]]]] = None,
                 gcp_provisioning_model: Optional[pulumi.Input[str]] = None,
                 guest_accelerators: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceGroupGuestAcceleratorArgs']]]]] = None,
                 hooks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceGroupHookArgs']]]]] = None,
                 iam: Optional[pulumi.Input[pulumi.InputType['InstanceGroupIamArgs']]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 instance_interruption_behavior: Optional[pulumi.Input[str]] = None,
                 instance_metadata: Optional[pulumi.Input[pulumi.InputType['InstanceGroupInstanceMetadataArgs']]] = None,
                 instance_protection: Optional[pulumi.Input[bool]] = None,
                 kubelet: Optional[pulumi.Input[pulumi.InputType['InstanceGroupKubeletArgs']]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 machine_type: Optional[pulumi.Input[str]] = None,
                 manager: Optional[pulumi.Input[str]] = None,
                 max_instance_lifetime: Optional[pulumi.Input[str]] = None,
                 max_price: Optional[pulumi.Input[str]] = None,
                 max_size: Optional[pulumi.Input[int]] = None,
                 min_size: Optional[pulumi.Input[int]] = None,
                 mixed_instances_policy: Optional[pulumi.Input[pulumi.InputType['InstanceGroupMixedInstancesPolicyArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 packages: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 rolling_update: Optional[pulumi.Input[pulumi.InputType['InstanceGroupRollingUpdateArgs']]] = None,
                 root_volume_encryption: Optional[pulumi.Input[bool]] = None,
                 root_volume_encryption_key: Optional[pulumi.Input[str]] = None,
                 root_volume_iops: Optional[pulumi.Input[int]] = None,
                 root_volume_optimization: Optional[pulumi.Input[bool]] = None,
                 root_volume_size: Optional[pulumi.Input[int]] = None,
                 root_volume_throughput: Optional[pulumi.Input[int]] = None,
                 root_volume_type: Optional[pulumi.Input[str]] = None,
                 security_group_override: Optional[pulumi.Input[str]] = None,
                 spot_duration_in_minutes: Optional[pulumi.Input[int]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 suspend_processes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sysctl_parameters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenancy: Optional[pulumi.Input[str]] = None,
                 update_policy: Optional[pulumi.Input[str]] = None,
                 volume_mounts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceGroupVolumeMountArgs']]]]] = None,
                 volumes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceGroupVolumeArgs']]]]] = None,
                 warm_pool: Optional[pulumi.Input[pulumi.InputType['InstanceGroupWarmPoolArgs']]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        ## Import

        You can import an existing cluster by creating a `kops_instance_group` configuration

        ```sh
         $ pulumi import kops:index/instanceGroup:InstanceGroup and running the `terraform import` command
        ```

         1. Create a terraform configuration:

         hcl

         provider "kops" {

         state_store = "s3://cluster.example.com"

         }

         resource "kops_instance_group" "ig-0" {

         cluster_name = "cluster.example.com"

         name

         = "ig-0"

         // ....

         }

        ```sh
         $ pulumi import kops:index/instanceGroup:InstanceGroup

        Run `terraform import`
        ```

        ```sh
         $ pulumi import kops:index/instanceGroup:InstanceGroup kops_instance_group.ig-0 cluster.example.com/ig-0
        ```

         ~> The id of the instance group to be imported must be given in the

        `cluster name/instance group name` format.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] additional_security_groups: - List(String) - AdditionalSecurityGroups attaches additional security groups (e.g. i-123456).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceGroupAdditionalUserDataArgs']]]] additional_user_datas: - List(user_data) - AdditionalUserData is any additional user-data to be passed to the host.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: - Map(String) - Annotations is an unstructured key value map stored with a resource that may be<br />set by external tools to store and retrieve arbitrary metadata. They are not<br />queryable and should be preserved when modifying objects.
        :param pulumi.Input[bool] associate_public_ip: - Bool - AssociatePublicIP is true if we want instances to have a public IP.
        :param pulumi.Input[bool] autoscale: - Bool - Autoscale determines if autoscaling will be enabled for this instance group if cluster autoscaler is enabled.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] cloud_labels: - Map(String) - CloudLabels defines additional tags or labels on cloud provider resources.
        :param pulumi.Input[str] cluster_name: - (Force new) - String - ClusterName defines the cluster name the instance group belongs to.
        :param pulumi.Input[bool] compress_user_data: - Bool - CompressUserData compresses parts of the user data to save space.
        :param pulumi.Input[pulumi.InputType['InstanceGroupContainerdArgs']] containerd: - containerd_config - Containerd specifies override configuration for instance group.
        :param pulumi.Input[str] cpu_credits: - String - CPUCredits is the credit option for CPU Usage on burstable instance types (AWS only).
        :param pulumi.Input[bool] detailed_instance_monitoring: - Bool - DetailedInstanceMonitoring defines if detailed-monitoring is enabled (AWS only).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceGroupExternalLoadBalancerArgs']]]] external_load_balancers: - List(load_balancer) - ExternalLoadBalancers define loadbalancers that should be attached to this instance group.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceGroupFileAssetArgs']]]] file_assets: - List(file_asset_spec) - FileAssets is a collection of file assets for this instance group.
        :param pulumi.Input[str] gcp_provisioning_model: - String - GCPProvisioningModel: Specifies the provisioning model of the GCP instance.<br />Valid values:<br />  'STANDARD': (default) standard provisioning with user controlled run time, no discounts<br />  'SPOT': heavily discounted, no guaranteed run time.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceGroupGuestAcceleratorArgs']]]] guest_accelerators: - List(accelerator_config) - GuestAccelerators configures additional accelerators.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceGroupHookArgs']]]] hooks: - List(hook_spec) - Hooks is a list of hooks for this instance group, note: these can override the cluster wide ones if required.
        :param pulumi.Input[pulumi.InputType['InstanceGroupIamArgs']] iam: - iam_profile_spec - IAMProfileSpec defines the identity of the cloud group IAM profile (AWS only).
        :param pulumi.Input[str] image: - (Computed) - String - Image is the instance (ami etc) we should use.
        :param pulumi.Input[str] instance_interruption_behavior: - String - InstanceInterruptionBehavior defines if a spot instance should be terminated, hibernated,<br />or stopped after interruption.
        :param pulumi.Input[pulumi.InputType['InstanceGroupInstanceMetadataArgs']] instance_metadata: - instance_metadata_options - InstanceMetadata defines the EC2 instance metadata service options (AWS Only).
        :param pulumi.Input[bool] instance_protection: - Bool - InstanceProtection makes new instances in an autoscaling group protected from scale in.
        :param pulumi.Input[pulumi.InputType['InstanceGroupKubeletArgs']] kubelet: - (Computed) - kubelet_config_spec - Kubelet overrides kubelet config from the ClusterSpec.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: - Map(String) - Map of string keys and values that can be used to organize and categorize<br />(scope and select) objects. May match selectors of replication controllers<br />and services.
        :param pulumi.Input[str] machine_type: - String - MachineType is the instance class.
        :param pulumi.Input[str] manager: - (Computed) - String - Manager determines what is managing the node lifecycle.
        :param pulumi.Input[str] max_instance_lifetime: - Duration - MaxInstanceLifetime to the maximum amount of time, in seconds, that an instance can be in service.<br />Value expected must be in form of duration ("ms", "s", "m", "h").
        :param pulumi.Input[str] max_price: - String - MaxPrice indicates this is a spot-pricing group, with the specified value as our max-price bid.
        :param pulumi.Input[int] max_size: - Int - MaxSize is the maximum size of the pool.
        :param pulumi.Input[int] min_size: - Int - MinSize is the minimum size of the pool.
        :param pulumi.Input[pulumi.InputType['InstanceGroupMixedInstancesPolicyArgs']] mixed_instances_policy: - mixed_instances_policy_spec - MixedInstancesPolicy defined a optional backing of an AWS ASG by a EC2 Fleet (AWS Only).
        :param pulumi.Input[str] name: - (Force new) - String - Name defines the instance group name.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] node_labels: - Map(String) - NodeLabels indicates the kubernetes labels for nodes in this instance group.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] packages: - List(String) - Packages specifies additional packages to be installed.
        :param pulumi.Input[str] role: - String - Type determines the role of instances in this instance group: masters or nodes.
        :param pulumi.Input[pulumi.InputType['InstanceGroupRollingUpdateArgs']] rolling_update: - rolling_update - RollingUpdate defines the rolling-update behavior.
        :param pulumi.Input[bool] root_volume_encryption: - Bool - RootVolumeEncryption enables EBS root volume encryption for an instance.
        :param pulumi.Input[str] root_volume_encryption_key: - String - RootVolumeEncryptionKey provides the key identifier for root volume encryption.
        :param pulumi.Input[int] root_volume_iops: - Int - RootVolumeIOPS is the provisioned IOPS when the volume type is io1, io2 or gp3 (AWS only).
        :param pulumi.Input[bool] root_volume_optimization: - Bool - RootVolumeOptimization enables EBS optimization for an instance.
        :param pulumi.Input[int] root_volume_size: - Int - RootVolumeSize is the size of the EBS root volume to use, in GB.
        :param pulumi.Input[int] root_volume_throughput: - Int - RootVolumeThroughput is the volume throughput in MBps when the volume type is gp3 (AWS only).
        :param pulumi.Input[str] root_volume_type: - String - RootVolumeType is the type of the EBS root volume to use (e.g. gp2).
        :param pulumi.Input[str] security_group_override: - String - SecurityGroupOverride overrides the default security group created by Kops for this IG (AWS only).
        :param pulumi.Input[int] spot_duration_in_minutes: - Int - SpotDurationInMinutes reserves a spot block for the period specified.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnets: - List(String) - Subnets is the names of the Subnets (as specified in the Cluster) where machines in this instance group should be placed.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] suspend_processes: - List(String) - SuspendProcesses disables the listed Scaling Policies.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sysctl_parameters: - List(String) - SysctlParameters will configure kernel parameters using sysctl(8). When<br />specified, each parameter must follow the form variable=value, the way<br />it would appear in sysctl.conf.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] taints: - List(String) - Taints indicates the kubernetes taints for nodes in this instance group.
        :param pulumi.Input[str] tenancy: - String - Describes the tenancy of this instance group. Can be either default or dedicated. Currently only applies to AWS.
        :param pulumi.Input[str] update_policy: - String - UpdatePolicy determines the policy for applying upgrades automatically.<br />If specified, this value overrides a value specified in the Cluster's "spec.updatePolicy" field.<br />Valid values:<br />  'automatic' (default): apply updates automatically (apply OS security upgrades, avoiding rebooting when possible)<br />  'external': do not apply updates automatically; they are applied manually or by an external system.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceGroupVolumeMountArgs']]]] volume_mounts: - List(volume_mount_spec) - VolumeMounts a collection of volume mounts.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceGroupVolumeArgs']]]] volumes: - List(volume_spec) - Volumes is a collection of additional volumes to create for instances within this instance group.
        :param pulumi.Input[pulumi.InputType['InstanceGroupWarmPoolArgs']] warm_pool: - warm_pool_spec - WarmPool specifies a pool of pre-warmed instances for later use (AWS only).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zones: - List(String) - Zones is the names of the Zones where machines in this instance group should be placed<br />This is needed for regional subnets (e.g. GCE), to restrict placement to particular zones.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstanceGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Import

        You can import an existing cluster by creating a `kops_instance_group` configuration

        ```sh
         $ pulumi import kops:index/instanceGroup:InstanceGroup and running the `terraform import` command
        ```

         1. Create a terraform configuration:

         hcl

         provider "kops" {

         state_store = "s3://cluster.example.com"

         }

         resource "kops_instance_group" "ig-0" {

         cluster_name = "cluster.example.com"

         name

         = "ig-0"

         // ....

         }

        ```sh
         $ pulumi import kops:index/instanceGroup:InstanceGroup

        Run `terraform import`
        ```

        ```sh
         $ pulumi import kops:index/instanceGroup:InstanceGroup kops_instance_group.ig-0 cluster.example.com/ig-0
        ```

         ~> The id of the instance group to be imported must be given in the

        `cluster name/instance group name` format.

        :param str resource_name: The name of the resource.
        :param InstanceGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 additional_security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 additional_user_datas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceGroupAdditionalUserDataArgs']]]]] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 associate_public_ip: Optional[pulumi.Input[bool]] = None,
                 autoscale: Optional[pulumi.Input[bool]] = None,
                 cloud_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 compress_user_data: Optional[pulumi.Input[bool]] = None,
                 containerd: Optional[pulumi.Input[pulumi.InputType['InstanceGroupContainerdArgs']]] = None,
                 cpu_credits: Optional[pulumi.Input[str]] = None,
                 detailed_instance_monitoring: Optional[pulumi.Input[bool]] = None,
                 external_load_balancers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceGroupExternalLoadBalancerArgs']]]]] = None,
                 file_assets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceGroupFileAssetArgs']]]]] = None,
                 gcp_provisioning_model: Optional[pulumi.Input[str]] = None,
                 guest_accelerators: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceGroupGuestAcceleratorArgs']]]]] = None,
                 hooks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceGroupHookArgs']]]]] = None,
                 iam: Optional[pulumi.Input[pulumi.InputType['InstanceGroupIamArgs']]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 instance_interruption_behavior: Optional[pulumi.Input[str]] = None,
                 instance_metadata: Optional[pulumi.Input[pulumi.InputType['InstanceGroupInstanceMetadataArgs']]] = None,
                 instance_protection: Optional[pulumi.Input[bool]] = None,
                 kubelet: Optional[pulumi.Input[pulumi.InputType['InstanceGroupKubeletArgs']]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 machine_type: Optional[pulumi.Input[str]] = None,
                 manager: Optional[pulumi.Input[str]] = None,
                 max_instance_lifetime: Optional[pulumi.Input[str]] = None,
                 max_price: Optional[pulumi.Input[str]] = None,
                 max_size: Optional[pulumi.Input[int]] = None,
                 min_size: Optional[pulumi.Input[int]] = None,
                 mixed_instances_policy: Optional[pulumi.Input[pulumi.InputType['InstanceGroupMixedInstancesPolicyArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 packages: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 rolling_update: Optional[pulumi.Input[pulumi.InputType['InstanceGroupRollingUpdateArgs']]] = None,
                 root_volume_encryption: Optional[pulumi.Input[bool]] = None,
                 root_volume_encryption_key: Optional[pulumi.Input[str]] = None,
                 root_volume_iops: Optional[pulumi.Input[int]] = None,
                 root_volume_optimization: Optional[pulumi.Input[bool]] = None,
                 root_volume_size: Optional[pulumi.Input[int]] = None,
                 root_volume_throughput: Optional[pulumi.Input[int]] = None,
                 root_volume_type: Optional[pulumi.Input[str]] = None,
                 security_group_override: Optional[pulumi.Input[str]] = None,
                 spot_duration_in_minutes: Optional[pulumi.Input[int]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 suspend_processes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sysctl_parameters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenancy: Optional[pulumi.Input[str]] = None,
                 update_policy: Optional[pulumi.Input[str]] = None,
                 volume_mounts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceGroupVolumeMountArgs']]]]] = None,
                 volumes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceGroupVolumeArgs']]]]] = None,
                 warm_pool: Optional[pulumi.Input[pulumi.InputType['InstanceGroupWarmPoolArgs']]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceGroupArgs.__new__(InstanceGroupArgs)

            __props__.__dict__["additional_security_groups"] = additional_security_groups
            __props__.__dict__["additional_user_datas"] = additional_user_datas
            __props__.__dict__["annotations"] = annotations
            __props__.__dict__["associate_public_ip"] = associate_public_ip
            __props__.__dict__["autoscale"] = autoscale
            __props__.__dict__["cloud_labels"] = cloud_labels
            if cluster_name is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_name'")
            __props__.__dict__["cluster_name"] = cluster_name
            __props__.__dict__["compress_user_data"] = compress_user_data
            __props__.__dict__["containerd"] = containerd
            __props__.__dict__["cpu_credits"] = cpu_credits
            __props__.__dict__["detailed_instance_monitoring"] = detailed_instance_monitoring
            __props__.__dict__["external_load_balancers"] = external_load_balancers
            __props__.__dict__["file_assets"] = file_assets
            __props__.__dict__["gcp_provisioning_model"] = gcp_provisioning_model
            __props__.__dict__["guest_accelerators"] = guest_accelerators
            __props__.__dict__["hooks"] = hooks
            __props__.__dict__["iam"] = iam
            __props__.__dict__["image"] = image
            __props__.__dict__["instance_interruption_behavior"] = instance_interruption_behavior
            __props__.__dict__["instance_metadata"] = instance_metadata
            __props__.__dict__["instance_protection"] = instance_protection
            __props__.__dict__["kubelet"] = kubelet
            __props__.__dict__["labels"] = labels
            if machine_type is None and not opts.urn:
                raise TypeError("Missing required property 'machine_type'")
            __props__.__dict__["machine_type"] = machine_type
            __props__.__dict__["manager"] = manager
            __props__.__dict__["max_instance_lifetime"] = max_instance_lifetime
            __props__.__dict__["max_price"] = max_price
            if max_size is None and not opts.urn:
                raise TypeError("Missing required property 'max_size'")
            __props__.__dict__["max_size"] = max_size
            if min_size is None and not opts.urn:
                raise TypeError("Missing required property 'min_size'")
            __props__.__dict__["min_size"] = min_size
            __props__.__dict__["mixed_instances_policy"] = mixed_instances_policy
            __props__.__dict__["name"] = name
            __props__.__dict__["node_labels"] = node_labels
            __props__.__dict__["packages"] = packages
            if role is None and not opts.urn:
                raise TypeError("Missing required property 'role'")
            __props__.__dict__["role"] = role
            __props__.__dict__["rolling_update"] = rolling_update
            __props__.__dict__["root_volume_encryption"] = root_volume_encryption
            __props__.__dict__["root_volume_encryption_key"] = root_volume_encryption_key
            __props__.__dict__["root_volume_iops"] = root_volume_iops
            __props__.__dict__["root_volume_optimization"] = root_volume_optimization
            __props__.__dict__["root_volume_size"] = root_volume_size
            __props__.__dict__["root_volume_throughput"] = root_volume_throughput
            __props__.__dict__["root_volume_type"] = root_volume_type
            __props__.__dict__["security_group_override"] = security_group_override
            __props__.__dict__["spot_duration_in_minutes"] = spot_duration_in_minutes
            if subnets is None and not opts.urn:
                raise TypeError("Missing required property 'subnets'")
            __props__.__dict__["subnets"] = subnets
            __props__.__dict__["suspend_processes"] = suspend_processes
            __props__.__dict__["sysctl_parameters"] = sysctl_parameters
            __props__.__dict__["taints"] = taints
            __props__.__dict__["tenancy"] = tenancy
            __props__.__dict__["update_policy"] = update_policy
            __props__.__dict__["volume_mounts"] = volume_mounts
            __props__.__dict__["volumes"] = volumes
            __props__.__dict__["warm_pool"] = warm_pool
            __props__.__dict__["zones"] = zones
            __props__.__dict__["revision"] = None
        super(InstanceGroup, __self__).__init__(
            'kops:index/instanceGroup:InstanceGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            additional_security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            additional_user_datas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceGroupAdditionalUserDataArgs']]]]] = None,
            annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            associate_public_ip: Optional[pulumi.Input[bool]] = None,
            autoscale: Optional[pulumi.Input[bool]] = None,
            cloud_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            cluster_name: Optional[pulumi.Input[str]] = None,
            compress_user_data: Optional[pulumi.Input[bool]] = None,
            containerd: Optional[pulumi.Input[pulumi.InputType['InstanceGroupContainerdArgs']]] = None,
            cpu_credits: Optional[pulumi.Input[str]] = None,
            detailed_instance_monitoring: Optional[pulumi.Input[bool]] = None,
            external_load_balancers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceGroupExternalLoadBalancerArgs']]]]] = None,
            file_assets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceGroupFileAssetArgs']]]]] = None,
            gcp_provisioning_model: Optional[pulumi.Input[str]] = None,
            guest_accelerators: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceGroupGuestAcceleratorArgs']]]]] = None,
            hooks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceGroupHookArgs']]]]] = None,
            iam: Optional[pulumi.Input[pulumi.InputType['InstanceGroupIamArgs']]] = None,
            image: Optional[pulumi.Input[str]] = None,
            instance_interruption_behavior: Optional[pulumi.Input[str]] = None,
            instance_metadata: Optional[pulumi.Input[pulumi.InputType['InstanceGroupInstanceMetadataArgs']]] = None,
            instance_protection: Optional[pulumi.Input[bool]] = None,
            kubelet: Optional[pulumi.Input[pulumi.InputType['InstanceGroupKubeletArgs']]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            machine_type: Optional[pulumi.Input[str]] = None,
            manager: Optional[pulumi.Input[str]] = None,
            max_instance_lifetime: Optional[pulumi.Input[str]] = None,
            max_price: Optional[pulumi.Input[str]] = None,
            max_size: Optional[pulumi.Input[int]] = None,
            min_size: Optional[pulumi.Input[int]] = None,
            mixed_instances_policy: Optional[pulumi.Input[pulumi.InputType['InstanceGroupMixedInstancesPolicyArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            node_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            packages: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            revision: Optional[pulumi.Input[int]] = None,
            role: Optional[pulumi.Input[str]] = None,
            rolling_update: Optional[pulumi.Input[pulumi.InputType['InstanceGroupRollingUpdateArgs']]] = None,
            root_volume_encryption: Optional[pulumi.Input[bool]] = None,
            root_volume_encryption_key: Optional[pulumi.Input[str]] = None,
            root_volume_iops: Optional[pulumi.Input[int]] = None,
            root_volume_optimization: Optional[pulumi.Input[bool]] = None,
            root_volume_size: Optional[pulumi.Input[int]] = None,
            root_volume_throughput: Optional[pulumi.Input[int]] = None,
            root_volume_type: Optional[pulumi.Input[str]] = None,
            security_group_override: Optional[pulumi.Input[str]] = None,
            spot_duration_in_minutes: Optional[pulumi.Input[int]] = None,
            subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            suspend_processes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            sysctl_parameters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            taints: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            tenancy: Optional[pulumi.Input[str]] = None,
            update_policy: Optional[pulumi.Input[str]] = None,
            volume_mounts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceGroupVolumeMountArgs']]]]] = None,
            volumes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceGroupVolumeArgs']]]]] = None,
            warm_pool: Optional[pulumi.Input[pulumi.InputType['InstanceGroupWarmPoolArgs']]] = None,
            zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'InstanceGroup':
        """
        Get an existing InstanceGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] additional_security_groups: - List(String) - AdditionalSecurityGroups attaches additional security groups (e.g. i-123456).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceGroupAdditionalUserDataArgs']]]] additional_user_datas: - List(user_data) - AdditionalUserData is any additional user-data to be passed to the host.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: - Map(String) - Annotations is an unstructured key value map stored with a resource that may be<br />set by external tools to store and retrieve arbitrary metadata. They are not<br />queryable and should be preserved when modifying objects.
        :param pulumi.Input[bool] associate_public_ip: - Bool - AssociatePublicIP is true if we want instances to have a public IP.
        :param pulumi.Input[bool] autoscale: - Bool - Autoscale determines if autoscaling will be enabled for this instance group if cluster autoscaler is enabled.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] cloud_labels: - Map(String) - CloudLabels defines additional tags or labels on cloud provider resources.
        :param pulumi.Input[str] cluster_name: - (Force new) - String - ClusterName defines the cluster name the instance group belongs to.
        :param pulumi.Input[bool] compress_user_data: - Bool - CompressUserData compresses parts of the user data to save space.
        :param pulumi.Input[pulumi.InputType['InstanceGroupContainerdArgs']] containerd: - containerd_config - Containerd specifies override configuration for instance group.
        :param pulumi.Input[str] cpu_credits: - String - CPUCredits is the credit option for CPU Usage on burstable instance types (AWS only).
        :param pulumi.Input[bool] detailed_instance_monitoring: - Bool - DetailedInstanceMonitoring defines if detailed-monitoring is enabled (AWS only).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceGroupExternalLoadBalancerArgs']]]] external_load_balancers: - List(load_balancer) - ExternalLoadBalancers define loadbalancers that should be attached to this instance group.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceGroupFileAssetArgs']]]] file_assets: - List(file_asset_spec) - FileAssets is a collection of file assets for this instance group.
        :param pulumi.Input[str] gcp_provisioning_model: - String - GCPProvisioningModel: Specifies the provisioning model of the GCP instance.<br />Valid values:<br />  'STANDARD': (default) standard provisioning with user controlled run time, no discounts<br />  'SPOT': heavily discounted, no guaranteed run time.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceGroupGuestAcceleratorArgs']]]] guest_accelerators: - List(accelerator_config) - GuestAccelerators configures additional accelerators.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceGroupHookArgs']]]] hooks: - List(hook_spec) - Hooks is a list of hooks for this instance group, note: these can override the cluster wide ones if required.
        :param pulumi.Input[pulumi.InputType['InstanceGroupIamArgs']] iam: - iam_profile_spec - IAMProfileSpec defines the identity of the cloud group IAM profile (AWS only).
        :param pulumi.Input[str] image: - (Computed) - String - Image is the instance (ami etc) we should use.
        :param pulumi.Input[str] instance_interruption_behavior: - String - InstanceInterruptionBehavior defines if a spot instance should be terminated, hibernated,<br />or stopped after interruption.
        :param pulumi.Input[pulumi.InputType['InstanceGroupInstanceMetadataArgs']] instance_metadata: - instance_metadata_options - InstanceMetadata defines the EC2 instance metadata service options (AWS Only).
        :param pulumi.Input[bool] instance_protection: - Bool - InstanceProtection makes new instances in an autoscaling group protected from scale in.
        :param pulumi.Input[pulumi.InputType['InstanceGroupKubeletArgs']] kubelet: - (Computed) - kubelet_config_spec - Kubelet overrides kubelet config from the ClusterSpec.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: - Map(String) - Map of string keys and values that can be used to organize and categorize<br />(scope and select) objects. May match selectors of replication controllers<br />and services.
        :param pulumi.Input[str] machine_type: - String - MachineType is the instance class.
        :param pulumi.Input[str] manager: - (Computed) - String - Manager determines what is managing the node lifecycle.
        :param pulumi.Input[str] max_instance_lifetime: - Duration - MaxInstanceLifetime to the maximum amount of time, in seconds, that an instance can be in service.<br />Value expected must be in form of duration ("ms", "s", "m", "h").
        :param pulumi.Input[str] max_price: - String - MaxPrice indicates this is a spot-pricing group, with the specified value as our max-price bid.
        :param pulumi.Input[int] max_size: - Int - MaxSize is the maximum size of the pool.
        :param pulumi.Input[int] min_size: - Int - MinSize is the minimum size of the pool.
        :param pulumi.Input[pulumi.InputType['InstanceGroupMixedInstancesPolicyArgs']] mixed_instances_policy: - mixed_instances_policy_spec - MixedInstancesPolicy defined a optional backing of an AWS ASG by a EC2 Fleet (AWS Only).
        :param pulumi.Input[str] name: - (Force new) - String - Name defines the instance group name.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] node_labels: - Map(String) - NodeLabels indicates the kubernetes labels for nodes in this instance group.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] packages: - List(String) - Packages specifies additional packages to be installed.
        :param pulumi.Input[int] revision: - Int - Revision is incremented every time the resource changes, this is useful for triggering cluster updater.
        :param pulumi.Input[str] role: - String - Type determines the role of instances in this instance group: masters or nodes.
        :param pulumi.Input[pulumi.InputType['InstanceGroupRollingUpdateArgs']] rolling_update: - rolling_update - RollingUpdate defines the rolling-update behavior.
        :param pulumi.Input[bool] root_volume_encryption: - Bool - RootVolumeEncryption enables EBS root volume encryption for an instance.
        :param pulumi.Input[str] root_volume_encryption_key: - String - RootVolumeEncryptionKey provides the key identifier for root volume encryption.
        :param pulumi.Input[int] root_volume_iops: - Int - RootVolumeIOPS is the provisioned IOPS when the volume type is io1, io2 or gp3 (AWS only).
        :param pulumi.Input[bool] root_volume_optimization: - Bool - RootVolumeOptimization enables EBS optimization for an instance.
        :param pulumi.Input[int] root_volume_size: - Int - RootVolumeSize is the size of the EBS root volume to use, in GB.
        :param pulumi.Input[int] root_volume_throughput: - Int - RootVolumeThroughput is the volume throughput in MBps when the volume type is gp3 (AWS only).
        :param pulumi.Input[str] root_volume_type: - String - RootVolumeType is the type of the EBS root volume to use (e.g. gp2).
        :param pulumi.Input[str] security_group_override: - String - SecurityGroupOverride overrides the default security group created by Kops for this IG (AWS only).
        :param pulumi.Input[int] spot_duration_in_minutes: - Int - SpotDurationInMinutes reserves a spot block for the period specified.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnets: - List(String) - Subnets is the names of the Subnets (as specified in the Cluster) where machines in this instance group should be placed.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] suspend_processes: - List(String) - SuspendProcesses disables the listed Scaling Policies.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sysctl_parameters: - List(String) - SysctlParameters will configure kernel parameters using sysctl(8). When<br />specified, each parameter must follow the form variable=value, the way<br />it would appear in sysctl.conf.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] taints: - List(String) - Taints indicates the kubernetes taints for nodes in this instance group.
        :param pulumi.Input[str] tenancy: - String - Describes the tenancy of this instance group. Can be either default or dedicated. Currently only applies to AWS.
        :param pulumi.Input[str] update_policy: - String - UpdatePolicy determines the policy for applying upgrades automatically.<br />If specified, this value overrides a value specified in the Cluster's "spec.updatePolicy" field.<br />Valid values:<br />  'automatic' (default): apply updates automatically (apply OS security upgrades, avoiding rebooting when possible)<br />  'external': do not apply updates automatically; they are applied manually or by an external system.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceGroupVolumeMountArgs']]]] volume_mounts: - List(volume_mount_spec) - VolumeMounts a collection of volume mounts.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceGroupVolumeArgs']]]] volumes: - List(volume_spec) - Volumes is a collection of additional volumes to create for instances within this instance group.
        :param pulumi.Input[pulumi.InputType['InstanceGroupWarmPoolArgs']] warm_pool: - warm_pool_spec - WarmPool specifies a pool of pre-warmed instances for later use (AWS only).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zones: - List(String) - Zones is the names of the Zones where machines in this instance group should be placed<br />This is needed for regional subnets (e.g. GCE), to restrict placement to particular zones.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstanceGroupState.__new__(_InstanceGroupState)

        __props__.__dict__["additional_security_groups"] = additional_security_groups
        __props__.__dict__["additional_user_datas"] = additional_user_datas
        __props__.__dict__["annotations"] = annotations
        __props__.__dict__["associate_public_ip"] = associate_public_ip
        __props__.__dict__["autoscale"] = autoscale
        __props__.__dict__["cloud_labels"] = cloud_labels
        __props__.__dict__["cluster_name"] = cluster_name
        __props__.__dict__["compress_user_data"] = compress_user_data
        __props__.__dict__["containerd"] = containerd
        __props__.__dict__["cpu_credits"] = cpu_credits
        __props__.__dict__["detailed_instance_monitoring"] = detailed_instance_monitoring
        __props__.__dict__["external_load_balancers"] = external_load_balancers
        __props__.__dict__["file_assets"] = file_assets
        __props__.__dict__["gcp_provisioning_model"] = gcp_provisioning_model
        __props__.__dict__["guest_accelerators"] = guest_accelerators
        __props__.__dict__["hooks"] = hooks
        __props__.__dict__["iam"] = iam
        __props__.__dict__["image"] = image
        __props__.__dict__["instance_interruption_behavior"] = instance_interruption_behavior
        __props__.__dict__["instance_metadata"] = instance_metadata
        __props__.__dict__["instance_protection"] = instance_protection
        __props__.__dict__["kubelet"] = kubelet
        __props__.__dict__["labels"] = labels
        __props__.__dict__["machine_type"] = machine_type
        __props__.__dict__["manager"] = manager
        __props__.__dict__["max_instance_lifetime"] = max_instance_lifetime
        __props__.__dict__["max_price"] = max_price
        __props__.__dict__["max_size"] = max_size
        __props__.__dict__["min_size"] = min_size
        __props__.__dict__["mixed_instances_policy"] = mixed_instances_policy
        __props__.__dict__["name"] = name
        __props__.__dict__["node_labels"] = node_labels
        __props__.__dict__["packages"] = packages
        __props__.__dict__["revision"] = revision
        __props__.__dict__["role"] = role
        __props__.__dict__["rolling_update"] = rolling_update
        __props__.__dict__["root_volume_encryption"] = root_volume_encryption
        __props__.__dict__["root_volume_encryption_key"] = root_volume_encryption_key
        __props__.__dict__["root_volume_iops"] = root_volume_iops
        __props__.__dict__["root_volume_optimization"] = root_volume_optimization
        __props__.__dict__["root_volume_size"] = root_volume_size
        __props__.__dict__["root_volume_throughput"] = root_volume_throughput
        __props__.__dict__["root_volume_type"] = root_volume_type
        __props__.__dict__["security_group_override"] = security_group_override
        __props__.__dict__["spot_duration_in_minutes"] = spot_duration_in_minutes
        __props__.__dict__["subnets"] = subnets
        __props__.__dict__["suspend_processes"] = suspend_processes
        __props__.__dict__["sysctl_parameters"] = sysctl_parameters
        __props__.__dict__["taints"] = taints
        __props__.__dict__["tenancy"] = tenancy
        __props__.__dict__["update_policy"] = update_policy
        __props__.__dict__["volume_mounts"] = volume_mounts
        __props__.__dict__["volumes"] = volumes
        __props__.__dict__["warm_pool"] = warm_pool
        __props__.__dict__["zones"] = zones
        return InstanceGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="additionalSecurityGroups")
    def additional_security_groups(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        - List(String) - AdditionalSecurityGroups attaches additional security groups (e.g. i-123456).
        """
        return pulumi.get(self, "additional_security_groups")

    @property
    @pulumi.getter(name="additionalUserDatas")
    def additional_user_datas(self) -> pulumi.Output[Optional[Sequence['outputs.InstanceGroupAdditionalUserData']]]:
        """
        - List(user_data) - AdditionalUserData is any additional user-data to be passed to the host.
        """
        return pulumi.get(self, "additional_user_datas")

    @property
    @pulumi.getter
    def annotations(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        - Map(String) - Annotations is an unstructured key value map stored with a resource that may be<br />set by external tools to store and retrieve arbitrary metadata. They are not<br />queryable and should be preserved when modifying objects.
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter(name="associatePublicIp")
    def associate_public_ip(self) -> pulumi.Output[Optional[bool]]:
        """
        - Bool - AssociatePublicIP is true if we want instances to have a public IP.
        """
        return pulumi.get(self, "associate_public_ip")

    @property
    @pulumi.getter
    def autoscale(self) -> pulumi.Output[Optional[bool]]:
        """
        - Bool - Autoscale determines if autoscaling will be enabled for this instance group if cluster autoscaler is enabled.
        """
        return pulumi.get(self, "autoscale")

    @property
    @pulumi.getter(name="cloudLabels")
    def cloud_labels(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        - Map(String) - CloudLabels defines additional tags or labels on cloud provider resources.
        """
        return pulumi.get(self, "cloud_labels")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Output[str]:
        """
        - (Force new) - String - ClusterName defines the cluster name the instance group belongs to.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="compressUserData")
    def compress_user_data(self) -> pulumi.Output[Optional[bool]]:
        """
        - Bool - CompressUserData compresses parts of the user data to save space.
        """
        return pulumi.get(self, "compress_user_data")

    @property
    @pulumi.getter
    def containerd(self) -> pulumi.Output[Optional['outputs.InstanceGroupContainerd']]:
        """
        - containerd_config - Containerd specifies override configuration for instance group.
        """
        return pulumi.get(self, "containerd")

    @property
    @pulumi.getter(name="cpuCredits")
    def cpu_credits(self) -> pulumi.Output[Optional[str]]:
        """
        - String - CPUCredits is the credit option for CPU Usage on burstable instance types (AWS only).
        """
        return pulumi.get(self, "cpu_credits")

    @property
    @pulumi.getter(name="detailedInstanceMonitoring")
    def detailed_instance_monitoring(self) -> pulumi.Output[Optional[bool]]:
        """
        - Bool - DetailedInstanceMonitoring defines if detailed-monitoring is enabled (AWS only).
        """
        return pulumi.get(self, "detailed_instance_monitoring")

    @property
    @pulumi.getter(name="externalLoadBalancers")
    def external_load_balancers(self) -> pulumi.Output[Optional[Sequence['outputs.InstanceGroupExternalLoadBalancer']]]:
        """
        - List(load_balancer) - ExternalLoadBalancers define loadbalancers that should be attached to this instance group.
        """
        return pulumi.get(self, "external_load_balancers")

    @property
    @pulumi.getter(name="fileAssets")
    def file_assets(self) -> pulumi.Output[Optional[Sequence['outputs.InstanceGroupFileAsset']]]:
        """
        - List(file_asset_spec) - FileAssets is a collection of file assets for this instance group.
        """
        return pulumi.get(self, "file_assets")

    @property
    @pulumi.getter(name="gcpProvisioningModel")
    def gcp_provisioning_model(self) -> pulumi.Output[Optional[str]]:
        """
        - String - GCPProvisioningModel: Specifies the provisioning model of the GCP instance.<br />Valid values:<br />  'STANDARD': (default) standard provisioning with user controlled run time, no discounts<br />  'SPOT': heavily discounted, no guaranteed run time.
        """
        return pulumi.get(self, "gcp_provisioning_model")

    @property
    @pulumi.getter(name="guestAccelerators")
    def guest_accelerators(self) -> pulumi.Output[Optional[Sequence['outputs.InstanceGroupGuestAccelerator']]]:
        """
        - List(accelerator_config) - GuestAccelerators configures additional accelerators.
        """
        return pulumi.get(self, "guest_accelerators")

    @property
    @pulumi.getter
    def hooks(self) -> pulumi.Output[Optional[Sequence['outputs.InstanceGroupHook']]]:
        """
        - List(hook_spec) - Hooks is a list of hooks for this instance group, note: these can override the cluster wide ones if required.
        """
        return pulumi.get(self, "hooks")

    @property
    @pulumi.getter
    def iam(self) -> pulumi.Output[Optional['outputs.InstanceGroupIam']]:
        """
        - iam_profile_spec - IAMProfileSpec defines the identity of the cloud group IAM profile (AWS only).
        """
        return pulumi.get(self, "iam")

    @property
    @pulumi.getter
    def image(self) -> pulumi.Output[str]:
        """
        - (Computed) - String - Image is the instance (ami etc) we should use.
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="instanceInterruptionBehavior")
    def instance_interruption_behavior(self) -> pulumi.Output[Optional[str]]:
        """
        - String - InstanceInterruptionBehavior defines if a spot instance should be terminated, hibernated,<br />or stopped after interruption.
        """
        return pulumi.get(self, "instance_interruption_behavior")

    @property
    @pulumi.getter(name="instanceMetadata")
    def instance_metadata(self) -> pulumi.Output[Optional['outputs.InstanceGroupInstanceMetadata']]:
        """
        - instance_metadata_options - InstanceMetadata defines the EC2 instance metadata service options (AWS Only).
        """
        return pulumi.get(self, "instance_metadata")

    @property
    @pulumi.getter(name="instanceProtection")
    def instance_protection(self) -> pulumi.Output[Optional[bool]]:
        """
        - Bool - InstanceProtection makes new instances in an autoscaling group protected from scale in.
        """
        return pulumi.get(self, "instance_protection")

    @property
    @pulumi.getter
    def kubelet(self) -> pulumi.Output['outputs.InstanceGroupKubelet']:
        """
        - (Computed) - kubelet_config_spec - Kubelet overrides kubelet config from the ClusterSpec.
        """
        return pulumi.get(self, "kubelet")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        - Map(String) - Map of string keys and values that can be used to organize and categorize<br />(scope and select) objects. May match selectors of replication controllers<br />and services.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> pulumi.Output[str]:
        """
        - String - MachineType is the instance class.
        """
        return pulumi.get(self, "machine_type")

    @property
    @pulumi.getter
    def manager(self) -> pulumi.Output[str]:
        """
        - (Computed) - String - Manager determines what is managing the node lifecycle.
        """
        return pulumi.get(self, "manager")

    @property
    @pulumi.getter(name="maxInstanceLifetime")
    def max_instance_lifetime(self) -> pulumi.Output[Optional[str]]:
        """
        - Duration - MaxInstanceLifetime to the maximum amount of time, in seconds, that an instance can be in service.<br />Value expected must be in form of duration ("ms", "s", "m", "h").
        """
        return pulumi.get(self, "max_instance_lifetime")

    @property
    @pulumi.getter(name="maxPrice")
    def max_price(self) -> pulumi.Output[Optional[str]]:
        """
        - String - MaxPrice indicates this is a spot-pricing group, with the specified value as our max-price bid.
        """
        return pulumi.get(self, "max_price")

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> pulumi.Output[int]:
        """
        - Int - MaxSize is the maximum size of the pool.
        """
        return pulumi.get(self, "max_size")

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> pulumi.Output[int]:
        """
        - Int - MinSize is the minimum size of the pool.
        """
        return pulumi.get(self, "min_size")

    @property
    @pulumi.getter(name="mixedInstancesPolicy")
    def mixed_instances_policy(self) -> pulumi.Output[Optional['outputs.InstanceGroupMixedInstancesPolicy']]:
        """
        - mixed_instances_policy_spec - MixedInstancesPolicy defined a optional backing of an AWS ASG by a EC2 Fleet (AWS Only).
        """
        return pulumi.get(self, "mixed_instances_policy")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        - (Force new) - String - Name defines the instance group name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeLabels")
    def node_labels(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        - Map(String) - NodeLabels indicates the kubernetes labels for nodes in this instance group.
        """
        return pulumi.get(self, "node_labels")

    @property
    @pulumi.getter
    def packages(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        - List(String) - Packages specifies additional packages to be installed.
        """
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter
    def revision(self) -> pulumi.Output[int]:
        """
        - Int - Revision is incremented every time the resource changes, this is useful for triggering cluster updater.
        """
        return pulumi.get(self, "revision")

    @property
    @pulumi.getter
    def role(self) -> pulumi.Output[str]:
        """
        - String - Type determines the role of instances in this instance group: masters or nodes.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="rollingUpdate")
    def rolling_update(self) -> pulumi.Output[Optional['outputs.InstanceGroupRollingUpdate']]:
        """
        - rolling_update - RollingUpdate defines the rolling-update behavior.
        """
        return pulumi.get(self, "rolling_update")

    @property
    @pulumi.getter(name="rootVolumeEncryption")
    def root_volume_encryption(self) -> pulumi.Output[Optional[bool]]:
        """
        - Bool - RootVolumeEncryption enables EBS root volume encryption for an instance.
        """
        return pulumi.get(self, "root_volume_encryption")

    @property
    @pulumi.getter(name="rootVolumeEncryptionKey")
    def root_volume_encryption_key(self) -> pulumi.Output[Optional[str]]:
        """
        - String - RootVolumeEncryptionKey provides the key identifier for root volume encryption.
        """
        return pulumi.get(self, "root_volume_encryption_key")

    @property
    @pulumi.getter(name="rootVolumeIops")
    def root_volume_iops(self) -> pulumi.Output[Optional[int]]:
        """
        - Int - RootVolumeIOPS is the provisioned IOPS when the volume type is io1, io2 or gp3 (AWS only).
        """
        return pulumi.get(self, "root_volume_iops")

    @property
    @pulumi.getter(name="rootVolumeOptimization")
    def root_volume_optimization(self) -> pulumi.Output[Optional[bool]]:
        """
        - Bool - RootVolumeOptimization enables EBS optimization for an instance.
        """
        return pulumi.get(self, "root_volume_optimization")

    @property
    @pulumi.getter(name="rootVolumeSize")
    def root_volume_size(self) -> pulumi.Output[Optional[int]]:
        """
        - Int - RootVolumeSize is the size of the EBS root volume to use, in GB.
        """
        return pulumi.get(self, "root_volume_size")

    @property
    @pulumi.getter(name="rootVolumeThroughput")
    def root_volume_throughput(self) -> pulumi.Output[Optional[int]]:
        """
        - Int - RootVolumeThroughput is the volume throughput in MBps when the volume type is gp3 (AWS only).
        """
        return pulumi.get(self, "root_volume_throughput")

    @property
    @pulumi.getter(name="rootVolumeType")
    def root_volume_type(self) -> pulumi.Output[Optional[str]]:
        """
        - String - RootVolumeType is the type of the EBS root volume to use (e.g. gp2).
        """
        return pulumi.get(self, "root_volume_type")

    @property
    @pulumi.getter(name="securityGroupOverride")
    def security_group_override(self) -> pulumi.Output[Optional[str]]:
        """
        - String - SecurityGroupOverride overrides the default security group created by Kops for this IG (AWS only).
        """
        return pulumi.get(self, "security_group_override")

    @property
    @pulumi.getter(name="spotDurationInMinutes")
    def spot_duration_in_minutes(self) -> pulumi.Output[Optional[int]]:
        """
        - Int - SpotDurationInMinutes reserves a spot block for the period specified.
        """
        return pulumi.get(self, "spot_duration_in_minutes")

    @property
    @pulumi.getter
    def subnets(self) -> pulumi.Output[Sequence[str]]:
        """
        - List(String) - Subnets is the names of the Subnets (as specified in the Cluster) where machines in this instance group should be placed.
        """
        return pulumi.get(self, "subnets")

    @property
    @pulumi.getter(name="suspendProcesses")
    def suspend_processes(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        - List(String) - SuspendProcesses disables the listed Scaling Policies.
        """
        return pulumi.get(self, "suspend_processes")

    @property
    @pulumi.getter(name="sysctlParameters")
    def sysctl_parameters(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        - List(String) - SysctlParameters will configure kernel parameters using sysctl(8). When<br />specified, each parameter must follow the form variable=value, the way<br />it would appear in sysctl.conf.
        """
        return pulumi.get(self, "sysctl_parameters")

    @property
    @pulumi.getter
    def taints(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        - List(String) - Taints indicates the kubernetes taints for nodes in this instance group.
        """
        return pulumi.get(self, "taints")

    @property
    @pulumi.getter
    def tenancy(self) -> pulumi.Output[Optional[str]]:
        """
        - String - Describes the tenancy of this instance group. Can be either default or dedicated. Currently only applies to AWS.
        """
        return pulumi.get(self, "tenancy")

    @property
    @pulumi.getter(name="updatePolicy")
    def update_policy(self) -> pulumi.Output[Optional[str]]:
        """
        - String - UpdatePolicy determines the policy for applying upgrades automatically.<br />If specified, this value overrides a value specified in the Cluster's "spec.updatePolicy" field.<br />Valid values:<br />  'automatic' (default): apply updates automatically (apply OS security upgrades, avoiding rebooting when possible)<br />  'external': do not apply updates automatically; they are applied manually or by an external system.
        """
        return pulumi.get(self, "update_policy")

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> pulumi.Output[Optional[Sequence['outputs.InstanceGroupVolumeMount']]]:
        """
        - List(volume_mount_spec) - VolumeMounts a collection of volume mounts.
        """
        return pulumi.get(self, "volume_mounts")

    @property
    @pulumi.getter
    def volumes(self) -> pulumi.Output[Optional[Sequence['outputs.InstanceGroupVolume']]]:
        """
        - List(volume_spec) - Volumes is a collection of additional volumes to create for instances within this instance group.
        """
        return pulumi.get(self, "volumes")

    @property
    @pulumi.getter(name="warmPool")
    def warm_pool(self) -> pulumi.Output[Optional['outputs.InstanceGroupWarmPool']]:
        """
        - warm_pool_spec - WarmPool specifies a pool of pre-warmed instances for later use (AWS only).
        """
        return pulumi.get(self, "warm_pool")

    @property
    @pulumi.getter
    def zones(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        - List(String) - Zones is the names of the Zones where machines in this instance group should be placed<br />This is needed for regional subnets (e.g. GCE), to restrict placement to particular zones.
        """
        return pulumi.get(self, "zones")

