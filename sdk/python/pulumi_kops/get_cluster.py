# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetClusterResult',
    'AwaitableGetClusterResult',
    'get_cluster',
    'get_cluster_output',
]

@pulumi.output_type
class GetClusterResult:
    """
    A collection of values returned by getCluster.
    """
    def __init__(__self__, additional_network_cidrs=None, additional_policies=None, additional_sans=None, addons=None, admin_ssh_key=None, annotations=None, apis=None, assets=None, authentications=None, authorizations=None, aws_load_balancer_controllers=None, cert_managers=None, channel=None, cloud_configs=None, cloud_labels=None, cloud_providers=None, cluster_autoscalers=None, cluster_dns_domain=None, config_base=None, config_store=None, container_runtime=None, containerds=None, dns_zone=None, dockers=None, egress_proxies=None, encryption_config=None, etcd_clusters=None, external_cloud_controller_managers=None, external_dns=None, external_policies=None, file_assets=None, hooks=None, iams=None, id=None, isolate_masters=None, karpenters=None, key_store=None, kube_api_servers=None, kube_controller_managers=None, kube_dns=None, kube_proxies=None, kube_schedulers=None, kubelets=None, kubernetes_api_accesses=None, kubernetes_version=None, labels=None, master_internal_name=None, master_kubelets=None, master_public_name=None, metrics_servers=None, name=None, network_cidr=None, network_id=None, networkings=None, node_authorizations=None, node_port_accesses=None, node_problem_detectors=None, node_termination_handlers=None, non_masquerade_cidr=None, ntps=None, pod_cidr=None, pod_identity_webhooks=None, project=None, rolling_updates=None, secret_store=None, secrets=None, service_account_issuer_discoveries=None, service_cluster_ip_range=None, snapshot_controllers=None, ssh_accesses=None, ssh_key_name=None, subnets=None, sysctl_parameters=None, tag_subnets=None, topologies=None, update_policy=None, use_host_certificates=None, warm_pools=None):
        if additional_network_cidrs and not isinstance(additional_network_cidrs, list):
            raise TypeError("Expected argument 'additional_network_cidrs' to be a list")
        pulumi.set(__self__, "additional_network_cidrs", additional_network_cidrs)
        if additional_policies and not isinstance(additional_policies, dict):
            raise TypeError("Expected argument 'additional_policies' to be a dict")
        pulumi.set(__self__, "additional_policies", additional_policies)
        if additional_sans and not isinstance(additional_sans, list):
            raise TypeError("Expected argument 'additional_sans' to be a list")
        pulumi.set(__self__, "additional_sans", additional_sans)
        if addons and not isinstance(addons, list):
            raise TypeError("Expected argument 'addons' to be a list")
        pulumi.set(__self__, "addons", addons)
        if admin_ssh_key and not isinstance(admin_ssh_key, str):
            raise TypeError("Expected argument 'admin_ssh_key' to be a str")
        pulumi.set(__self__, "admin_ssh_key", admin_ssh_key)
        if annotations and not isinstance(annotations, dict):
            raise TypeError("Expected argument 'annotations' to be a dict")
        pulumi.set(__self__, "annotations", annotations)
        if apis and not isinstance(apis, list):
            raise TypeError("Expected argument 'apis' to be a list")
        pulumi.set(__self__, "apis", apis)
        if assets and not isinstance(assets, list):
            raise TypeError("Expected argument 'assets' to be a list")
        pulumi.set(__self__, "assets", assets)
        if authentications and not isinstance(authentications, list):
            raise TypeError("Expected argument 'authentications' to be a list")
        pulumi.set(__self__, "authentications", authentications)
        if authorizations and not isinstance(authorizations, list):
            raise TypeError("Expected argument 'authorizations' to be a list")
        pulumi.set(__self__, "authorizations", authorizations)
        if aws_load_balancer_controllers and not isinstance(aws_load_balancer_controllers, list):
            raise TypeError("Expected argument 'aws_load_balancer_controllers' to be a list")
        pulumi.set(__self__, "aws_load_balancer_controllers", aws_load_balancer_controllers)
        if cert_managers and not isinstance(cert_managers, list):
            raise TypeError("Expected argument 'cert_managers' to be a list")
        pulumi.set(__self__, "cert_managers", cert_managers)
        if channel and not isinstance(channel, str):
            raise TypeError("Expected argument 'channel' to be a str")
        pulumi.set(__self__, "channel", channel)
        if cloud_configs and not isinstance(cloud_configs, list):
            raise TypeError("Expected argument 'cloud_configs' to be a list")
        pulumi.set(__self__, "cloud_configs", cloud_configs)
        if cloud_labels and not isinstance(cloud_labels, dict):
            raise TypeError("Expected argument 'cloud_labels' to be a dict")
        pulumi.set(__self__, "cloud_labels", cloud_labels)
        if cloud_providers and not isinstance(cloud_providers, list):
            raise TypeError("Expected argument 'cloud_providers' to be a list")
        pulumi.set(__self__, "cloud_providers", cloud_providers)
        if cluster_autoscalers and not isinstance(cluster_autoscalers, list):
            raise TypeError("Expected argument 'cluster_autoscalers' to be a list")
        pulumi.set(__self__, "cluster_autoscalers", cluster_autoscalers)
        if cluster_dns_domain and not isinstance(cluster_dns_domain, str):
            raise TypeError("Expected argument 'cluster_dns_domain' to be a str")
        pulumi.set(__self__, "cluster_dns_domain", cluster_dns_domain)
        if config_base and not isinstance(config_base, str):
            raise TypeError("Expected argument 'config_base' to be a str")
        pulumi.set(__self__, "config_base", config_base)
        if config_store and not isinstance(config_store, str):
            raise TypeError("Expected argument 'config_store' to be a str")
        pulumi.set(__self__, "config_store", config_store)
        if container_runtime and not isinstance(container_runtime, str):
            raise TypeError("Expected argument 'container_runtime' to be a str")
        pulumi.set(__self__, "container_runtime", container_runtime)
        if containerds and not isinstance(containerds, list):
            raise TypeError("Expected argument 'containerds' to be a list")
        pulumi.set(__self__, "containerds", containerds)
        if dns_zone and not isinstance(dns_zone, str):
            raise TypeError("Expected argument 'dns_zone' to be a str")
        pulumi.set(__self__, "dns_zone", dns_zone)
        if dockers and not isinstance(dockers, list):
            raise TypeError("Expected argument 'dockers' to be a list")
        pulumi.set(__self__, "dockers", dockers)
        if egress_proxies and not isinstance(egress_proxies, list):
            raise TypeError("Expected argument 'egress_proxies' to be a list")
        pulumi.set(__self__, "egress_proxies", egress_proxies)
        if encryption_config and not isinstance(encryption_config, bool):
            raise TypeError("Expected argument 'encryption_config' to be a bool")
        pulumi.set(__self__, "encryption_config", encryption_config)
        if etcd_clusters and not isinstance(etcd_clusters, list):
            raise TypeError("Expected argument 'etcd_clusters' to be a list")
        pulumi.set(__self__, "etcd_clusters", etcd_clusters)
        if external_cloud_controller_managers and not isinstance(external_cloud_controller_managers, list):
            raise TypeError("Expected argument 'external_cloud_controller_managers' to be a list")
        pulumi.set(__self__, "external_cloud_controller_managers", external_cloud_controller_managers)
        if external_dns and not isinstance(external_dns, list):
            raise TypeError("Expected argument 'external_dns' to be a list")
        pulumi.set(__self__, "external_dns", external_dns)
        if external_policies and not isinstance(external_policies, list):
            raise TypeError("Expected argument 'external_policies' to be a list")
        pulumi.set(__self__, "external_policies", external_policies)
        if file_assets and not isinstance(file_assets, list):
            raise TypeError("Expected argument 'file_assets' to be a list")
        pulumi.set(__self__, "file_assets", file_assets)
        if hooks and not isinstance(hooks, list):
            raise TypeError("Expected argument 'hooks' to be a list")
        pulumi.set(__self__, "hooks", hooks)
        if iams and not isinstance(iams, list):
            raise TypeError("Expected argument 'iams' to be a list")
        pulumi.set(__self__, "iams", iams)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if isolate_masters and not isinstance(isolate_masters, bool):
            raise TypeError("Expected argument 'isolate_masters' to be a bool")
        pulumi.set(__self__, "isolate_masters", isolate_masters)
        if karpenters and not isinstance(karpenters, list):
            raise TypeError("Expected argument 'karpenters' to be a list")
        pulumi.set(__self__, "karpenters", karpenters)
        if key_store and not isinstance(key_store, str):
            raise TypeError("Expected argument 'key_store' to be a str")
        pulumi.set(__self__, "key_store", key_store)
        if kube_api_servers and not isinstance(kube_api_servers, list):
            raise TypeError("Expected argument 'kube_api_servers' to be a list")
        pulumi.set(__self__, "kube_api_servers", kube_api_servers)
        if kube_controller_managers and not isinstance(kube_controller_managers, list):
            raise TypeError("Expected argument 'kube_controller_managers' to be a list")
        pulumi.set(__self__, "kube_controller_managers", kube_controller_managers)
        if kube_dns and not isinstance(kube_dns, list):
            raise TypeError("Expected argument 'kube_dns' to be a list")
        pulumi.set(__self__, "kube_dns", kube_dns)
        if kube_proxies and not isinstance(kube_proxies, list):
            raise TypeError("Expected argument 'kube_proxies' to be a list")
        pulumi.set(__self__, "kube_proxies", kube_proxies)
        if kube_schedulers and not isinstance(kube_schedulers, list):
            raise TypeError("Expected argument 'kube_schedulers' to be a list")
        pulumi.set(__self__, "kube_schedulers", kube_schedulers)
        if kubelets and not isinstance(kubelets, list):
            raise TypeError("Expected argument 'kubelets' to be a list")
        pulumi.set(__self__, "kubelets", kubelets)
        if kubernetes_api_accesses and not isinstance(kubernetes_api_accesses, list):
            raise TypeError("Expected argument 'kubernetes_api_accesses' to be a list")
        pulumi.set(__self__, "kubernetes_api_accesses", kubernetes_api_accesses)
        if kubernetes_version and not isinstance(kubernetes_version, str):
            raise TypeError("Expected argument 'kubernetes_version' to be a str")
        pulumi.set(__self__, "kubernetes_version", kubernetes_version)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if master_internal_name and not isinstance(master_internal_name, str):
            raise TypeError("Expected argument 'master_internal_name' to be a str")
        pulumi.set(__self__, "master_internal_name", master_internal_name)
        if master_kubelets and not isinstance(master_kubelets, list):
            raise TypeError("Expected argument 'master_kubelets' to be a list")
        pulumi.set(__self__, "master_kubelets", master_kubelets)
        if master_public_name and not isinstance(master_public_name, str):
            raise TypeError("Expected argument 'master_public_name' to be a str")
        pulumi.set(__self__, "master_public_name", master_public_name)
        if metrics_servers and not isinstance(metrics_servers, list):
            raise TypeError("Expected argument 'metrics_servers' to be a list")
        pulumi.set(__self__, "metrics_servers", metrics_servers)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network_cidr and not isinstance(network_cidr, str):
            raise TypeError("Expected argument 'network_cidr' to be a str")
        pulumi.set(__self__, "network_cidr", network_cidr)
        if network_id and not isinstance(network_id, str):
            raise TypeError("Expected argument 'network_id' to be a str")
        pulumi.set(__self__, "network_id", network_id)
        if networkings and not isinstance(networkings, list):
            raise TypeError("Expected argument 'networkings' to be a list")
        pulumi.set(__self__, "networkings", networkings)
        if node_authorizations and not isinstance(node_authorizations, list):
            raise TypeError("Expected argument 'node_authorizations' to be a list")
        pulumi.set(__self__, "node_authorizations", node_authorizations)
        if node_port_accesses and not isinstance(node_port_accesses, list):
            raise TypeError("Expected argument 'node_port_accesses' to be a list")
        pulumi.set(__self__, "node_port_accesses", node_port_accesses)
        if node_problem_detectors and not isinstance(node_problem_detectors, list):
            raise TypeError("Expected argument 'node_problem_detectors' to be a list")
        pulumi.set(__self__, "node_problem_detectors", node_problem_detectors)
        if node_termination_handlers and not isinstance(node_termination_handlers, list):
            raise TypeError("Expected argument 'node_termination_handlers' to be a list")
        pulumi.set(__self__, "node_termination_handlers", node_termination_handlers)
        if non_masquerade_cidr and not isinstance(non_masquerade_cidr, str):
            raise TypeError("Expected argument 'non_masquerade_cidr' to be a str")
        pulumi.set(__self__, "non_masquerade_cidr", non_masquerade_cidr)
        if ntps and not isinstance(ntps, list):
            raise TypeError("Expected argument 'ntps' to be a list")
        pulumi.set(__self__, "ntps", ntps)
        if pod_cidr and not isinstance(pod_cidr, str):
            raise TypeError("Expected argument 'pod_cidr' to be a str")
        pulumi.set(__self__, "pod_cidr", pod_cidr)
        if pod_identity_webhooks and not isinstance(pod_identity_webhooks, list):
            raise TypeError("Expected argument 'pod_identity_webhooks' to be a list")
        pulumi.set(__self__, "pod_identity_webhooks", pod_identity_webhooks)
        if project and not isinstance(project, str):
            raise TypeError("Expected argument 'project' to be a str")
        pulumi.set(__self__, "project", project)
        if rolling_updates and not isinstance(rolling_updates, list):
            raise TypeError("Expected argument 'rolling_updates' to be a list")
        pulumi.set(__self__, "rolling_updates", rolling_updates)
        if secret_store and not isinstance(secret_store, str):
            raise TypeError("Expected argument 'secret_store' to be a str")
        pulumi.set(__self__, "secret_store", secret_store)
        if secrets and not isinstance(secrets, list):
            raise TypeError("Expected argument 'secrets' to be a list")
        pulumi.set(__self__, "secrets", secrets)
        if service_account_issuer_discoveries and not isinstance(service_account_issuer_discoveries, list):
            raise TypeError("Expected argument 'service_account_issuer_discoveries' to be a list")
        pulumi.set(__self__, "service_account_issuer_discoveries", service_account_issuer_discoveries)
        if service_cluster_ip_range and not isinstance(service_cluster_ip_range, str):
            raise TypeError("Expected argument 'service_cluster_ip_range' to be a str")
        pulumi.set(__self__, "service_cluster_ip_range", service_cluster_ip_range)
        if snapshot_controllers and not isinstance(snapshot_controllers, list):
            raise TypeError("Expected argument 'snapshot_controllers' to be a list")
        pulumi.set(__self__, "snapshot_controllers", snapshot_controllers)
        if ssh_accesses and not isinstance(ssh_accesses, list):
            raise TypeError("Expected argument 'ssh_accesses' to be a list")
        pulumi.set(__self__, "ssh_accesses", ssh_accesses)
        if ssh_key_name and not isinstance(ssh_key_name, str):
            raise TypeError("Expected argument 'ssh_key_name' to be a str")
        pulumi.set(__self__, "ssh_key_name", ssh_key_name)
        if subnets and not isinstance(subnets, list):
            raise TypeError("Expected argument 'subnets' to be a list")
        pulumi.set(__self__, "subnets", subnets)
        if sysctl_parameters and not isinstance(sysctl_parameters, list):
            raise TypeError("Expected argument 'sysctl_parameters' to be a list")
        pulumi.set(__self__, "sysctl_parameters", sysctl_parameters)
        if tag_subnets and not isinstance(tag_subnets, dict):
            raise TypeError("Expected argument 'tag_subnets' to be a dict")
        pulumi.set(__self__, "tag_subnets", tag_subnets)
        if topologies and not isinstance(topologies, list):
            raise TypeError("Expected argument 'topologies' to be a list")
        pulumi.set(__self__, "topologies", topologies)
        if update_policy and not isinstance(update_policy, str):
            raise TypeError("Expected argument 'update_policy' to be a str")
        pulumi.set(__self__, "update_policy", update_policy)
        if use_host_certificates and not isinstance(use_host_certificates, bool):
            raise TypeError("Expected argument 'use_host_certificates' to be a bool")
        pulumi.set(__self__, "use_host_certificates", use_host_certificates)
        if warm_pools and not isinstance(warm_pools, list):
            raise TypeError("Expected argument 'warm_pools' to be a list")
        pulumi.set(__self__, "warm_pools", warm_pools)

    @property
    @pulumi.getter(name="additionalNetworkCidrs")
    def additional_network_cidrs(self) -> Sequence[str]:
        return pulumi.get(self, "additional_network_cidrs")

    @property
    @pulumi.getter(name="additionalPolicies")
    def additional_policies(self) -> Mapping[str, str]:
        return pulumi.get(self, "additional_policies")

    @property
    @pulumi.getter(name="additionalSans")
    def additional_sans(self) -> Sequence[str]:
        return pulumi.get(self, "additional_sans")

    @property
    @pulumi.getter
    def addons(self) -> Sequence['outputs.GetClusterAddonResult']:
        return pulumi.get(self, "addons")

    @property
    @pulumi.getter(name="adminSshKey")
    def admin_ssh_key(self) -> str:
        return pulumi.get(self, "admin_ssh_key")

    @property
    @pulumi.getter
    def annotations(self) -> Mapping[str, str]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def apis(self) -> Sequence['outputs.GetClusterApiResult']:
        return pulumi.get(self, "apis")

    @property
    @pulumi.getter
    def assets(self) -> Sequence['outputs.GetClusterAssetResult']:
        return pulumi.get(self, "assets")

    @property
    @pulumi.getter
    def authentications(self) -> Sequence['outputs.GetClusterAuthenticationResult']:
        return pulumi.get(self, "authentications")

    @property
    @pulumi.getter
    def authorizations(self) -> Sequence['outputs.GetClusterAuthorizationResult']:
        return pulumi.get(self, "authorizations")

    @property
    @pulumi.getter(name="awsLoadBalancerControllers")
    def aws_load_balancer_controllers(self) -> Sequence['outputs.GetClusterAwsLoadBalancerControllerResult']:
        return pulumi.get(self, "aws_load_balancer_controllers")

    @property
    @pulumi.getter(name="certManagers")
    def cert_managers(self) -> Sequence['outputs.GetClusterCertManagerResult']:
        return pulumi.get(self, "cert_managers")

    @property
    @pulumi.getter
    def channel(self) -> str:
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter(name="cloudConfigs")
    def cloud_configs(self) -> Sequence['outputs.GetClusterCloudConfigResult']:
        return pulumi.get(self, "cloud_configs")

    @property
    @pulumi.getter(name="cloudLabels")
    def cloud_labels(self) -> Mapping[str, str]:
        return pulumi.get(self, "cloud_labels")

    @property
    @pulumi.getter(name="cloudProviders")
    def cloud_providers(self) -> Sequence['outputs.GetClusterCloudProviderResult']:
        return pulumi.get(self, "cloud_providers")

    @property
    @pulumi.getter(name="clusterAutoscalers")
    def cluster_autoscalers(self) -> Sequence['outputs.GetClusterClusterAutoscalerResult']:
        return pulumi.get(self, "cluster_autoscalers")

    @property
    @pulumi.getter(name="clusterDnsDomain")
    def cluster_dns_domain(self) -> str:
        return pulumi.get(self, "cluster_dns_domain")

    @property
    @pulumi.getter(name="configBase")
    def config_base(self) -> str:
        return pulumi.get(self, "config_base")

    @property
    @pulumi.getter(name="configStore")
    def config_store(self) -> str:
        return pulumi.get(self, "config_store")

    @property
    @pulumi.getter(name="containerRuntime")
    def container_runtime(self) -> str:
        return pulumi.get(self, "container_runtime")

    @property
    @pulumi.getter
    def containerds(self) -> Sequence['outputs.GetClusterContainerdResult']:
        return pulumi.get(self, "containerds")

    @property
    @pulumi.getter(name="dnsZone")
    def dns_zone(self) -> str:
        return pulumi.get(self, "dns_zone")

    @property
    @pulumi.getter
    def dockers(self) -> Sequence['outputs.GetClusterDockerResult']:
        return pulumi.get(self, "dockers")

    @property
    @pulumi.getter(name="egressProxies")
    def egress_proxies(self) -> Sequence['outputs.GetClusterEgressProxyResult']:
        return pulumi.get(self, "egress_proxies")

    @property
    @pulumi.getter(name="encryptionConfig")
    def encryption_config(self) -> bool:
        return pulumi.get(self, "encryption_config")

    @property
    @pulumi.getter(name="etcdClusters")
    def etcd_clusters(self) -> Sequence['outputs.GetClusterEtcdClusterResult']:
        return pulumi.get(self, "etcd_clusters")

    @property
    @pulumi.getter(name="externalCloudControllerManagers")
    def external_cloud_controller_managers(self) -> Sequence['outputs.GetClusterExternalCloudControllerManagerResult']:
        return pulumi.get(self, "external_cloud_controller_managers")

    @property
    @pulumi.getter(name="externalDns")
    def external_dns(self) -> Sequence['outputs.GetClusterExternalDnResult']:
        return pulumi.get(self, "external_dns")

    @property
    @pulumi.getter(name="externalPolicies")
    def external_policies(self) -> Sequence['outputs.GetClusterExternalPolicyResult']:
        return pulumi.get(self, "external_policies")

    @property
    @pulumi.getter(name="fileAssets")
    def file_assets(self) -> Sequence['outputs.GetClusterFileAssetResult']:
        return pulumi.get(self, "file_assets")

    @property
    @pulumi.getter
    def hooks(self) -> Sequence['outputs.GetClusterHookResult']:
        return pulumi.get(self, "hooks")

    @property
    @pulumi.getter
    def iams(self) -> Sequence['outputs.GetClusterIamResult']:
        return pulumi.get(self, "iams")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isolateMasters")
    def isolate_masters(self) -> bool:
        return pulumi.get(self, "isolate_masters")

    @property
    @pulumi.getter
    def karpenters(self) -> Sequence['outputs.GetClusterKarpenterResult']:
        return pulumi.get(self, "karpenters")

    @property
    @pulumi.getter(name="keyStore")
    def key_store(self) -> str:
        return pulumi.get(self, "key_store")

    @property
    @pulumi.getter(name="kubeApiServers")
    def kube_api_servers(self) -> Sequence['outputs.GetClusterKubeApiServerResult']:
        return pulumi.get(self, "kube_api_servers")

    @property
    @pulumi.getter(name="kubeControllerManagers")
    def kube_controller_managers(self) -> Sequence['outputs.GetClusterKubeControllerManagerResult']:
        return pulumi.get(self, "kube_controller_managers")

    @property
    @pulumi.getter(name="kubeDns")
    def kube_dns(self) -> Sequence['outputs.GetClusterKubeDnResult']:
        return pulumi.get(self, "kube_dns")

    @property
    @pulumi.getter(name="kubeProxies")
    def kube_proxies(self) -> Sequence['outputs.GetClusterKubeProxyResult']:
        return pulumi.get(self, "kube_proxies")

    @property
    @pulumi.getter(name="kubeSchedulers")
    def kube_schedulers(self) -> Sequence['outputs.GetClusterKubeSchedulerResult']:
        return pulumi.get(self, "kube_schedulers")

    @property
    @pulumi.getter
    def kubelets(self) -> Sequence['outputs.GetClusterKubeletResult']:
        return pulumi.get(self, "kubelets")

    @property
    @pulumi.getter(name="kubernetesApiAccesses")
    def kubernetes_api_accesses(self) -> Sequence[str]:
        return pulumi.get(self, "kubernetes_api_accesses")

    @property
    @pulumi.getter(name="kubernetesVersion")
    def kubernetes_version(self) -> str:
        return pulumi.get(self, "kubernetes_version")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="masterInternalName")
    def master_internal_name(self) -> str:
        return pulumi.get(self, "master_internal_name")

    @property
    @pulumi.getter(name="masterKubelets")
    def master_kubelets(self) -> Sequence['outputs.GetClusterMasterKubeletResult']:
        return pulumi.get(self, "master_kubelets")

    @property
    @pulumi.getter(name="masterPublicName")
    def master_public_name(self) -> str:
        return pulumi.get(self, "master_public_name")

    @property
    @pulumi.getter(name="metricsServers")
    def metrics_servers(self) -> Sequence['outputs.GetClusterMetricsServerResult']:
        return pulumi.get(self, "metrics_servers")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkCidr")
    def network_cidr(self) -> str:
        return pulumi.get(self, "network_cidr")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> str:
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter
    def networkings(self) -> Sequence['outputs.GetClusterNetworkingResult']:
        return pulumi.get(self, "networkings")

    @property
    @pulumi.getter(name="nodeAuthorizations")
    def node_authorizations(self) -> Sequence['outputs.GetClusterNodeAuthorizationResult']:
        return pulumi.get(self, "node_authorizations")

    @property
    @pulumi.getter(name="nodePortAccesses")
    def node_port_accesses(self) -> Sequence[str]:
        return pulumi.get(self, "node_port_accesses")

    @property
    @pulumi.getter(name="nodeProblemDetectors")
    def node_problem_detectors(self) -> Sequence['outputs.GetClusterNodeProblemDetectorResult']:
        return pulumi.get(self, "node_problem_detectors")

    @property
    @pulumi.getter(name="nodeTerminationHandlers")
    def node_termination_handlers(self) -> Sequence['outputs.GetClusterNodeTerminationHandlerResult']:
        return pulumi.get(self, "node_termination_handlers")

    @property
    @pulumi.getter(name="nonMasqueradeCidr")
    def non_masquerade_cidr(self) -> str:
        return pulumi.get(self, "non_masquerade_cidr")

    @property
    @pulumi.getter
    def ntps(self) -> Sequence['outputs.GetClusterNtpResult']:
        return pulumi.get(self, "ntps")

    @property
    @pulumi.getter(name="podCidr")
    def pod_cidr(self) -> str:
        return pulumi.get(self, "pod_cidr")

    @property
    @pulumi.getter(name="podIdentityWebhooks")
    def pod_identity_webhooks(self) -> Sequence['outputs.GetClusterPodIdentityWebhookResult']:
        return pulumi.get(self, "pod_identity_webhooks")

    @property
    @pulumi.getter
    def project(self) -> str:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="rollingUpdates")
    def rolling_updates(self) -> Sequence['outputs.GetClusterRollingUpdateResult']:
        return pulumi.get(self, "rolling_updates")

    @property
    @pulumi.getter(name="secretStore")
    def secret_store(self) -> str:
        return pulumi.get(self, "secret_store")

    @property
    @pulumi.getter
    def secrets(self) -> Sequence['outputs.GetClusterSecretResult']:
        return pulumi.get(self, "secrets")

    @property
    @pulumi.getter(name="serviceAccountIssuerDiscoveries")
    def service_account_issuer_discoveries(self) -> Sequence['outputs.GetClusterServiceAccountIssuerDiscoveryResult']:
        return pulumi.get(self, "service_account_issuer_discoveries")

    @property
    @pulumi.getter(name="serviceClusterIpRange")
    def service_cluster_ip_range(self) -> str:
        return pulumi.get(self, "service_cluster_ip_range")

    @property
    @pulumi.getter(name="snapshotControllers")
    def snapshot_controllers(self) -> Sequence['outputs.GetClusterSnapshotControllerResult']:
        return pulumi.get(self, "snapshot_controllers")

    @property
    @pulumi.getter(name="sshAccesses")
    def ssh_accesses(self) -> Sequence[str]:
        return pulumi.get(self, "ssh_accesses")

    @property
    @pulumi.getter(name="sshKeyName")
    def ssh_key_name(self) -> str:
        return pulumi.get(self, "ssh_key_name")

    @property
    @pulumi.getter
    def subnets(self) -> Sequence['outputs.GetClusterSubnetResult']:
        return pulumi.get(self, "subnets")

    @property
    @pulumi.getter(name="sysctlParameters")
    def sysctl_parameters(self) -> Sequence[str]:
        return pulumi.get(self, "sysctl_parameters")

    @property
    @pulumi.getter(name="tagSubnets")
    def tag_subnets(self) -> Optional['outputs.GetClusterTagSubnetsResult']:
        return pulumi.get(self, "tag_subnets")

    @property
    @pulumi.getter
    def topologies(self) -> Sequence['outputs.GetClusterTopologyResult']:
        return pulumi.get(self, "topologies")

    @property
    @pulumi.getter(name="updatePolicy")
    def update_policy(self) -> str:
        return pulumi.get(self, "update_policy")

    @property
    @pulumi.getter(name="useHostCertificates")
    def use_host_certificates(self) -> bool:
        return pulumi.get(self, "use_host_certificates")

    @property
    @pulumi.getter(name="warmPools")
    def warm_pools(self) -> Sequence['outputs.GetClusterWarmPoolResult']:
        return pulumi.get(self, "warm_pools")


class AwaitableGetClusterResult(GetClusterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetClusterResult(
            additional_network_cidrs=self.additional_network_cidrs,
            additional_policies=self.additional_policies,
            additional_sans=self.additional_sans,
            addons=self.addons,
            admin_ssh_key=self.admin_ssh_key,
            annotations=self.annotations,
            apis=self.apis,
            assets=self.assets,
            authentications=self.authentications,
            authorizations=self.authorizations,
            aws_load_balancer_controllers=self.aws_load_balancer_controllers,
            cert_managers=self.cert_managers,
            channel=self.channel,
            cloud_configs=self.cloud_configs,
            cloud_labels=self.cloud_labels,
            cloud_providers=self.cloud_providers,
            cluster_autoscalers=self.cluster_autoscalers,
            cluster_dns_domain=self.cluster_dns_domain,
            config_base=self.config_base,
            config_store=self.config_store,
            container_runtime=self.container_runtime,
            containerds=self.containerds,
            dns_zone=self.dns_zone,
            dockers=self.dockers,
            egress_proxies=self.egress_proxies,
            encryption_config=self.encryption_config,
            etcd_clusters=self.etcd_clusters,
            external_cloud_controller_managers=self.external_cloud_controller_managers,
            external_dns=self.external_dns,
            external_policies=self.external_policies,
            file_assets=self.file_assets,
            hooks=self.hooks,
            iams=self.iams,
            id=self.id,
            isolate_masters=self.isolate_masters,
            karpenters=self.karpenters,
            key_store=self.key_store,
            kube_api_servers=self.kube_api_servers,
            kube_controller_managers=self.kube_controller_managers,
            kube_dns=self.kube_dns,
            kube_proxies=self.kube_proxies,
            kube_schedulers=self.kube_schedulers,
            kubelets=self.kubelets,
            kubernetes_api_accesses=self.kubernetes_api_accesses,
            kubernetes_version=self.kubernetes_version,
            labels=self.labels,
            master_internal_name=self.master_internal_name,
            master_kubelets=self.master_kubelets,
            master_public_name=self.master_public_name,
            metrics_servers=self.metrics_servers,
            name=self.name,
            network_cidr=self.network_cidr,
            network_id=self.network_id,
            networkings=self.networkings,
            node_authorizations=self.node_authorizations,
            node_port_accesses=self.node_port_accesses,
            node_problem_detectors=self.node_problem_detectors,
            node_termination_handlers=self.node_termination_handlers,
            non_masquerade_cidr=self.non_masquerade_cidr,
            ntps=self.ntps,
            pod_cidr=self.pod_cidr,
            pod_identity_webhooks=self.pod_identity_webhooks,
            project=self.project,
            rolling_updates=self.rolling_updates,
            secret_store=self.secret_store,
            secrets=self.secrets,
            service_account_issuer_discoveries=self.service_account_issuer_discoveries,
            service_cluster_ip_range=self.service_cluster_ip_range,
            snapshot_controllers=self.snapshot_controllers,
            ssh_accesses=self.ssh_accesses,
            ssh_key_name=self.ssh_key_name,
            subnets=self.subnets,
            sysctl_parameters=self.sysctl_parameters,
            tag_subnets=self.tag_subnets,
            topologies=self.topologies,
            update_policy=self.update_policy,
            use_host_certificates=self.use_host_certificates,
            warm_pools=self.warm_pools)


def get_cluster(external_policies: Optional[Sequence[pulumi.InputType['GetClusterExternalPolicyArgs']]] = None,
                name: Optional[str] = None,
                tag_subnets: Optional[pulumi.InputType['GetClusterTagSubnetsArgs']] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetClusterResult:
    """
    Use this data source to access information about an existing resource.

    :param Sequence[pulumi.InputType['GetClusterExternalPolicyArgs']] external_policies: - Map(List(String)) - ExternalPolicies allows the insertion of pre-existing managed policies on IG Roles.
    :param str name: - String - Name defines the cluster name.
    :param pulumi.InputType['GetClusterTagSubnetsArgs'] tag_subnets: - Bool(Nullable) - TagSubnets controls if tags are added to subnets to enable use by load balancers (AWS only). Default: true.
    """
    __args__ = dict()
    __args__['externalPolicies'] = external_policies
    __args__['name'] = name
    __args__['tagSubnets'] = tag_subnets
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('kops:index/getCluster:getCluster', __args__, opts=opts, typ=GetClusterResult).value

    return AwaitableGetClusterResult(
        additional_network_cidrs=__ret__.additional_network_cidrs,
        additional_policies=__ret__.additional_policies,
        additional_sans=__ret__.additional_sans,
        addons=__ret__.addons,
        admin_ssh_key=__ret__.admin_ssh_key,
        annotations=__ret__.annotations,
        apis=__ret__.apis,
        assets=__ret__.assets,
        authentications=__ret__.authentications,
        authorizations=__ret__.authorizations,
        aws_load_balancer_controllers=__ret__.aws_load_balancer_controllers,
        cert_managers=__ret__.cert_managers,
        channel=__ret__.channel,
        cloud_configs=__ret__.cloud_configs,
        cloud_labels=__ret__.cloud_labels,
        cloud_providers=__ret__.cloud_providers,
        cluster_autoscalers=__ret__.cluster_autoscalers,
        cluster_dns_domain=__ret__.cluster_dns_domain,
        config_base=__ret__.config_base,
        config_store=__ret__.config_store,
        container_runtime=__ret__.container_runtime,
        containerds=__ret__.containerds,
        dns_zone=__ret__.dns_zone,
        dockers=__ret__.dockers,
        egress_proxies=__ret__.egress_proxies,
        encryption_config=__ret__.encryption_config,
        etcd_clusters=__ret__.etcd_clusters,
        external_cloud_controller_managers=__ret__.external_cloud_controller_managers,
        external_dns=__ret__.external_dns,
        external_policies=__ret__.external_policies,
        file_assets=__ret__.file_assets,
        hooks=__ret__.hooks,
        iams=__ret__.iams,
        id=__ret__.id,
        isolate_masters=__ret__.isolate_masters,
        karpenters=__ret__.karpenters,
        key_store=__ret__.key_store,
        kube_api_servers=__ret__.kube_api_servers,
        kube_controller_managers=__ret__.kube_controller_managers,
        kube_dns=__ret__.kube_dns,
        kube_proxies=__ret__.kube_proxies,
        kube_schedulers=__ret__.kube_schedulers,
        kubelets=__ret__.kubelets,
        kubernetes_api_accesses=__ret__.kubernetes_api_accesses,
        kubernetes_version=__ret__.kubernetes_version,
        labels=__ret__.labels,
        master_internal_name=__ret__.master_internal_name,
        master_kubelets=__ret__.master_kubelets,
        master_public_name=__ret__.master_public_name,
        metrics_servers=__ret__.metrics_servers,
        name=__ret__.name,
        network_cidr=__ret__.network_cidr,
        network_id=__ret__.network_id,
        networkings=__ret__.networkings,
        node_authorizations=__ret__.node_authorizations,
        node_port_accesses=__ret__.node_port_accesses,
        node_problem_detectors=__ret__.node_problem_detectors,
        node_termination_handlers=__ret__.node_termination_handlers,
        non_masquerade_cidr=__ret__.non_masquerade_cidr,
        ntps=__ret__.ntps,
        pod_cidr=__ret__.pod_cidr,
        pod_identity_webhooks=__ret__.pod_identity_webhooks,
        project=__ret__.project,
        rolling_updates=__ret__.rolling_updates,
        secret_store=__ret__.secret_store,
        secrets=__ret__.secrets,
        service_account_issuer_discoveries=__ret__.service_account_issuer_discoveries,
        service_cluster_ip_range=__ret__.service_cluster_ip_range,
        snapshot_controllers=__ret__.snapshot_controllers,
        ssh_accesses=__ret__.ssh_accesses,
        ssh_key_name=__ret__.ssh_key_name,
        subnets=__ret__.subnets,
        sysctl_parameters=__ret__.sysctl_parameters,
        tag_subnets=__ret__.tag_subnets,
        topologies=__ret__.topologies,
        update_policy=__ret__.update_policy,
        use_host_certificates=__ret__.use_host_certificates,
        warm_pools=__ret__.warm_pools)


@_utilities.lift_output_func(get_cluster)
def get_cluster_output(external_policies: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetClusterExternalPolicyArgs']]]]] = None,
                       name: Optional[pulumi.Input[str]] = None,
                       tag_subnets: Optional[pulumi.Input[Optional[pulumi.InputType['GetClusterTagSubnetsArgs']]]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetClusterResult]:
    """
    Use this data source to access information about an existing resource.

    :param Sequence[pulumi.InputType['GetClusterExternalPolicyArgs']] external_policies: - Map(List(String)) - ExternalPolicies allows the insertion of pre-existing managed policies on IG Roles.
    :param str name: - String - Name defines the cluster name.
    :param pulumi.InputType['GetClusterTagSubnetsArgs'] tag_subnets: - Bool(Nullable) - TagSubnets controls if tags are added to subnets to enable use by load balancers (AWS only). Default: true.
    """
    ...
