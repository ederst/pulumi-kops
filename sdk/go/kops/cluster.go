// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kops

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// You can import an existing cluster by creating a `kops_cluster` configuration
//
// ```sh
//
//	$ pulumi import kops:index/cluster:Cluster and running the `terraform import` command
//
// ```
//
//  1. Create a terraform configuration:
//
//     hcl
//
//     provider "kops" {
//
//     state_store = "s3://cluster.example.com"
//
//     }
//
//     resource "kops_cluster" "cluster" {
//
//     name
//
// = "cluster.example.com"
//
//	// ....
//
//	}
//
// ```sh
//
//	$ pulumi import kops:index/cluster:Cluster
//
// Run `terraform import`
// ```
//
// ```sh
//
//	$ pulumi import kops:index/cluster:Cluster kops_cluster.cluster cluster.example.com
//
// ```
type Cluster struct {
	pulumi.CustomResourceState

	// - List(String) - AdditionalNetworkCIDRs is a list of additional CIDR used for the AWS VPC<br />or otherwise allocated to k8s. This is a real CIDR, not the internal k8s network<br />On AWS, it maps to any additional CIDRs added to a VPC.
	AdditionalNetworkCidrs pulumi.StringArrayOutput `pulumi:"additionalNetworkCidrs"`
	// - Map(String) - Additional policies to add for roles.
	AdditionalPolicies pulumi.StringMapOutput `pulumi:"additionalPolicies"`
	// - List(String) - AdditionalSANs adds additional Subject Alternate Names to apiserver cert that kops generates.
	AdditionalSans pulumi.StringArrayOutput `pulumi:"additionalSans"`
	// - List(addon_spec) - Additional addons that should be installed on the cluster.
	Addons ClusterAddonArrayOutput `pulumi:"addons"`
	// - (Sensitive) - String - AdminSshKey defines the cluster admin ssh key.
	AdminSshKey pulumi.StringPtrOutput `pulumi:"adminSshKey"`
	// - Map(String) - Annotations is an unstructured key value map stored with a resource that may be<br />set by external tools to store and retrieve arbitrary metadata. They are not<br />queryable and should be preserved when modifying objects.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// - accessSpec - API field controls how the API is exposed outside the cluster.
	Api ClusterApiPtrOutput `pulumi:"api"`
	// - assets - Assets is alternative locations for files and containers; the API under construction, will remove this comment once this API is fully functional.
	Assets ClusterAssetsPtrOutput `pulumi:"assets"`
	// - authenticationSpec - Authentication field controls how the cluster is configured for authentication.
	Authentication ClusterAuthenticationPtrOutput `pulumi:"authentication"`
	// - authorizationSpec - Authorization field controls how the cluster is configured for authorization.
	Authorization ClusterAuthorizationPtrOutput `pulumi:"authorization"`
	// - awsLoadBalancerControllerConfig - AWSLoadbalancerControllerConfig determines the AWS LB controller configuration.
	AwsLoadBalancerController ClusterAwsLoadBalancerControllerPtrOutput `pulumi:"awsLoadBalancerController"`
	// - certManagerConfig - CertManager determines the metrics server configuration.
	CertManager ClusterCertManagerPtrOutput `pulumi:"certManager"`
	// - String - The Channel we are following.
	Channel pulumi.StringPtrOutput `pulumi:"channel"`
	// - cloud_configuration
	CloudConfig ClusterCloudConfigPtrOutput `pulumi:"cloudConfig"`
	// - Map(String) - CloudLabels defines additional tags or labels on cloud provider resources.
	CloudLabels pulumi.StringMapOutput `pulumi:"cloudLabels"`
	// - cloudProviderSpec - CloudProvider configures the cloud provider to use.
	CloudProvider ClusterCloudProviderOutput `pulumi:"cloudProvider"`
	// - clusterAutoscalerConfig - ClusterAutoscaler defines the cluster autoscaler configuration.
	ClusterAutoscaler ClusterClusterAutoscalerPtrOutput `pulumi:"clusterAutoscaler"`
	// - String - ClusterDNSDomain is the suffix we use for internal DNS names (normally cluster.local).
	ClusterDnsDomain pulumi.StringPtrOutput `pulumi:"clusterDnsDomain"`
	// - (Computed) - String - ConfigBase is the path where we store configuration for the cluster<br />This might be different than the location where the cluster spec itself is stored,<br />both because this must be accessible to the cluster,<br />and because it might be on a different cloud or storage system (etcd vs S3).
	ConfigBase pulumi.StringOutput `pulumi:"configBase"`
	// - String - ConfigStore is the VFS path to where the configuration (Cluster, InstanceGroups etc) is stored.
	ConfigStore pulumi.StringPtrOutput `pulumi:"configStore"`
	// - String - Container runtime to use for Kubernetes.
	ContainerRuntime pulumi.StringPtrOutput `pulumi:"containerRuntime"`
	// - containerdConfig - Component configurations.
	Containerd ClusterContainerdPtrOutput `pulumi:"containerd"`
	// - String - DNSZone is the DNS zone we should use when configuring DNS<br />This is because some clouds let us define a managed zone foo.bar, and then have<br />kubernetes.dev.foo.bar, without needing to define dev.foo.bar as a hosted zone.<br />DNSZone will probably be a suffix of the MasterPublicName and MasterInternalName<br />Note that DNSZone can either by the host name of the zone (containing dots),<br />or can be an identifier for the zone.
	DnsZone pulumi.StringPtrOutput `pulumi:"dnsZone"`
	// - docker_config
	Docker ClusterDockerPtrOutput `pulumi:"docker"`
	// - egressProxySpec - HTTPProxy defines connection information to support use of a private cluster behind an forward HTTP Proxy.
	EgressProxy ClusterEgressProxyPtrOutput `pulumi:"egressProxy"`
	// - Bool - EncryptionConfig controls if encryption is enabled.
	EncryptionConfig pulumi.BoolPtrOutput `pulumi:"encryptionConfig"`
	// - List(etcd_cluster_spec) - EtcdClusters stores the configuration for each cluster.
	EtcdClusters ClusterEtcdClusterArrayOutput `pulumi:"etcdClusters"`
	// - cloud_controller_manager_config
	ExternalCloudControllerManager ClusterExternalCloudControllerManagerPtrOutput `pulumi:"externalCloudControllerManager"`
	// - external_dns_config
	ExternalDns ClusterExternalDnsPtrOutput `pulumi:"externalDns"`
	// - Map(List(String)) - ExternalPolicies allows the insertion of pre-existing managed policies on IG Roles.
	ExternalPolicies ClusterExternalPolicyArrayOutput `pulumi:"externalPolicies"`
	// - List(file_asset_spec) - A collection of files assets for deployed cluster wide.
	FileAssets ClusterFileAssetArrayOutput `pulumi:"fileAssets"`
	// - List(hook_spec) - Hooks for custom actions e.g. on first installation.
	Hooks ClusterHookArrayOutput `pulumi:"hooks"`
	// - (Computed) - iamSpec - IAM field adds control over the IAM security policies applied to resources.
	Iam ClusterIamOutput `pulumi:"iam"`
	// - Bool - IsolateMasters determines whether we should lock down masters so that they are not on the pod network.<br />true is the kube-up behaviour, but it is very surprising: it means that daemonsets only work on the master<br />if they have hostNetwork=true.<br />false is now the default, and it will:<br /> * give the master a normal PodCIDR<br /> * run kube-proxy on the master<br /> * enable debugging handlers on the master, so kubectl logs works.
	IsolateMasters pulumi.BoolPtrOutput `pulumi:"isolateMasters"`
	// - karpenterConfig - Karpenter defines the Karpenter configuration.
	Karpenter ClusterKarpenterPtrOutput `pulumi:"karpenter"`
	// - String - KeyStore is the VFS path to where SSL keys and certificates are stored.
	KeyStore pulumi.StringPtrOutput `pulumi:"keyStore"`
	// - kube_api_server_config
	KubeApiServer ClusterKubeApiServerPtrOutput `pulumi:"kubeApiServer"`
	// - kube_controller_manager_config
	KubeControllerManager ClusterKubeControllerManagerPtrOutput `pulumi:"kubeControllerManager"`
	// - kube_dns_config
	KubeDns ClusterKubeDnsPtrOutput `pulumi:"kubeDns"`
	// - kube_proxy_config
	KubeProxy ClusterKubeProxyPtrOutput `pulumi:"kubeProxy"`
	// - kube_scheduler_config
	KubeScheduler ClusterKubeSchedulerPtrOutput `pulumi:"kubeScheduler"`
	// - kubeletConfigSpec - Kubelet is the kubelet configuration for nodes not belonging to the control plane.<br />It can be overridden by the kubelet configuration specified in the instance group.
	Kubelet ClusterKubeletPtrOutput `pulumi:"kubelet"`
	// - List(String) - KubernetesAPIAccess is a list of the CIDRs that can access the Kubernetes API endpoint (master HTTPS).
	KubernetesApiAccesses pulumi.StringArrayOutput `pulumi:"kubernetesApiAccesses"`
	// - String - The version of kubernetes to install (optional, and can be a "spec" like stable).
	KubernetesVersion pulumi.StringPtrOutput `pulumi:"kubernetesVersion"`
	// - Map(String) - Map of string keys and values that can be used to organize and categorize<br />(scope and select) objects. May match selectors of replication controllers<br />and services.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// - (Computed) - String - MasterInternalName is the internal DNS name for the master nodes.
	MasterInternalName pulumi.StringOutput `pulumi:"masterInternalName"`
	// - kubeletConfigSpec - MasterKubelet is the kubelet configuration for nodes belonging to the control plane<br />It can be overridden by the kubelet configuration specified in the instance group.
	MasterKubelet ClusterMasterKubeletPtrOutput `pulumi:"masterKubelet"`
	// - (Computed) - String - MasterPublicName is the external DNS name for the master nodes.
	MasterPublicName pulumi.StringOutput `pulumi:"masterPublicName"`
	// - metricsServerConfig - MetricsServer determines the metrics server configuration.
	MetricsServer ClusterMetricsServerPtrOutput `pulumi:"metricsServer"`
	// - (Force new) - String - Name defines the cluster name.
	Name pulumi.StringOutput `pulumi:"name"`
	// - (Computed) - String - NetworkCIDR is the CIDR used for the AWS VPC / DO/ GCE Network, or otherwise allocated to k8s<br />This is a real CIDR, not the internal k8s network<br />On AWS, it maps to the VPC CIDR.  It is not required on GCE.<br />On DO, it maps to the VPC CIDR.
	NetworkCidr pulumi.StringOutput `pulumi:"networkCidr"`
	// - String - NetworkID is an identifier of a network, if we want to reuse/share an existing network (e.g. an AWS VPC).
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// - networkingSpec - Networking configuration.
	Networking ClusterNetworkingOutput `pulumi:"networking"`
	// - nodeAuthorizationSpec - NodeAuthorization defined the custom node authorization configuration.
	NodeAuthorization ClusterNodeAuthorizationPtrOutput `pulumi:"nodeAuthorization"`
	// - List(String) - NodePortAccess is a list of the CIDRs that can access the node ports range (30000-32767).
	NodePortAccesses pulumi.StringArrayOutput `pulumi:"nodePortAccesses"`
	// - nodeProblemDetectorConfig - NodeProblemDetector determines the node problem detector configuration.
	NodeProblemDetector ClusterNodeProblemDetectorPtrOutput `pulumi:"nodeProblemDetector"`
	// - nodeTerminationHandlerConfig - NodeTerminationHandler determines the node termination handler configuration.
	NodeTerminationHandler ClusterNodeTerminationHandlerPtrOutput `pulumi:"nodeTerminationHandler"`
	// - (Computed) - String - NonMasqueradeCIDR is the CIDR for the internal k8s network (on which pods & services live)<br />It cannot overlap ServiceClusterIPRange.
	NonMasqueradeCidr pulumi.StringOutput `pulumi:"nonMasqueradeCidr"`
	// - ntp_config
	Ntp ClusterNtpPtrOutput `pulumi:"ntp"`
	// - String - PodCIDR is the CIDR from which we allocate IPs for pods.
	PodCidr pulumi.StringPtrOutput `pulumi:"podCidr"`
	// - podIdentityWebhookConfig - PodIdentityWebhook determines the EKS Pod Identity Webhook configuration.
	PodIdentityWebhook ClusterPodIdentityWebhookPtrOutput `pulumi:"podIdentityWebhook"`
	// - String - Project is the cloud project we should use, required on GCE.
	Project pulumi.StringPtrOutput `pulumi:"project"`
	// - Int - Revision is incremented every time the resource changes, this is useful for triggering cluster updater.
	Revision pulumi.IntOutput `pulumi:"revision"`
	// - rollingUpdate - RollingUpdate defines the default rolling-update settings for instance groups.
	RollingUpdate ClusterRollingUpdatePtrOutput `pulumi:"rollingUpdate"`
	// - String - SecretStore is the VFS path to where secrets are stored.
	SecretStore pulumi.StringPtrOutput `pulumi:"secretStore"`
	// - clusterSecrets - Secrets defines the cluster secret.
	Secrets ClusterSecretsPtrOutput `pulumi:"secrets"`
	// - serviceAccountIssuerDiscoveryConfig - ServiceAccountIssuerDiscovery configures the OIDC Issuer for ServiceAccounts.
	ServiceAccountIssuerDiscovery ClusterServiceAccountIssuerDiscoveryPtrOutput `pulumi:"serviceAccountIssuerDiscovery"`
	// - String - ServiceClusterIPRange is the CIDR, from the internal network, where we allocate IPs for services.
	ServiceClusterIpRange pulumi.StringPtrOutput `pulumi:"serviceClusterIpRange"`
	// - snapshotControllerConfig - SnapshotController defines the CSI Snapshot Controller configuration.
	SnapshotController ClusterSnapshotControllerPtrOutput `pulumi:"snapshotController"`
	// - List(String) - SSHAccess is a list of the CIDRs that can access SSH.
	SshAccesses pulumi.StringArrayOutput `pulumi:"sshAccesses"`
	// - String - SSHKeyName specifies a preexisting SSH key to use.
	SshKeyName pulumi.StringPtrOutput `pulumi:"sshKeyName"`
	// - List(cluster_subnet_spec) - Configuration of subnets we are targeting.
	Subnets ClusterSubnetArrayOutput `pulumi:"subnets"`
	// - List(String) - SysctlParameters will configure kernel parameters using sysctl(8). When<br />specified, each parameter must follow the form variable=value, the way<br />it would appear in sysctl.conf.
	SysctlParameters pulumi.StringArrayOutput `pulumi:"sysctlParameters"`
	// - Bool(Nullable) - TagSubnets controls if tags are added to subnets to enable use by load balancers (AWS only). Default: true.
	TagSubnets ClusterTagSubnetsPtrOutput `pulumi:"tagSubnets"`
	// - topologySpec - Topology defines the type of network topology to use on the cluster - default public<br />This is heavily weighted towards AWS for the time being, but should also be agnostic enough<br />to port out to GCE later if needed.
	Topology ClusterTopologyOutput `pulumi:"topology"`
	// - String - UpdatePolicy determines the policy for applying upgrades automatically.<br />Valid values:<br />  'automatic' (default): apply updates automatically (apply OS security upgrades, avoiding rebooting when possible)<br />  'external': do not apply updates automatically; they are applied manually or by an external system.
	UpdatePolicy pulumi.StringPtrOutput `pulumi:"updatePolicy"`
	// - Bool - UseHostCertificates will mount /etc/ssl/certs to inside needed containers.<br />This is needed if some APIs do have self-signed certs.
	UseHostCertificates pulumi.BoolPtrOutput `pulumi:"useHostCertificates"`
	// - warmPoolSpec - WarmPool defines the default warm pool settings for instance groups (AWS only).
	WarmPool ClusterWarmPoolPtrOutput `pulumi:"warmPool"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CloudProvider == nil {
		return nil, errors.New("invalid value for required argument 'CloudProvider'")
	}
	if args.EtcdClusters == nil {
		return nil, errors.New("invalid value for required argument 'EtcdClusters'")
	}
	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	if args.Networking == nil {
		return nil, errors.New("invalid value for required argument 'Networking'")
	}
	if args.Subnets == nil {
		return nil, errors.New("invalid value for required argument 'Subnets'")
	}
	if args.Topology == nil {
		return nil, errors.New("invalid value for required argument 'Topology'")
	}
	var resource Cluster
	err := ctx.RegisterResource("kops:index/cluster:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("kops:index/cluster:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	// - List(String) - AdditionalNetworkCIDRs is a list of additional CIDR used for the AWS VPC<br />or otherwise allocated to k8s. This is a real CIDR, not the internal k8s network<br />On AWS, it maps to any additional CIDRs added to a VPC.
	AdditionalNetworkCidrs []string `pulumi:"additionalNetworkCidrs"`
	// - Map(String) - Additional policies to add for roles.
	AdditionalPolicies map[string]string `pulumi:"additionalPolicies"`
	// - List(String) - AdditionalSANs adds additional Subject Alternate Names to apiserver cert that kops generates.
	AdditionalSans []string `pulumi:"additionalSans"`
	// - List(addon_spec) - Additional addons that should be installed on the cluster.
	Addons []ClusterAddon `pulumi:"addons"`
	// - (Sensitive) - String - AdminSshKey defines the cluster admin ssh key.
	AdminSshKey *string `pulumi:"adminSshKey"`
	// - Map(String) - Annotations is an unstructured key value map stored with a resource that may be<br />set by external tools to store and retrieve arbitrary metadata. They are not<br />queryable and should be preserved when modifying objects.
	Annotations map[string]string `pulumi:"annotations"`
	// - accessSpec - API field controls how the API is exposed outside the cluster.
	Api *ClusterApi `pulumi:"api"`
	// - assets - Assets is alternative locations for files and containers; the API under construction, will remove this comment once this API is fully functional.
	Assets *ClusterAssets `pulumi:"assets"`
	// - authenticationSpec - Authentication field controls how the cluster is configured for authentication.
	Authentication *ClusterAuthentication `pulumi:"authentication"`
	// - authorizationSpec - Authorization field controls how the cluster is configured for authorization.
	Authorization *ClusterAuthorization `pulumi:"authorization"`
	// - awsLoadBalancerControllerConfig - AWSLoadbalancerControllerConfig determines the AWS LB controller configuration.
	AwsLoadBalancerController *ClusterAwsLoadBalancerController `pulumi:"awsLoadBalancerController"`
	// - certManagerConfig - CertManager determines the metrics server configuration.
	CertManager *ClusterCertManager `pulumi:"certManager"`
	// - String - The Channel we are following.
	Channel *string `pulumi:"channel"`
	// - cloud_configuration
	CloudConfig *ClusterCloudConfig `pulumi:"cloudConfig"`
	// - Map(String) - CloudLabels defines additional tags or labels on cloud provider resources.
	CloudLabels map[string]string `pulumi:"cloudLabels"`
	// - cloudProviderSpec - CloudProvider configures the cloud provider to use.
	CloudProvider *ClusterCloudProvider `pulumi:"cloudProvider"`
	// - clusterAutoscalerConfig - ClusterAutoscaler defines the cluster autoscaler configuration.
	ClusterAutoscaler *ClusterClusterAutoscaler `pulumi:"clusterAutoscaler"`
	// - String - ClusterDNSDomain is the suffix we use for internal DNS names (normally cluster.local).
	ClusterDnsDomain *string `pulumi:"clusterDnsDomain"`
	// - (Computed) - String - ConfigBase is the path where we store configuration for the cluster<br />This might be different than the location where the cluster spec itself is stored,<br />both because this must be accessible to the cluster,<br />and because it might be on a different cloud or storage system (etcd vs S3).
	ConfigBase *string `pulumi:"configBase"`
	// - String - ConfigStore is the VFS path to where the configuration (Cluster, InstanceGroups etc) is stored.
	ConfigStore *string `pulumi:"configStore"`
	// - String - Container runtime to use for Kubernetes.
	ContainerRuntime *string `pulumi:"containerRuntime"`
	// - containerdConfig - Component configurations.
	Containerd *ClusterContainerd `pulumi:"containerd"`
	// - String - DNSZone is the DNS zone we should use when configuring DNS<br />This is because some clouds let us define a managed zone foo.bar, and then have<br />kubernetes.dev.foo.bar, without needing to define dev.foo.bar as a hosted zone.<br />DNSZone will probably be a suffix of the MasterPublicName and MasterInternalName<br />Note that DNSZone can either by the host name of the zone (containing dots),<br />or can be an identifier for the zone.
	DnsZone *string `pulumi:"dnsZone"`
	// - docker_config
	Docker *ClusterDocker `pulumi:"docker"`
	// - egressProxySpec - HTTPProxy defines connection information to support use of a private cluster behind an forward HTTP Proxy.
	EgressProxy *ClusterEgressProxy `pulumi:"egressProxy"`
	// - Bool - EncryptionConfig controls if encryption is enabled.
	EncryptionConfig *bool `pulumi:"encryptionConfig"`
	// - List(etcd_cluster_spec) - EtcdClusters stores the configuration for each cluster.
	EtcdClusters []ClusterEtcdCluster `pulumi:"etcdClusters"`
	// - cloud_controller_manager_config
	ExternalCloudControllerManager *ClusterExternalCloudControllerManager `pulumi:"externalCloudControllerManager"`
	// - external_dns_config
	ExternalDns *ClusterExternalDns `pulumi:"externalDns"`
	// - Map(List(String)) - ExternalPolicies allows the insertion of pre-existing managed policies on IG Roles.
	ExternalPolicies []ClusterExternalPolicy `pulumi:"externalPolicies"`
	// - List(file_asset_spec) - A collection of files assets for deployed cluster wide.
	FileAssets []ClusterFileAsset `pulumi:"fileAssets"`
	// - List(hook_spec) - Hooks for custom actions e.g. on first installation.
	Hooks []ClusterHook `pulumi:"hooks"`
	// - (Computed) - iamSpec - IAM field adds control over the IAM security policies applied to resources.
	Iam *ClusterIam `pulumi:"iam"`
	// - Bool - IsolateMasters determines whether we should lock down masters so that they are not on the pod network.<br />true is the kube-up behaviour, but it is very surprising: it means that daemonsets only work on the master<br />if they have hostNetwork=true.<br />false is now the default, and it will:<br /> * give the master a normal PodCIDR<br /> * run kube-proxy on the master<br /> * enable debugging handlers on the master, so kubectl logs works.
	IsolateMasters *bool `pulumi:"isolateMasters"`
	// - karpenterConfig - Karpenter defines the Karpenter configuration.
	Karpenter *ClusterKarpenter `pulumi:"karpenter"`
	// - String - KeyStore is the VFS path to where SSL keys and certificates are stored.
	KeyStore *string `pulumi:"keyStore"`
	// - kube_api_server_config
	KubeApiServer *ClusterKubeApiServer `pulumi:"kubeApiServer"`
	// - kube_controller_manager_config
	KubeControllerManager *ClusterKubeControllerManager `pulumi:"kubeControllerManager"`
	// - kube_dns_config
	KubeDns *ClusterKubeDns `pulumi:"kubeDns"`
	// - kube_proxy_config
	KubeProxy *ClusterKubeProxy `pulumi:"kubeProxy"`
	// - kube_scheduler_config
	KubeScheduler *ClusterKubeScheduler `pulumi:"kubeScheduler"`
	// - kubeletConfigSpec - Kubelet is the kubelet configuration for nodes not belonging to the control plane.<br />It can be overridden by the kubelet configuration specified in the instance group.
	Kubelet *ClusterKubelet `pulumi:"kubelet"`
	// - List(String) - KubernetesAPIAccess is a list of the CIDRs that can access the Kubernetes API endpoint (master HTTPS).
	KubernetesApiAccesses []string `pulumi:"kubernetesApiAccesses"`
	// - String - The version of kubernetes to install (optional, and can be a "spec" like stable).
	KubernetesVersion *string `pulumi:"kubernetesVersion"`
	// - Map(String) - Map of string keys and values that can be used to organize and categorize<br />(scope and select) objects. May match selectors of replication controllers<br />and services.
	Labels map[string]string `pulumi:"labels"`
	// - (Computed) - String - MasterInternalName is the internal DNS name for the master nodes.
	MasterInternalName *string `pulumi:"masterInternalName"`
	// - kubeletConfigSpec - MasterKubelet is the kubelet configuration for nodes belonging to the control plane<br />It can be overridden by the kubelet configuration specified in the instance group.
	MasterKubelet *ClusterMasterKubelet `pulumi:"masterKubelet"`
	// - (Computed) - String - MasterPublicName is the external DNS name for the master nodes.
	MasterPublicName *string `pulumi:"masterPublicName"`
	// - metricsServerConfig - MetricsServer determines the metrics server configuration.
	MetricsServer *ClusterMetricsServer `pulumi:"metricsServer"`
	// - (Force new) - String - Name defines the cluster name.
	Name *string `pulumi:"name"`
	// - (Computed) - String - NetworkCIDR is the CIDR used for the AWS VPC / DO/ GCE Network, or otherwise allocated to k8s<br />This is a real CIDR, not the internal k8s network<br />On AWS, it maps to the VPC CIDR.  It is not required on GCE.<br />On DO, it maps to the VPC CIDR.
	NetworkCidr *string `pulumi:"networkCidr"`
	// - String - NetworkID is an identifier of a network, if we want to reuse/share an existing network (e.g. an AWS VPC).
	NetworkId *string `pulumi:"networkId"`
	// - networkingSpec - Networking configuration.
	Networking *ClusterNetworking `pulumi:"networking"`
	// - nodeAuthorizationSpec - NodeAuthorization defined the custom node authorization configuration.
	NodeAuthorization *ClusterNodeAuthorization `pulumi:"nodeAuthorization"`
	// - List(String) - NodePortAccess is a list of the CIDRs that can access the node ports range (30000-32767).
	NodePortAccesses []string `pulumi:"nodePortAccesses"`
	// - nodeProblemDetectorConfig - NodeProblemDetector determines the node problem detector configuration.
	NodeProblemDetector *ClusterNodeProblemDetector `pulumi:"nodeProblemDetector"`
	// - nodeTerminationHandlerConfig - NodeTerminationHandler determines the node termination handler configuration.
	NodeTerminationHandler *ClusterNodeTerminationHandler `pulumi:"nodeTerminationHandler"`
	// - (Computed) - String - NonMasqueradeCIDR is the CIDR for the internal k8s network (on which pods & services live)<br />It cannot overlap ServiceClusterIPRange.
	NonMasqueradeCidr *string `pulumi:"nonMasqueradeCidr"`
	// - ntp_config
	Ntp *ClusterNtp `pulumi:"ntp"`
	// - String - PodCIDR is the CIDR from which we allocate IPs for pods.
	PodCidr *string `pulumi:"podCidr"`
	// - podIdentityWebhookConfig - PodIdentityWebhook determines the EKS Pod Identity Webhook configuration.
	PodIdentityWebhook *ClusterPodIdentityWebhook `pulumi:"podIdentityWebhook"`
	// - String - Project is the cloud project we should use, required on GCE.
	Project *string `pulumi:"project"`
	// - Int - Revision is incremented every time the resource changes, this is useful for triggering cluster updater.
	Revision *int `pulumi:"revision"`
	// - rollingUpdate - RollingUpdate defines the default rolling-update settings for instance groups.
	RollingUpdate *ClusterRollingUpdate `pulumi:"rollingUpdate"`
	// - String - SecretStore is the VFS path to where secrets are stored.
	SecretStore *string `pulumi:"secretStore"`
	// - clusterSecrets - Secrets defines the cluster secret.
	Secrets *ClusterSecrets `pulumi:"secrets"`
	// - serviceAccountIssuerDiscoveryConfig - ServiceAccountIssuerDiscovery configures the OIDC Issuer for ServiceAccounts.
	ServiceAccountIssuerDiscovery *ClusterServiceAccountIssuerDiscovery `pulumi:"serviceAccountIssuerDiscovery"`
	// - String - ServiceClusterIPRange is the CIDR, from the internal network, where we allocate IPs for services.
	ServiceClusterIpRange *string `pulumi:"serviceClusterIpRange"`
	// - snapshotControllerConfig - SnapshotController defines the CSI Snapshot Controller configuration.
	SnapshotController *ClusterSnapshotController `pulumi:"snapshotController"`
	// - List(String) - SSHAccess is a list of the CIDRs that can access SSH.
	SshAccesses []string `pulumi:"sshAccesses"`
	// - String - SSHKeyName specifies a preexisting SSH key to use.
	SshKeyName *string `pulumi:"sshKeyName"`
	// - List(cluster_subnet_spec) - Configuration of subnets we are targeting.
	Subnets []ClusterSubnet `pulumi:"subnets"`
	// - List(String) - SysctlParameters will configure kernel parameters using sysctl(8). When<br />specified, each parameter must follow the form variable=value, the way<br />it would appear in sysctl.conf.
	SysctlParameters []string `pulumi:"sysctlParameters"`
	// - Bool(Nullable) - TagSubnets controls if tags are added to subnets to enable use by load balancers (AWS only). Default: true.
	TagSubnets *ClusterTagSubnets `pulumi:"tagSubnets"`
	// - topologySpec - Topology defines the type of network topology to use on the cluster - default public<br />This is heavily weighted towards AWS for the time being, but should also be agnostic enough<br />to port out to GCE later if needed.
	Topology *ClusterTopology `pulumi:"topology"`
	// - String - UpdatePolicy determines the policy for applying upgrades automatically.<br />Valid values:<br />  'automatic' (default): apply updates automatically (apply OS security upgrades, avoiding rebooting when possible)<br />  'external': do not apply updates automatically; they are applied manually or by an external system.
	UpdatePolicy *string `pulumi:"updatePolicy"`
	// - Bool - UseHostCertificates will mount /etc/ssl/certs to inside needed containers.<br />This is needed if some APIs do have self-signed certs.
	UseHostCertificates *bool `pulumi:"useHostCertificates"`
	// - warmPoolSpec - WarmPool defines the default warm pool settings for instance groups (AWS only).
	WarmPool *ClusterWarmPool `pulumi:"warmPool"`
}

type ClusterState struct {
	// - List(String) - AdditionalNetworkCIDRs is a list of additional CIDR used for the AWS VPC<br />or otherwise allocated to k8s. This is a real CIDR, not the internal k8s network<br />On AWS, it maps to any additional CIDRs added to a VPC.
	AdditionalNetworkCidrs pulumi.StringArrayInput
	// - Map(String) - Additional policies to add for roles.
	AdditionalPolicies pulumi.StringMapInput
	// - List(String) - AdditionalSANs adds additional Subject Alternate Names to apiserver cert that kops generates.
	AdditionalSans pulumi.StringArrayInput
	// - List(addon_spec) - Additional addons that should be installed on the cluster.
	Addons ClusterAddonArrayInput
	// - (Sensitive) - String - AdminSshKey defines the cluster admin ssh key.
	AdminSshKey pulumi.StringPtrInput
	// - Map(String) - Annotations is an unstructured key value map stored with a resource that may be<br />set by external tools to store and retrieve arbitrary metadata. They are not<br />queryable and should be preserved when modifying objects.
	Annotations pulumi.StringMapInput
	// - accessSpec - API field controls how the API is exposed outside the cluster.
	Api ClusterApiPtrInput
	// - assets - Assets is alternative locations for files and containers; the API under construction, will remove this comment once this API is fully functional.
	Assets ClusterAssetsPtrInput
	// - authenticationSpec - Authentication field controls how the cluster is configured for authentication.
	Authentication ClusterAuthenticationPtrInput
	// - authorizationSpec - Authorization field controls how the cluster is configured for authorization.
	Authorization ClusterAuthorizationPtrInput
	// - awsLoadBalancerControllerConfig - AWSLoadbalancerControllerConfig determines the AWS LB controller configuration.
	AwsLoadBalancerController ClusterAwsLoadBalancerControllerPtrInput
	// - certManagerConfig - CertManager determines the metrics server configuration.
	CertManager ClusterCertManagerPtrInput
	// - String - The Channel we are following.
	Channel pulumi.StringPtrInput
	// - cloud_configuration
	CloudConfig ClusterCloudConfigPtrInput
	// - Map(String) - CloudLabels defines additional tags or labels on cloud provider resources.
	CloudLabels pulumi.StringMapInput
	// - cloudProviderSpec - CloudProvider configures the cloud provider to use.
	CloudProvider ClusterCloudProviderPtrInput
	// - clusterAutoscalerConfig - ClusterAutoscaler defines the cluster autoscaler configuration.
	ClusterAutoscaler ClusterClusterAutoscalerPtrInput
	// - String - ClusterDNSDomain is the suffix we use for internal DNS names (normally cluster.local).
	ClusterDnsDomain pulumi.StringPtrInput
	// - (Computed) - String - ConfigBase is the path where we store configuration for the cluster<br />This might be different than the location where the cluster spec itself is stored,<br />both because this must be accessible to the cluster,<br />and because it might be on a different cloud or storage system (etcd vs S3).
	ConfigBase pulumi.StringPtrInput
	// - String - ConfigStore is the VFS path to where the configuration (Cluster, InstanceGroups etc) is stored.
	ConfigStore pulumi.StringPtrInput
	// - String - Container runtime to use for Kubernetes.
	ContainerRuntime pulumi.StringPtrInput
	// - containerdConfig - Component configurations.
	Containerd ClusterContainerdPtrInput
	// - String - DNSZone is the DNS zone we should use when configuring DNS<br />This is because some clouds let us define a managed zone foo.bar, and then have<br />kubernetes.dev.foo.bar, without needing to define dev.foo.bar as a hosted zone.<br />DNSZone will probably be a suffix of the MasterPublicName and MasterInternalName<br />Note that DNSZone can either by the host name of the zone (containing dots),<br />or can be an identifier for the zone.
	DnsZone pulumi.StringPtrInput
	// - docker_config
	Docker ClusterDockerPtrInput
	// - egressProxySpec - HTTPProxy defines connection information to support use of a private cluster behind an forward HTTP Proxy.
	EgressProxy ClusterEgressProxyPtrInput
	// - Bool - EncryptionConfig controls if encryption is enabled.
	EncryptionConfig pulumi.BoolPtrInput
	// - List(etcd_cluster_spec) - EtcdClusters stores the configuration for each cluster.
	EtcdClusters ClusterEtcdClusterArrayInput
	// - cloud_controller_manager_config
	ExternalCloudControllerManager ClusterExternalCloudControllerManagerPtrInput
	// - external_dns_config
	ExternalDns ClusterExternalDnsPtrInput
	// - Map(List(String)) - ExternalPolicies allows the insertion of pre-existing managed policies on IG Roles.
	ExternalPolicies ClusterExternalPolicyArrayInput
	// - List(file_asset_spec) - A collection of files assets for deployed cluster wide.
	FileAssets ClusterFileAssetArrayInput
	// - List(hook_spec) - Hooks for custom actions e.g. on first installation.
	Hooks ClusterHookArrayInput
	// - (Computed) - iamSpec - IAM field adds control over the IAM security policies applied to resources.
	Iam ClusterIamPtrInput
	// - Bool - IsolateMasters determines whether we should lock down masters so that they are not on the pod network.<br />true is the kube-up behaviour, but it is very surprising: it means that daemonsets only work on the master<br />if they have hostNetwork=true.<br />false is now the default, and it will:<br /> * give the master a normal PodCIDR<br /> * run kube-proxy on the master<br /> * enable debugging handlers on the master, so kubectl logs works.
	IsolateMasters pulumi.BoolPtrInput
	// - karpenterConfig - Karpenter defines the Karpenter configuration.
	Karpenter ClusterKarpenterPtrInput
	// - String - KeyStore is the VFS path to where SSL keys and certificates are stored.
	KeyStore pulumi.StringPtrInput
	// - kube_api_server_config
	KubeApiServer ClusterKubeApiServerPtrInput
	// - kube_controller_manager_config
	KubeControllerManager ClusterKubeControllerManagerPtrInput
	// - kube_dns_config
	KubeDns ClusterKubeDnsPtrInput
	// - kube_proxy_config
	KubeProxy ClusterKubeProxyPtrInput
	// - kube_scheduler_config
	KubeScheduler ClusterKubeSchedulerPtrInput
	// - kubeletConfigSpec - Kubelet is the kubelet configuration for nodes not belonging to the control plane.<br />It can be overridden by the kubelet configuration specified in the instance group.
	Kubelet ClusterKubeletPtrInput
	// - List(String) - KubernetesAPIAccess is a list of the CIDRs that can access the Kubernetes API endpoint (master HTTPS).
	KubernetesApiAccesses pulumi.StringArrayInput
	// - String - The version of kubernetes to install (optional, and can be a "spec" like stable).
	KubernetesVersion pulumi.StringPtrInput
	// - Map(String) - Map of string keys and values that can be used to organize and categorize<br />(scope and select) objects. May match selectors of replication controllers<br />and services.
	Labels pulumi.StringMapInput
	// - (Computed) - String - MasterInternalName is the internal DNS name for the master nodes.
	MasterInternalName pulumi.StringPtrInput
	// - kubeletConfigSpec - MasterKubelet is the kubelet configuration for nodes belonging to the control plane<br />It can be overridden by the kubelet configuration specified in the instance group.
	MasterKubelet ClusterMasterKubeletPtrInput
	// - (Computed) - String - MasterPublicName is the external DNS name for the master nodes.
	MasterPublicName pulumi.StringPtrInput
	// - metricsServerConfig - MetricsServer determines the metrics server configuration.
	MetricsServer ClusterMetricsServerPtrInput
	// - (Force new) - String - Name defines the cluster name.
	Name pulumi.StringPtrInput
	// - (Computed) - String - NetworkCIDR is the CIDR used for the AWS VPC / DO/ GCE Network, or otherwise allocated to k8s<br />This is a real CIDR, not the internal k8s network<br />On AWS, it maps to the VPC CIDR.  It is not required on GCE.<br />On DO, it maps to the VPC CIDR.
	NetworkCidr pulumi.StringPtrInput
	// - String - NetworkID is an identifier of a network, if we want to reuse/share an existing network (e.g. an AWS VPC).
	NetworkId pulumi.StringPtrInput
	// - networkingSpec - Networking configuration.
	Networking ClusterNetworkingPtrInput
	// - nodeAuthorizationSpec - NodeAuthorization defined the custom node authorization configuration.
	NodeAuthorization ClusterNodeAuthorizationPtrInput
	// - List(String) - NodePortAccess is a list of the CIDRs that can access the node ports range (30000-32767).
	NodePortAccesses pulumi.StringArrayInput
	// - nodeProblemDetectorConfig - NodeProblemDetector determines the node problem detector configuration.
	NodeProblemDetector ClusterNodeProblemDetectorPtrInput
	// - nodeTerminationHandlerConfig - NodeTerminationHandler determines the node termination handler configuration.
	NodeTerminationHandler ClusterNodeTerminationHandlerPtrInput
	// - (Computed) - String - NonMasqueradeCIDR is the CIDR for the internal k8s network (on which pods & services live)<br />It cannot overlap ServiceClusterIPRange.
	NonMasqueradeCidr pulumi.StringPtrInput
	// - ntp_config
	Ntp ClusterNtpPtrInput
	// - String - PodCIDR is the CIDR from which we allocate IPs for pods.
	PodCidr pulumi.StringPtrInput
	// - podIdentityWebhookConfig - PodIdentityWebhook determines the EKS Pod Identity Webhook configuration.
	PodIdentityWebhook ClusterPodIdentityWebhookPtrInput
	// - String - Project is the cloud project we should use, required on GCE.
	Project pulumi.StringPtrInput
	// - Int - Revision is incremented every time the resource changes, this is useful for triggering cluster updater.
	Revision pulumi.IntPtrInput
	// - rollingUpdate - RollingUpdate defines the default rolling-update settings for instance groups.
	RollingUpdate ClusterRollingUpdatePtrInput
	// - String - SecretStore is the VFS path to where secrets are stored.
	SecretStore pulumi.StringPtrInput
	// - clusterSecrets - Secrets defines the cluster secret.
	Secrets ClusterSecretsPtrInput
	// - serviceAccountIssuerDiscoveryConfig - ServiceAccountIssuerDiscovery configures the OIDC Issuer for ServiceAccounts.
	ServiceAccountIssuerDiscovery ClusterServiceAccountIssuerDiscoveryPtrInput
	// - String - ServiceClusterIPRange is the CIDR, from the internal network, where we allocate IPs for services.
	ServiceClusterIpRange pulumi.StringPtrInput
	// - snapshotControllerConfig - SnapshotController defines the CSI Snapshot Controller configuration.
	SnapshotController ClusterSnapshotControllerPtrInput
	// - List(String) - SSHAccess is a list of the CIDRs that can access SSH.
	SshAccesses pulumi.StringArrayInput
	// - String - SSHKeyName specifies a preexisting SSH key to use.
	SshKeyName pulumi.StringPtrInput
	// - List(cluster_subnet_spec) - Configuration of subnets we are targeting.
	Subnets ClusterSubnetArrayInput
	// - List(String) - SysctlParameters will configure kernel parameters using sysctl(8). When<br />specified, each parameter must follow the form variable=value, the way<br />it would appear in sysctl.conf.
	SysctlParameters pulumi.StringArrayInput
	// - Bool(Nullable) - TagSubnets controls if tags are added to subnets to enable use by load balancers (AWS only). Default: true.
	TagSubnets ClusterTagSubnetsPtrInput
	// - topologySpec - Topology defines the type of network topology to use on the cluster - default public<br />This is heavily weighted towards AWS for the time being, but should also be agnostic enough<br />to port out to GCE later if needed.
	Topology ClusterTopologyPtrInput
	// - String - UpdatePolicy determines the policy for applying upgrades automatically.<br />Valid values:<br />  'automatic' (default): apply updates automatically (apply OS security upgrades, avoiding rebooting when possible)<br />  'external': do not apply updates automatically; they are applied manually or by an external system.
	UpdatePolicy pulumi.StringPtrInput
	// - Bool - UseHostCertificates will mount /etc/ssl/certs to inside needed containers.<br />This is needed if some APIs do have self-signed certs.
	UseHostCertificates pulumi.BoolPtrInput
	// - warmPoolSpec - WarmPool defines the default warm pool settings for instance groups (AWS only).
	WarmPool ClusterWarmPoolPtrInput
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	// - List(String) - AdditionalNetworkCIDRs is a list of additional CIDR used for the AWS VPC<br />or otherwise allocated to k8s. This is a real CIDR, not the internal k8s network<br />On AWS, it maps to any additional CIDRs added to a VPC.
	AdditionalNetworkCidrs []string `pulumi:"additionalNetworkCidrs"`
	// - Map(String) - Additional policies to add for roles.
	AdditionalPolicies map[string]string `pulumi:"additionalPolicies"`
	// - List(String) - AdditionalSANs adds additional Subject Alternate Names to apiserver cert that kops generates.
	AdditionalSans []string `pulumi:"additionalSans"`
	// - List(addon_spec) - Additional addons that should be installed on the cluster.
	Addons []ClusterAddon `pulumi:"addons"`
	// - (Sensitive) - String - AdminSshKey defines the cluster admin ssh key.
	AdminSshKey *string `pulumi:"adminSshKey"`
	// - Map(String) - Annotations is an unstructured key value map stored with a resource that may be<br />set by external tools to store and retrieve arbitrary metadata. They are not<br />queryable and should be preserved when modifying objects.
	Annotations map[string]string `pulumi:"annotations"`
	// - accessSpec - API field controls how the API is exposed outside the cluster.
	Api *ClusterApi `pulumi:"api"`
	// - assets - Assets is alternative locations for files and containers; the API under construction, will remove this comment once this API is fully functional.
	Assets *ClusterAssets `pulumi:"assets"`
	// - authenticationSpec - Authentication field controls how the cluster is configured for authentication.
	Authentication *ClusterAuthentication `pulumi:"authentication"`
	// - authorizationSpec - Authorization field controls how the cluster is configured for authorization.
	Authorization *ClusterAuthorization `pulumi:"authorization"`
	// - awsLoadBalancerControllerConfig - AWSLoadbalancerControllerConfig determines the AWS LB controller configuration.
	AwsLoadBalancerController *ClusterAwsLoadBalancerController `pulumi:"awsLoadBalancerController"`
	// - certManagerConfig - CertManager determines the metrics server configuration.
	CertManager *ClusterCertManager `pulumi:"certManager"`
	// - String - The Channel we are following.
	Channel *string `pulumi:"channel"`
	// - cloud_configuration
	CloudConfig *ClusterCloudConfig `pulumi:"cloudConfig"`
	// - Map(String) - CloudLabels defines additional tags or labels on cloud provider resources.
	CloudLabels map[string]string `pulumi:"cloudLabels"`
	// - cloudProviderSpec - CloudProvider configures the cloud provider to use.
	CloudProvider ClusterCloudProvider `pulumi:"cloudProvider"`
	// - clusterAutoscalerConfig - ClusterAutoscaler defines the cluster autoscaler configuration.
	ClusterAutoscaler *ClusterClusterAutoscaler `pulumi:"clusterAutoscaler"`
	// - String - ClusterDNSDomain is the suffix we use for internal DNS names (normally cluster.local).
	ClusterDnsDomain *string `pulumi:"clusterDnsDomain"`
	// - (Computed) - String - ConfigBase is the path where we store configuration for the cluster<br />This might be different than the location where the cluster spec itself is stored,<br />both because this must be accessible to the cluster,<br />and because it might be on a different cloud or storage system (etcd vs S3).
	ConfigBase *string `pulumi:"configBase"`
	// - String - ConfigStore is the VFS path to where the configuration (Cluster, InstanceGroups etc) is stored.
	ConfigStore *string `pulumi:"configStore"`
	// - String - Container runtime to use for Kubernetes.
	ContainerRuntime *string `pulumi:"containerRuntime"`
	// - containerdConfig - Component configurations.
	Containerd *ClusterContainerd `pulumi:"containerd"`
	// - String - DNSZone is the DNS zone we should use when configuring DNS<br />This is because some clouds let us define a managed zone foo.bar, and then have<br />kubernetes.dev.foo.bar, without needing to define dev.foo.bar as a hosted zone.<br />DNSZone will probably be a suffix of the MasterPublicName and MasterInternalName<br />Note that DNSZone can either by the host name of the zone (containing dots),<br />or can be an identifier for the zone.
	DnsZone *string `pulumi:"dnsZone"`
	// - docker_config
	Docker *ClusterDocker `pulumi:"docker"`
	// - egressProxySpec - HTTPProxy defines connection information to support use of a private cluster behind an forward HTTP Proxy.
	EgressProxy *ClusterEgressProxy `pulumi:"egressProxy"`
	// - Bool - EncryptionConfig controls if encryption is enabled.
	EncryptionConfig *bool `pulumi:"encryptionConfig"`
	// - List(etcd_cluster_spec) - EtcdClusters stores the configuration for each cluster.
	EtcdClusters []ClusterEtcdCluster `pulumi:"etcdClusters"`
	// - cloud_controller_manager_config
	ExternalCloudControllerManager *ClusterExternalCloudControllerManager `pulumi:"externalCloudControllerManager"`
	// - external_dns_config
	ExternalDns *ClusterExternalDns `pulumi:"externalDns"`
	// - Map(List(String)) - ExternalPolicies allows the insertion of pre-existing managed policies on IG Roles.
	ExternalPolicies []ClusterExternalPolicy `pulumi:"externalPolicies"`
	// - List(file_asset_spec) - A collection of files assets for deployed cluster wide.
	FileAssets []ClusterFileAsset `pulumi:"fileAssets"`
	// - List(hook_spec) - Hooks for custom actions e.g. on first installation.
	Hooks []ClusterHook `pulumi:"hooks"`
	// - (Computed) - iamSpec - IAM field adds control over the IAM security policies applied to resources.
	Iam *ClusterIam `pulumi:"iam"`
	// - Bool - IsolateMasters determines whether we should lock down masters so that they are not on the pod network.<br />true is the kube-up behaviour, but it is very surprising: it means that daemonsets only work on the master<br />if they have hostNetwork=true.<br />false is now the default, and it will:<br /> * give the master a normal PodCIDR<br /> * run kube-proxy on the master<br /> * enable debugging handlers on the master, so kubectl logs works.
	IsolateMasters *bool `pulumi:"isolateMasters"`
	// - karpenterConfig - Karpenter defines the Karpenter configuration.
	Karpenter *ClusterKarpenter `pulumi:"karpenter"`
	// - String - KeyStore is the VFS path to where SSL keys and certificates are stored.
	KeyStore *string `pulumi:"keyStore"`
	// - kube_api_server_config
	KubeApiServer *ClusterKubeApiServer `pulumi:"kubeApiServer"`
	// - kube_controller_manager_config
	KubeControllerManager *ClusterKubeControllerManager `pulumi:"kubeControllerManager"`
	// - kube_dns_config
	KubeDns *ClusterKubeDns `pulumi:"kubeDns"`
	// - kube_proxy_config
	KubeProxy *ClusterKubeProxy `pulumi:"kubeProxy"`
	// - kube_scheduler_config
	KubeScheduler *ClusterKubeScheduler `pulumi:"kubeScheduler"`
	// - kubeletConfigSpec - Kubelet is the kubelet configuration for nodes not belonging to the control plane.<br />It can be overridden by the kubelet configuration specified in the instance group.
	Kubelet *ClusterKubelet `pulumi:"kubelet"`
	// - List(String) - KubernetesAPIAccess is a list of the CIDRs that can access the Kubernetes API endpoint (master HTTPS).
	KubernetesApiAccesses []string `pulumi:"kubernetesApiAccesses"`
	// - String - The version of kubernetes to install (optional, and can be a "spec" like stable).
	KubernetesVersion *string `pulumi:"kubernetesVersion"`
	// - Map(String) - Map of string keys and values that can be used to organize and categorize<br />(scope and select) objects. May match selectors of replication controllers<br />and services.
	Labels map[string]string `pulumi:"labels"`
	// - (Computed) - String - MasterInternalName is the internal DNS name for the master nodes.
	MasterInternalName *string `pulumi:"masterInternalName"`
	// - kubeletConfigSpec - MasterKubelet is the kubelet configuration for nodes belonging to the control plane<br />It can be overridden by the kubelet configuration specified in the instance group.
	MasterKubelet *ClusterMasterKubelet `pulumi:"masterKubelet"`
	// - (Computed) - String - MasterPublicName is the external DNS name for the master nodes.
	MasterPublicName *string `pulumi:"masterPublicName"`
	// - metricsServerConfig - MetricsServer determines the metrics server configuration.
	MetricsServer *ClusterMetricsServer `pulumi:"metricsServer"`
	// - (Force new) - String - Name defines the cluster name.
	Name *string `pulumi:"name"`
	// - (Computed) - String - NetworkCIDR is the CIDR used for the AWS VPC / DO/ GCE Network, or otherwise allocated to k8s<br />This is a real CIDR, not the internal k8s network<br />On AWS, it maps to the VPC CIDR.  It is not required on GCE.<br />On DO, it maps to the VPC CIDR.
	NetworkCidr *string `pulumi:"networkCidr"`
	// - String - NetworkID is an identifier of a network, if we want to reuse/share an existing network (e.g. an AWS VPC).
	NetworkId string `pulumi:"networkId"`
	// - networkingSpec - Networking configuration.
	Networking ClusterNetworking `pulumi:"networking"`
	// - nodeAuthorizationSpec - NodeAuthorization defined the custom node authorization configuration.
	NodeAuthorization *ClusterNodeAuthorization `pulumi:"nodeAuthorization"`
	// - List(String) - NodePortAccess is a list of the CIDRs that can access the node ports range (30000-32767).
	NodePortAccesses []string `pulumi:"nodePortAccesses"`
	// - nodeProblemDetectorConfig - NodeProblemDetector determines the node problem detector configuration.
	NodeProblemDetector *ClusterNodeProblemDetector `pulumi:"nodeProblemDetector"`
	// - nodeTerminationHandlerConfig - NodeTerminationHandler determines the node termination handler configuration.
	NodeTerminationHandler *ClusterNodeTerminationHandler `pulumi:"nodeTerminationHandler"`
	// - (Computed) - String - NonMasqueradeCIDR is the CIDR for the internal k8s network (on which pods & services live)<br />It cannot overlap ServiceClusterIPRange.
	NonMasqueradeCidr *string `pulumi:"nonMasqueradeCidr"`
	// - ntp_config
	Ntp *ClusterNtp `pulumi:"ntp"`
	// - String - PodCIDR is the CIDR from which we allocate IPs for pods.
	PodCidr *string `pulumi:"podCidr"`
	// - podIdentityWebhookConfig - PodIdentityWebhook determines the EKS Pod Identity Webhook configuration.
	PodIdentityWebhook *ClusterPodIdentityWebhook `pulumi:"podIdentityWebhook"`
	// - String - Project is the cloud project we should use, required on GCE.
	Project *string `pulumi:"project"`
	// - rollingUpdate - RollingUpdate defines the default rolling-update settings for instance groups.
	RollingUpdate *ClusterRollingUpdate `pulumi:"rollingUpdate"`
	// - String - SecretStore is the VFS path to where secrets are stored.
	SecretStore *string `pulumi:"secretStore"`
	// - clusterSecrets - Secrets defines the cluster secret.
	Secrets *ClusterSecrets `pulumi:"secrets"`
	// - serviceAccountIssuerDiscoveryConfig - ServiceAccountIssuerDiscovery configures the OIDC Issuer for ServiceAccounts.
	ServiceAccountIssuerDiscovery *ClusterServiceAccountIssuerDiscovery `pulumi:"serviceAccountIssuerDiscovery"`
	// - String - ServiceClusterIPRange is the CIDR, from the internal network, where we allocate IPs for services.
	ServiceClusterIpRange *string `pulumi:"serviceClusterIpRange"`
	// - snapshotControllerConfig - SnapshotController defines the CSI Snapshot Controller configuration.
	SnapshotController *ClusterSnapshotController `pulumi:"snapshotController"`
	// - List(String) - SSHAccess is a list of the CIDRs that can access SSH.
	SshAccesses []string `pulumi:"sshAccesses"`
	// - String - SSHKeyName specifies a preexisting SSH key to use.
	SshKeyName *string `pulumi:"sshKeyName"`
	// - List(cluster_subnet_spec) - Configuration of subnets we are targeting.
	Subnets []ClusterSubnet `pulumi:"subnets"`
	// - List(String) - SysctlParameters will configure kernel parameters using sysctl(8). When<br />specified, each parameter must follow the form variable=value, the way<br />it would appear in sysctl.conf.
	SysctlParameters []string `pulumi:"sysctlParameters"`
	// - Bool(Nullable) - TagSubnets controls if tags are added to subnets to enable use by load balancers (AWS only). Default: true.
	TagSubnets *ClusterTagSubnets `pulumi:"tagSubnets"`
	// - topologySpec - Topology defines the type of network topology to use on the cluster - default public<br />This is heavily weighted towards AWS for the time being, but should also be agnostic enough<br />to port out to GCE later if needed.
	Topology ClusterTopology `pulumi:"topology"`
	// - String - UpdatePolicy determines the policy for applying upgrades automatically.<br />Valid values:<br />  'automatic' (default): apply updates automatically (apply OS security upgrades, avoiding rebooting when possible)<br />  'external': do not apply updates automatically; they are applied manually or by an external system.
	UpdatePolicy *string `pulumi:"updatePolicy"`
	// - Bool - UseHostCertificates will mount /etc/ssl/certs to inside needed containers.<br />This is needed if some APIs do have self-signed certs.
	UseHostCertificates *bool `pulumi:"useHostCertificates"`
	// - warmPoolSpec - WarmPool defines the default warm pool settings for instance groups (AWS only).
	WarmPool *ClusterWarmPool `pulumi:"warmPool"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// - List(String) - AdditionalNetworkCIDRs is a list of additional CIDR used for the AWS VPC<br />or otherwise allocated to k8s. This is a real CIDR, not the internal k8s network<br />On AWS, it maps to any additional CIDRs added to a VPC.
	AdditionalNetworkCidrs pulumi.StringArrayInput
	// - Map(String) - Additional policies to add for roles.
	AdditionalPolicies pulumi.StringMapInput
	// - List(String) - AdditionalSANs adds additional Subject Alternate Names to apiserver cert that kops generates.
	AdditionalSans pulumi.StringArrayInput
	// - List(addon_spec) - Additional addons that should be installed on the cluster.
	Addons ClusterAddonArrayInput
	// - (Sensitive) - String - AdminSshKey defines the cluster admin ssh key.
	AdminSshKey pulumi.StringPtrInput
	// - Map(String) - Annotations is an unstructured key value map stored with a resource that may be<br />set by external tools to store and retrieve arbitrary metadata. They are not<br />queryable and should be preserved when modifying objects.
	Annotations pulumi.StringMapInput
	// - accessSpec - API field controls how the API is exposed outside the cluster.
	Api ClusterApiPtrInput
	// - assets - Assets is alternative locations for files and containers; the API under construction, will remove this comment once this API is fully functional.
	Assets ClusterAssetsPtrInput
	// - authenticationSpec - Authentication field controls how the cluster is configured for authentication.
	Authentication ClusterAuthenticationPtrInput
	// - authorizationSpec - Authorization field controls how the cluster is configured for authorization.
	Authorization ClusterAuthorizationPtrInput
	// - awsLoadBalancerControllerConfig - AWSLoadbalancerControllerConfig determines the AWS LB controller configuration.
	AwsLoadBalancerController ClusterAwsLoadBalancerControllerPtrInput
	// - certManagerConfig - CertManager determines the metrics server configuration.
	CertManager ClusterCertManagerPtrInput
	// - String - The Channel we are following.
	Channel pulumi.StringPtrInput
	// - cloud_configuration
	CloudConfig ClusterCloudConfigPtrInput
	// - Map(String) - CloudLabels defines additional tags or labels on cloud provider resources.
	CloudLabels pulumi.StringMapInput
	// - cloudProviderSpec - CloudProvider configures the cloud provider to use.
	CloudProvider ClusterCloudProviderInput
	// - clusterAutoscalerConfig - ClusterAutoscaler defines the cluster autoscaler configuration.
	ClusterAutoscaler ClusterClusterAutoscalerPtrInput
	// - String - ClusterDNSDomain is the suffix we use for internal DNS names (normally cluster.local).
	ClusterDnsDomain pulumi.StringPtrInput
	// - (Computed) - String - ConfigBase is the path where we store configuration for the cluster<br />This might be different than the location where the cluster spec itself is stored,<br />both because this must be accessible to the cluster,<br />and because it might be on a different cloud or storage system (etcd vs S3).
	ConfigBase pulumi.StringPtrInput
	// - String - ConfigStore is the VFS path to where the configuration (Cluster, InstanceGroups etc) is stored.
	ConfigStore pulumi.StringPtrInput
	// - String - Container runtime to use for Kubernetes.
	ContainerRuntime pulumi.StringPtrInput
	// - containerdConfig - Component configurations.
	Containerd ClusterContainerdPtrInput
	// - String - DNSZone is the DNS zone we should use when configuring DNS<br />This is because some clouds let us define a managed zone foo.bar, and then have<br />kubernetes.dev.foo.bar, without needing to define dev.foo.bar as a hosted zone.<br />DNSZone will probably be a suffix of the MasterPublicName and MasterInternalName<br />Note that DNSZone can either by the host name of the zone (containing dots),<br />or can be an identifier for the zone.
	DnsZone pulumi.StringPtrInput
	// - docker_config
	Docker ClusterDockerPtrInput
	// - egressProxySpec - HTTPProxy defines connection information to support use of a private cluster behind an forward HTTP Proxy.
	EgressProxy ClusterEgressProxyPtrInput
	// - Bool - EncryptionConfig controls if encryption is enabled.
	EncryptionConfig pulumi.BoolPtrInput
	// - List(etcd_cluster_spec) - EtcdClusters stores the configuration for each cluster.
	EtcdClusters ClusterEtcdClusterArrayInput
	// - cloud_controller_manager_config
	ExternalCloudControllerManager ClusterExternalCloudControllerManagerPtrInput
	// - external_dns_config
	ExternalDns ClusterExternalDnsPtrInput
	// - Map(List(String)) - ExternalPolicies allows the insertion of pre-existing managed policies on IG Roles.
	ExternalPolicies ClusterExternalPolicyArrayInput
	// - List(file_asset_spec) - A collection of files assets for deployed cluster wide.
	FileAssets ClusterFileAssetArrayInput
	// - List(hook_spec) - Hooks for custom actions e.g. on first installation.
	Hooks ClusterHookArrayInput
	// - (Computed) - iamSpec - IAM field adds control over the IAM security policies applied to resources.
	Iam ClusterIamPtrInput
	// - Bool - IsolateMasters determines whether we should lock down masters so that they are not on the pod network.<br />true is the kube-up behaviour, but it is very surprising: it means that daemonsets only work on the master<br />if they have hostNetwork=true.<br />false is now the default, and it will:<br /> * give the master a normal PodCIDR<br /> * run kube-proxy on the master<br /> * enable debugging handlers on the master, so kubectl logs works.
	IsolateMasters pulumi.BoolPtrInput
	// - karpenterConfig - Karpenter defines the Karpenter configuration.
	Karpenter ClusterKarpenterPtrInput
	// - String - KeyStore is the VFS path to where SSL keys and certificates are stored.
	KeyStore pulumi.StringPtrInput
	// - kube_api_server_config
	KubeApiServer ClusterKubeApiServerPtrInput
	// - kube_controller_manager_config
	KubeControllerManager ClusterKubeControllerManagerPtrInput
	// - kube_dns_config
	KubeDns ClusterKubeDnsPtrInput
	// - kube_proxy_config
	KubeProxy ClusterKubeProxyPtrInput
	// - kube_scheduler_config
	KubeScheduler ClusterKubeSchedulerPtrInput
	// - kubeletConfigSpec - Kubelet is the kubelet configuration for nodes not belonging to the control plane.<br />It can be overridden by the kubelet configuration specified in the instance group.
	Kubelet ClusterKubeletPtrInput
	// - List(String) - KubernetesAPIAccess is a list of the CIDRs that can access the Kubernetes API endpoint (master HTTPS).
	KubernetesApiAccesses pulumi.StringArrayInput
	// - String - The version of kubernetes to install (optional, and can be a "spec" like stable).
	KubernetesVersion pulumi.StringPtrInput
	// - Map(String) - Map of string keys and values that can be used to organize and categorize<br />(scope and select) objects. May match selectors of replication controllers<br />and services.
	Labels pulumi.StringMapInput
	// - (Computed) - String - MasterInternalName is the internal DNS name for the master nodes.
	MasterInternalName pulumi.StringPtrInput
	// - kubeletConfigSpec - MasterKubelet is the kubelet configuration for nodes belonging to the control plane<br />It can be overridden by the kubelet configuration specified in the instance group.
	MasterKubelet ClusterMasterKubeletPtrInput
	// - (Computed) - String - MasterPublicName is the external DNS name for the master nodes.
	MasterPublicName pulumi.StringPtrInput
	// - metricsServerConfig - MetricsServer determines the metrics server configuration.
	MetricsServer ClusterMetricsServerPtrInput
	// - (Force new) - String - Name defines the cluster name.
	Name pulumi.StringPtrInput
	// - (Computed) - String - NetworkCIDR is the CIDR used for the AWS VPC / DO/ GCE Network, or otherwise allocated to k8s<br />This is a real CIDR, not the internal k8s network<br />On AWS, it maps to the VPC CIDR.  It is not required on GCE.<br />On DO, it maps to the VPC CIDR.
	NetworkCidr pulumi.StringPtrInput
	// - String - NetworkID is an identifier of a network, if we want to reuse/share an existing network (e.g. an AWS VPC).
	NetworkId pulumi.StringInput
	// - networkingSpec - Networking configuration.
	Networking ClusterNetworkingInput
	// - nodeAuthorizationSpec - NodeAuthorization defined the custom node authorization configuration.
	NodeAuthorization ClusterNodeAuthorizationPtrInput
	// - List(String) - NodePortAccess is a list of the CIDRs that can access the node ports range (30000-32767).
	NodePortAccesses pulumi.StringArrayInput
	// - nodeProblemDetectorConfig - NodeProblemDetector determines the node problem detector configuration.
	NodeProblemDetector ClusterNodeProblemDetectorPtrInput
	// - nodeTerminationHandlerConfig - NodeTerminationHandler determines the node termination handler configuration.
	NodeTerminationHandler ClusterNodeTerminationHandlerPtrInput
	// - (Computed) - String - NonMasqueradeCIDR is the CIDR for the internal k8s network (on which pods & services live)<br />It cannot overlap ServiceClusterIPRange.
	NonMasqueradeCidr pulumi.StringPtrInput
	// - ntp_config
	Ntp ClusterNtpPtrInput
	// - String - PodCIDR is the CIDR from which we allocate IPs for pods.
	PodCidr pulumi.StringPtrInput
	// - podIdentityWebhookConfig - PodIdentityWebhook determines the EKS Pod Identity Webhook configuration.
	PodIdentityWebhook ClusterPodIdentityWebhookPtrInput
	// - String - Project is the cloud project we should use, required on GCE.
	Project pulumi.StringPtrInput
	// - rollingUpdate - RollingUpdate defines the default rolling-update settings for instance groups.
	RollingUpdate ClusterRollingUpdatePtrInput
	// - String - SecretStore is the VFS path to where secrets are stored.
	SecretStore pulumi.StringPtrInput
	// - clusterSecrets - Secrets defines the cluster secret.
	Secrets ClusterSecretsPtrInput
	// - serviceAccountIssuerDiscoveryConfig - ServiceAccountIssuerDiscovery configures the OIDC Issuer for ServiceAccounts.
	ServiceAccountIssuerDiscovery ClusterServiceAccountIssuerDiscoveryPtrInput
	// - String - ServiceClusterIPRange is the CIDR, from the internal network, where we allocate IPs for services.
	ServiceClusterIpRange pulumi.StringPtrInput
	// - snapshotControllerConfig - SnapshotController defines the CSI Snapshot Controller configuration.
	SnapshotController ClusterSnapshotControllerPtrInput
	// - List(String) - SSHAccess is a list of the CIDRs that can access SSH.
	SshAccesses pulumi.StringArrayInput
	// - String - SSHKeyName specifies a preexisting SSH key to use.
	SshKeyName pulumi.StringPtrInput
	// - List(cluster_subnet_spec) - Configuration of subnets we are targeting.
	Subnets ClusterSubnetArrayInput
	// - List(String) - SysctlParameters will configure kernel parameters using sysctl(8). When<br />specified, each parameter must follow the form variable=value, the way<br />it would appear in sysctl.conf.
	SysctlParameters pulumi.StringArrayInput
	// - Bool(Nullable) - TagSubnets controls if tags are added to subnets to enable use by load balancers (AWS only). Default: true.
	TagSubnets ClusterTagSubnetsPtrInput
	// - topologySpec - Topology defines the type of network topology to use on the cluster - default public<br />This is heavily weighted towards AWS for the time being, but should also be agnostic enough<br />to port out to GCE later if needed.
	Topology ClusterTopologyInput
	// - String - UpdatePolicy determines the policy for applying upgrades automatically.<br />Valid values:<br />  'automatic' (default): apply updates automatically (apply OS security upgrades, avoiding rebooting when possible)<br />  'external': do not apply updates automatically; they are applied manually or by an external system.
	UpdatePolicy pulumi.StringPtrInput
	// - Bool - UseHostCertificates will mount /etc/ssl/certs to inside needed containers.<br />This is needed if some APIs do have self-signed certs.
	UseHostCertificates pulumi.BoolPtrInput
	// - warmPoolSpec - WarmPool defines the default warm pool settings for instance groups (AWS only).
	WarmPool ClusterWarmPoolPtrInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

// ClusterArrayInput is an input type that accepts ClusterArray and ClusterArrayOutput values.
// You can construct a concrete instance of `ClusterArrayInput` via:
//
//	ClusterArray{ ClusterArgs{...} }
type ClusterArrayInput interface {
	pulumi.Input

	ToClusterArrayOutput() ClusterArrayOutput
	ToClusterArrayOutputWithContext(context.Context) ClusterArrayOutput
}

type ClusterArray []ClusterInput

func (ClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (i ClusterArray) ToClusterArrayOutput() ClusterArrayOutput {
	return i.ToClusterArrayOutputWithContext(context.Background())
}

func (i ClusterArray) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterArrayOutput)
}

// ClusterMapInput is an input type that accepts ClusterMap and ClusterMapOutput values.
// You can construct a concrete instance of `ClusterMapInput` via:
//
//	ClusterMap{ "key": ClusterArgs{...} }
type ClusterMapInput interface {
	pulumi.Input

	ToClusterMapOutput() ClusterMapOutput
	ToClusterMapOutputWithContext(context.Context) ClusterMapOutput
}

type ClusterMap map[string]ClusterInput

func (ClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (i ClusterMap) ToClusterMapOutput() ClusterMapOutput {
	return i.ToClusterMapOutputWithContext(context.Background())
}

func (i ClusterMap) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMapOutput)
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

// - List(String) - AdditionalNetworkCIDRs is a list of additional CIDR used for the AWS VPC<br />or otherwise allocated to k8s. This is a real CIDR, not the internal k8s network<br />On AWS, it maps to any additional CIDRs added to a VPC.
func (o ClusterOutput) AdditionalNetworkCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringArrayOutput { return v.AdditionalNetworkCidrs }).(pulumi.StringArrayOutput)
}

// - Map(String) - Additional policies to add for roles.
func (o ClusterOutput) AdditionalPolicies() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringMapOutput { return v.AdditionalPolicies }).(pulumi.StringMapOutput)
}

// - List(String) - AdditionalSANs adds additional Subject Alternate Names to apiserver cert that kops generates.
func (o ClusterOutput) AdditionalSans() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringArrayOutput { return v.AdditionalSans }).(pulumi.StringArrayOutput)
}

// - List(addon_spec) - Additional addons that should be installed on the cluster.
func (o ClusterOutput) Addons() ClusterAddonArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterAddonArrayOutput { return v.Addons }).(ClusterAddonArrayOutput)
}

// - (Sensitive) - String - AdminSshKey defines the cluster admin ssh key.
func (o ClusterOutput) AdminSshKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.AdminSshKey }).(pulumi.StringPtrOutput)
}

// - Map(String) - Annotations is an unstructured key value map stored with a resource that may be<br />set by external tools to store and retrieve arbitrary metadata. They are not<br />queryable and should be preserved when modifying objects.
func (o ClusterOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// - accessSpec - API field controls how the API is exposed outside the cluster.
func (o ClusterOutput) Api() ClusterApiPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterApiPtrOutput { return v.Api }).(ClusterApiPtrOutput)
}

// - assets - Assets is alternative locations for files and containers; the API under construction, will remove this comment once this API is fully functional.
func (o ClusterOutput) Assets() ClusterAssetsPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterAssetsPtrOutput { return v.Assets }).(ClusterAssetsPtrOutput)
}

// - authenticationSpec - Authentication field controls how the cluster is configured for authentication.
func (o ClusterOutput) Authentication() ClusterAuthenticationPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterAuthenticationPtrOutput { return v.Authentication }).(ClusterAuthenticationPtrOutput)
}

// - authorizationSpec - Authorization field controls how the cluster is configured for authorization.
func (o ClusterOutput) Authorization() ClusterAuthorizationPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterAuthorizationPtrOutput { return v.Authorization }).(ClusterAuthorizationPtrOutput)
}

// - awsLoadBalancerControllerConfig - AWSLoadbalancerControllerConfig determines the AWS LB controller configuration.
func (o ClusterOutput) AwsLoadBalancerController() ClusterAwsLoadBalancerControllerPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterAwsLoadBalancerControllerPtrOutput { return v.AwsLoadBalancerController }).(ClusterAwsLoadBalancerControllerPtrOutput)
}

// - certManagerConfig - CertManager determines the metrics server configuration.
func (o ClusterOutput) CertManager() ClusterCertManagerPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterCertManagerPtrOutput { return v.CertManager }).(ClusterCertManagerPtrOutput)
}

// - String - The Channel we are following.
func (o ClusterOutput) Channel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.Channel }).(pulumi.StringPtrOutput)
}

// - cloud_configuration
func (o ClusterOutput) CloudConfig() ClusterCloudConfigPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterCloudConfigPtrOutput { return v.CloudConfig }).(ClusterCloudConfigPtrOutput)
}

// - Map(String) - CloudLabels defines additional tags or labels on cloud provider resources.
func (o ClusterOutput) CloudLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringMapOutput { return v.CloudLabels }).(pulumi.StringMapOutput)
}

// - cloudProviderSpec - CloudProvider configures the cloud provider to use.
func (o ClusterOutput) CloudProvider() ClusterCloudProviderOutput {
	return o.ApplyT(func(v *Cluster) ClusterCloudProviderOutput { return v.CloudProvider }).(ClusterCloudProviderOutput)
}

// - clusterAutoscalerConfig - ClusterAutoscaler defines the cluster autoscaler configuration.
func (o ClusterOutput) ClusterAutoscaler() ClusterClusterAutoscalerPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterClusterAutoscalerPtrOutput { return v.ClusterAutoscaler }).(ClusterClusterAutoscalerPtrOutput)
}

// - String - ClusterDNSDomain is the suffix we use for internal DNS names (normally cluster.local).
func (o ClusterOutput) ClusterDnsDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.ClusterDnsDomain }).(pulumi.StringPtrOutput)
}

// - (Computed) - String - ConfigBase is the path where we store configuration for the cluster<br />This might be different than the location where the cluster spec itself is stored,<br />both because this must be accessible to the cluster,<br />and because it might be on a different cloud or storage system (etcd vs S3).
func (o ClusterOutput) ConfigBase() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ConfigBase }).(pulumi.StringOutput)
}

// - String - ConfigStore is the VFS path to where the configuration (Cluster, InstanceGroups etc) is stored.
func (o ClusterOutput) ConfigStore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.ConfigStore }).(pulumi.StringPtrOutput)
}

// - String - Container runtime to use for Kubernetes.
func (o ClusterOutput) ContainerRuntime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.ContainerRuntime }).(pulumi.StringPtrOutput)
}

// - containerdConfig - Component configurations.
func (o ClusterOutput) Containerd() ClusterContainerdPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterContainerdPtrOutput { return v.Containerd }).(ClusterContainerdPtrOutput)
}

// - String - DNSZone is the DNS zone we should use when configuring DNS<br />This is because some clouds let us define a managed zone foo.bar, and then have<br />kubernetes.dev.foo.bar, without needing to define dev.foo.bar as a hosted zone.<br />DNSZone will probably be a suffix of the MasterPublicName and MasterInternalName<br />Note that DNSZone can either by the host name of the zone (containing dots),<br />or can be an identifier for the zone.
func (o ClusterOutput) DnsZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.DnsZone }).(pulumi.StringPtrOutput)
}

// - docker_config
func (o ClusterOutput) Docker() ClusterDockerPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterDockerPtrOutput { return v.Docker }).(ClusterDockerPtrOutput)
}

// - egressProxySpec - HTTPProxy defines connection information to support use of a private cluster behind an forward HTTP Proxy.
func (o ClusterOutput) EgressProxy() ClusterEgressProxyPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterEgressProxyPtrOutput { return v.EgressProxy }).(ClusterEgressProxyPtrOutput)
}

// - Bool - EncryptionConfig controls if encryption is enabled.
func (o ClusterOutput) EncryptionConfig() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.BoolPtrOutput { return v.EncryptionConfig }).(pulumi.BoolPtrOutput)
}

// - List(etcd_cluster_spec) - EtcdClusters stores the configuration for each cluster.
func (o ClusterOutput) EtcdClusters() ClusterEtcdClusterArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterEtcdClusterArrayOutput { return v.EtcdClusters }).(ClusterEtcdClusterArrayOutput)
}

// - cloud_controller_manager_config
func (o ClusterOutput) ExternalCloudControllerManager() ClusterExternalCloudControllerManagerPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterExternalCloudControllerManagerPtrOutput {
		return v.ExternalCloudControllerManager
	}).(ClusterExternalCloudControllerManagerPtrOutput)
}

// - external_dns_config
func (o ClusterOutput) ExternalDns() ClusterExternalDnsPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterExternalDnsPtrOutput { return v.ExternalDns }).(ClusterExternalDnsPtrOutput)
}

// - Map(List(String)) - ExternalPolicies allows the insertion of pre-existing managed policies on IG Roles.
func (o ClusterOutput) ExternalPolicies() ClusterExternalPolicyArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterExternalPolicyArrayOutput { return v.ExternalPolicies }).(ClusterExternalPolicyArrayOutput)
}

// - List(file_asset_spec) - A collection of files assets for deployed cluster wide.
func (o ClusterOutput) FileAssets() ClusterFileAssetArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterFileAssetArrayOutput { return v.FileAssets }).(ClusterFileAssetArrayOutput)
}

// - List(hook_spec) - Hooks for custom actions e.g. on first installation.
func (o ClusterOutput) Hooks() ClusterHookArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterHookArrayOutput { return v.Hooks }).(ClusterHookArrayOutput)
}

// - (Computed) - iamSpec - IAM field adds control over the IAM security policies applied to resources.
func (o ClusterOutput) Iam() ClusterIamOutput {
	return o.ApplyT(func(v *Cluster) ClusterIamOutput { return v.Iam }).(ClusterIamOutput)
}

// - Bool - IsolateMasters determines whether we should lock down masters so that they are not on the pod network.<br />true is the kube-up behaviour, but it is very surprising: it means that daemonsets only work on the master<br />if they have hostNetwork=true.<br />false is now the default, and it will:<br /> * give the master a normal PodCIDR<br /> * run kube-proxy on the master<br /> * enable debugging handlers on the master, so kubectl logs works.
func (o ClusterOutput) IsolateMasters() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.BoolPtrOutput { return v.IsolateMasters }).(pulumi.BoolPtrOutput)
}

// - karpenterConfig - Karpenter defines the Karpenter configuration.
func (o ClusterOutput) Karpenter() ClusterKarpenterPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterKarpenterPtrOutput { return v.Karpenter }).(ClusterKarpenterPtrOutput)
}

// - String - KeyStore is the VFS path to where SSL keys and certificates are stored.
func (o ClusterOutput) KeyStore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.KeyStore }).(pulumi.StringPtrOutput)
}

// - kube_api_server_config
func (o ClusterOutput) KubeApiServer() ClusterKubeApiServerPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterKubeApiServerPtrOutput { return v.KubeApiServer }).(ClusterKubeApiServerPtrOutput)
}

// - kube_controller_manager_config
func (o ClusterOutput) KubeControllerManager() ClusterKubeControllerManagerPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterKubeControllerManagerPtrOutput { return v.KubeControllerManager }).(ClusterKubeControllerManagerPtrOutput)
}

// - kube_dns_config
func (o ClusterOutput) KubeDns() ClusterKubeDnsPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterKubeDnsPtrOutput { return v.KubeDns }).(ClusterKubeDnsPtrOutput)
}

// - kube_proxy_config
func (o ClusterOutput) KubeProxy() ClusterKubeProxyPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterKubeProxyPtrOutput { return v.KubeProxy }).(ClusterKubeProxyPtrOutput)
}

// - kube_scheduler_config
func (o ClusterOutput) KubeScheduler() ClusterKubeSchedulerPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterKubeSchedulerPtrOutput { return v.KubeScheduler }).(ClusterKubeSchedulerPtrOutput)
}

// - kubeletConfigSpec - Kubelet is the kubelet configuration for nodes not belonging to the control plane.<br />It can be overridden by the kubelet configuration specified in the instance group.
func (o ClusterOutput) Kubelet() ClusterKubeletPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterKubeletPtrOutput { return v.Kubelet }).(ClusterKubeletPtrOutput)
}

// - List(String) - KubernetesAPIAccess is a list of the CIDRs that can access the Kubernetes API endpoint (master HTTPS).
func (o ClusterOutput) KubernetesApiAccesses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringArrayOutput { return v.KubernetesApiAccesses }).(pulumi.StringArrayOutput)
}

// - String - The version of kubernetes to install (optional, and can be a "spec" like stable).
func (o ClusterOutput) KubernetesVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.KubernetesVersion }).(pulumi.StringPtrOutput)
}

// - Map(String) - Map of string keys and values that can be used to organize and categorize<br />(scope and select) objects. May match selectors of replication controllers<br />and services.
func (o ClusterOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// - (Computed) - String - MasterInternalName is the internal DNS name for the master nodes.
func (o ClusterOutput) MasterInternalName() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.MasterInternalName }).(pulumi.StringOutput)
}

// - kubeletConfigSpec - MasterKubelet is the kubelet configuration for nodes belonging to the control plane<br />It can be overridden by the kubelet configuration specified in the instance group.
func (o ClusterOutput) MasterKubelet() ClusterMasterKubeletPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterMasterKubeletPtrOutput { return v.MasterKubelet }).(ClusterMasterKubeletPtrOutput)
}

// - (Computed) - String - MasterPublicName is the external DNS name for the master nodes.
func (o ClusterOutput) MasterPublicName() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.MasterPublicName }).(pulumi.StringOutput)
}

// - metricsServerConfig - MetricsServer determines the metrics server configuration.
func (o ClusterOutput) MetricsServer() ClusterMetricsServerPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterMetricsServerPtrOutput { return v.MetricsServer }).(ClusterMetricsServerPtrOutput)
}

// - (Force new) - String - Name defines the cluster name.
func (o ClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// - (Computed) - String - NetworkCIDR is the CIDR used for the AWS VPC / DO/ GCE Network, or otherwise allocated to k8s<br />This is a real CIDR, not the internal k8s network<br />On AWS, it maps to the VPC CIDR.  It is not required on GCE.<br />On DO, it maps to the VPC CIDR.
func (o ClusterOutput) NetworkCidr() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.NetworkCidr }).(pulumi.StringOutput)
}

// - String - NetworkID is an identifier of a network, if we want to reuse/share an existing network (e.g. an AWS VPC).
func (o ClusterOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// - networkingSpec - Networking configuration.
func (o ClusterOutput) Networking() ClusterNetworkingOutput {
	return o.ApplyT(func(v *Cluster) ClusterNetworkingOutput { return v.Networking }).(ClusterNetworkingOutput)
}

// - nodeAuthorizationSpec - NodeAuthorization defined the custom node authorization configuration.
func (o ClusterOutput) NodeAuthorization() ClusterNodeAuthorizationPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterNodeAuthorizationPtrOutput { return v.NodeAuthorization }).(ClusterNodeAuthorizationPtrOutput)
}

// - List(String) - NodePortAccess is a list of the CIDRs that can access the node ports range (30000-32767).
func (o ClusterOutput) NodePortAccesses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringArrayOutput { return v.NodePortAccesses }).(pulumi.StringArrayOutput)
}

// - nodeProblemDetectorConfig - NodeProblemDetector determines the node problem detector configuration.
func (o ClusterOutput) NodeProblemDetector() ClusterNodeProblemDetectorPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterNodeProblemDetectorPtrOutput { return v.NodeProblemDetector }).(ClusterNodeProblemDetectorPtrOutput)
}

// - nodeTerminationHandlerConfig - NodeTerminationHandler determines the node termination handler configuration.
func (o ClusterOutput) NodeTerminationHandler() ClusterNodeTerminationHandlerPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterNodeTerminationHandlerPtrOutput { return v.NodeTerminationHandler }).(ClusterNodeTerminationHandlerPtrOutput)
}

// - (Computed) - String - NonMasqueradeCIDR is the CIDR for the internal k8s network (on which pods & services live)<br />It cannot overlap ServiceClusterIPRange.
func (o ClusterOutput) NonMasqueradeCidr() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.NonMasqueradeCidr }).(pulumi.StringOutput)
}

// - ntp_config
func (o ClusterOutput) Ntp() ClusterNtpPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterNtpPtrOutput { return v.Ntp }).(ClusterNtpPtrOutput)
}

// - String - PodCIDR is the CIDR from which we allocate IPs for pods.
func (o ClusterOutput) PodCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.PodCidr }).(pulumi.StringPtrOutput)
}

// - podIdentityWebhookConfig - PodIdentityWebhook determines the EKS Pod Identity Webhook configuration.
func (o ClusterOutput) PodIdentityWebhook() ClusterPodIdentityWebhookPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterPodIdentityWebhookPtrOutput { return v.PodIdentityWebhook }).(ClusterPodIdentityWebhookPtrOutput)
}

// - String - Project is the cloud project we should use, required on GCE.
func (o ClusterOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.Project }).(pulumi.StringPtrOutput)
}

// - Int - Revision is incremented every time the resource changes, this is useful for triggering cluster updater.
func (o ClusterOutput) Revision() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.Revision }).(pulumi.IntOutput)
}

// - rollingUpdate - RollingUpdate defines the default rolling-update settings for instance groups.
func (o ClusterOutput) RollingUpdate() ClusterRollingUpdatePtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterRollingUpdatePtrOutput { return v.RollingUpdate }).(ClusterRollingUpdatePtrOutput)
}

// - String - SecretStore is the VFS path to where secrets are stored.
func (o ClusterOutput) SecretStore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.SecretStore }).(pulumi.StringPtrOutput)
}

// - clusterSecrets - Secrets defines the cluster secret.
func (o ClusterOutput) Secrets() ClusterSecretsPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterSecretsPtrOutput { return v.Secrets }).(ClusterSecretsPtrOutput)
}

// - serviceAccountIssuerDiscoveryConfig - ServiceAccountIssuerDiscovery configures the OIDC Issuer for ServiceAccounts.
func (o ClusterOutput) ServiceAccountIssuerDiscovery() ClusterServiceAccountIssuerDiscoveryPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterServiceAccountIssuerDiscoveryPtrOutput { return v.ServiceAccountIssuerDiscovery }).(ClusterServiceAccountIssuerDiscoveryPtrOutput)
}

// - String - ServiceClusterIPRange is the CIDR, from the internal network, where we allocate IPs for services.
func (o ClusterOutput) ServiceClusterIpRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.ServiceClusterIpRange }).(pulumi.StringPtrOutput)
}

// - snapshotControllerConfig - SnapshotController defines the CSI Snapshot Controller configuration.
func (o ClusterOutput) SnapshotController() ClusterSnapshotControllerPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterSnapshotControllerPtrOutput { return v.SnapshotController }).(ClusterSnapshotControllerPtrOutput)
}

// - List(String) - SSHAccess is a list of the CIDRs that can access SSH.
func (o ClusterOutput) SshAccesses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringArrayOutput { return v.SshAccesses }).(pulumi.StringArrayOutput)
}

// - String - SSHKeyName specifies a preexisting SSH key to use.
func (o ClusterOutput) SshKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.SshKeyName }).(pulumi.StringPtrOutput)
}

// - List(cluster_subnet_spec) - Configuration of subnets we are targeting.
func (o ClusterOutput) Subnets() ClusterSubnetArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterSubnetArrayOutput { return v.Subnets }).(ClusterSubnetArrayOutput)
}

// - List(String) - SysctlParameters will configure kernel parameters using sysctl(8). When<br />specified, each parameter must follow the form variable=value, the way<br />it would appear in sysctl.conf.
func (o ClusterOutput) SysctlParameters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringArrayOutput { return v.SysctlParameters }).(pulumi.StringArrayOutput)
}

// - Bool(Nullable) - TagSubnets controls if tags are added to subnets to enable use by load balancers (AWS only). Default: true.
func (o ClusterOutput) TagSubnets() ClusterTagSubnetsPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterTagSubnetsPtrOutput { return v.TagSubnets }).(ClusterTagSubnetsPtrOutput)
}

// - topologySpec - Topology defines the type of network topology to use on the cluster - default public<br />This is heavily weighted towards AWS for the time being, but should also be agnostic enough<br />to port out to GCE later if needed.
func (o ClusterOutput) Topology() ClusterTopologyOutput {
	return o.ApplyT(func(v *Cluster) ClusterTopologyOutput { return v.Topology }).(ClusterTopologyOutput)
}

// - String - UpdatePolicy determines the policy for applying upgrades automatically.<br />Valid values:<br />  'automatic' (default): apply updates automatically (apply OS security upgrades, avoiding rebooting when possible)<br />  'external': do not apply updates automatically; they are applied manually or by an external system.
func (o ClusterOutput) UpdatePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.UpdatePolicy }).(pulumi.StringPtrOutput)
}

// - Bool - UseHostCertificates will mount /etc/ssl/certs to inside needed containers.<br />This is needed if some APIs do have self-signed certs.
func (o ClusterOutput) UseHostCertificates() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.BoolPtrOutput { return v.UseHostCertificates }).(pulumi.BoolPtrOutput)
}

// - warmPoolSpec - WarmPool defines the default warm pool settings for instance groups (AWS only).
func (o ClusterOutput) WarmPool() ClusterWarmPoolPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterWarmPoolPtrOutput { return v.WarmPool }).(ClusterWarmPoolPtrOutput)
}

type ClusterArrayOutput struct{ *pulumi.OutputState }

func (ClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (o ClusterArrayOutput) ToClusterArrayOutput() ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) Index(i pulumi.IntInput) ClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].([]*Cluster)[vs[1].(int)]
	}).(ClusterOutput)
}

type ClusterMapOutput struct{ *pulumi.OutputState }

func (ClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (o ClusterMapOutput) ToClusterMapOutput() ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) MapIndex(k pulumi.StringInput) ClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].(map[string]*Cluster)[vs[1].(string)]
	}).(ClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInput)(nil)).Elem(), &Cluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterArrayInput)(nil)).Elem(), ClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMapInput)(nil)).Elem(), ClusterMap{})
	pulumi.RegisterOutputType(ClusterOutput{})
	pulumi.RegisterOutputType(ClusterArrayOutput{})
	pulumi.RegisterOutputType(ClusterMapOutput{})
}
