// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * ## # kops.ClusterUpdater
 *
 * This resource applies the cluster state on the target cloud provider and performs a rolling update.
 *
 * The rolling update and cluster validation can be disabled and/or configured through resource attributes.
 *
 * > This resource will trigger based on the `keepers` map attribute.
 * Thats is, if something changes in the attribute, the resource update handler will fire and an apply/rolling update/validate cycle will run.
 * A good candidate for `keepers` is to use the `revision` coming from `kops.Cluster` and `kops.InstanceGroup` resources.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as kops from "@pulumi/kops";
 *
 * const cluster = new kops.Cluster("cluster", {});
 * // ....
 * const master_0 = new kops.InstanceGroup("master-0", {
 *     clusterName: cluster.name,
 *     role: "Master",
 *     minSize: 1,
 *     maxSize: 1,
 *     machineType: "t3.medium",
 *     subnets: ["private-0"],
 * }, {
 *     dependsOn: [cluster],
 * });
 * const master_1 = new kops.InstanceGroup("master-1", {
 *     clusterName: cluster.name,
 *     role: "Master",
 *     minSize: 1,
 *     maxSize: 1,
 *     machineType: "t3.medium",
 *     subnets: ["private-1"],
 * }, {
 *     dependsOn: [cluster],
 * });
 * const master_2 = new kops.InstanceGroup("master-2", {
 *     clusterName: cluster.name,
 *     role: "Master",
 *     minSize: 1,
 *     maxSize: 1,
 *     machineType: "t3.medium",
 *     subnets: ["private-2"],
 * }, {
 *     dependsOn: [cluster],
 * });
 * const updater = new kops.ClusterUpdater("updater", {
 *     clusterName: cluster.name,
 *     keepers: {
 *         cluster: cluster.revision,
 *         "master-0": master_0.revision,
 *         "master-1": master_1.revision,
 *         "master-2": master_2.revision,
 *     },
 *     rollingUpdate: {
 *         skip: false,
 *         failOnDrainError: true,
 *         failOnValidate: true,
 *         validateCount: 1,
 *     },
 *     validate: {
 *         skip: false,
 *     },
 * }, {
 *     dependsOn: [
 *         cluster,
 *         master_0,
 *         master_1,
 *         master_2,
 *     ],
 * });
 * ```
 * ## Nested resources
 *
 * ### applyOptions
 *
 * #### Argument Reference
 *
 * The following arguments are supported:
 *
 * - `skip` - (Optional) - Bool - Skip allows skipping cluster apply.
 * - `allowKopsDowngrade` - (Optional) - Bool - AllowKopsDowngrade permits applying with a kops version older than what was last used to apply to the cluster.
 * - `lifecycleOverrides` - (Optional) - Map(String) - LifecycleOverrides is passed in to override the lifecycle for one of more tasks.<br />The key value is the task name such as InternetGateway and the value is the fi.Lifecycle<br />that is re-mapped.
 *
 * ### rollingUpdateOptions
 *
 * #### Argument Reference
 *
 * The following arguments are supported:
 *
 * - `skip` - (Optional) - Bool - Skip allows skipping cluster rolling update.
 * - `masterInterval` - (Optional) - Duration - MasterInterval is the amount of time to wait after stopping a master instance.
 * - `nodeInterval` - (Optional) - Duration - NodeInterval is the amount of time to wait after stopping a non-master instance.
 * - `bastionInterval` - (Optional) - Duration - BastionInterval is the amount of time to wait after stopping a bastion instance.
 * - `failOnDrainError` - (Optional) - Bool - FailOnDrainError will fail when a drain error occurs.
 * - `failOnValidate` - (Optional) - Bool - FailOnValidate will fail when a validation error occurs.
 * - `postDrainDelay` - (Optional) - Duration - PostDrainDelay is the duration we wait after draining each node.
 * - `validationTimeout` - (Optional) - Duration - ValidationTimeout is the maximum time to wait for the cluster to validate, once we start validation.
 * - `validateCount` - (Optional) - Int - ValidateCount is the amount of time that a cluster needs to be validated after single node update.
 * - `cloudOnly` - (Optional) - Bool - CloudOnly perform rolling update without confirming progress with k8s.
 * - `force` - (Optional) - Bool - Force forces a rolling update.
 *
 * ### validateOptions
 *
 * #### Argument Reference
 *
 * The following arguments are supported:
 *
 * - `skip` - (Optional) - Bool - Skip allows skipping cluster validation.
 * - `timeout` - (Optional) - Duration - Timeout defines the maximum time to wait until the cluster becomes valid.
 * - `pollInterval` - (Optional) - Duration - PollInterval defines the interval between validation attempts.
 */
export class ClusterUpdater extends pulumi.CustomResource {
    /**
     * Get an existing ClusterUpdater resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterUpdaterState, opts?: pulumi.CustomResourceOptions): ClusterUpdater {
        return new ClusterUpdater(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'kops:index/clusterUpdater:ClusterUpdater';

    /**
     * Returns true if the given object is an instance of ClusterUpdater.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ClusterUpdater {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClusterUpdater.__pulumiType;
    }

    /**
     * - applyOptions - Apply holds cluster apply options.
     */
    public readonly apply!: pulumi.Output<outputs.ClusterUpdaterApply | undefined>;
    /**
     * - String - ClusterName is the target cluster name.
     */
    public readonly clusterName!: pulumi.Output<string>;
    /**
     * - Map(String) - Keepers contains arbitrary strings used to update the resource when one changes.
     */
    public readonly keepers!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * - String - ProviderVersion is set to the currently running provider version, this will trigger cluster updater on version changes.
     */
    public /*out*/ readonly providerVersion!: pulumi.Output<string>;
    /**
     * - Int - Revision is incremented every time the resource changes, this is useful for triggering cluster updater.
     */
    public /*out*/ readonly revision!: pulumi.Output<number>;
    /**
     * - rollingUpdateOptions - RollingUpdate holds cluster rolling update options.
     */
    public readonly rollingUpdate!: pulumi.Output<outputs.ClusterUpdaterRollingUpdate | undefined>;
    /**
     * - validateOptions - Validate holds cluster validation options.
     */
    public readonly validate!: pulumi.Output<outputs.ClusterUpdaterValidate | undefined>;

    /**
     * Create a ClusterUpdater resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterUpdaterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterUpdaterArgs | ClusterUpdaterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterUpdaterState | undefined;
            resourceInputs["apply"] = state ? state.apply : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["keepers"] = state ? state.keepers : undefined;
            resourceInputs["providerVersion"] = state ? state.providerVersion : undefined;
            resourceInputs["revision"] = state ? state.revision : undefined;
            resourceInputs["rollingUpdate"] = state ? state.rollingUpdate : undefined;
            resourceInputs["validate"] = state ? state.validate : undefined;
        } else {
            const args = argsOrState as ClusterUpdaterArgs | undefined;
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            resourceInputs["apply"] = args ? args.apply : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["keepers"] = args ? args.keepers : undefined;
            resourceInputs["rollingUpdate"] = args ? args.rollingUpdate : undefined;
            resourceInputs["validate"] = args ? args.validate : undefined;
            resourceInputs["providerVersion"] = undefined /*out*/;
            resourceInputs["revision"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ClusterUpdater.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ClusterUpdater resources.
 */
export interface ClusterUpdaterState {
    /**
     * - applyOptions - Apply holds cluster apply options.
     */
    apply?: pulumi.Input<inputs.ClusterUpdaterApply>;
    /**
     * - String - ClusterName is the target cluster name.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * - Map(String) - Keepers contains arbitrary strings used to update the resource when one changes.
     */
    keepers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * - String - ProviderVersion is set to the currently running provider version, this will trigger cluster updater on version changes.
     */
    providerVersion?: pulumi.Input<string>;
    /**
     * - Int - Revision is incremented every time the resource changes, this is useful for triggering cluster updater.
     */
    revision?: pulumi.Input<number>;
    /**
     * - rollingUpdateOptions - RollingUpdate holds cluster rolling update options.
     */
    rollingUpdate?: pulumi.Input<inputs.ClusterUpdaterRollingUpdate>;
    /**
     * - validateOptions - Validate holds cluster validation options.
     */
    validate?: pulumi.Input<inputs.ClusterUpdaterValidate>;
}

/**
 * The set of arguments for constructing a ClusterUpdater resource.
 */
export interface ClusterUpdaterArgs {
    /**
     * - applyOptions - Apply holds cluster apply options.
     */
    apply?: pulumi.Input<inputs.ClusterUpdaterApply>;
    /**
     * - String - ClusterName is the target cluster name.
     */
    clusterName: pulumi.Input<string>;
    /**
     * - Map(String) - Keepers contains arbitrary strings used to update the resource when one changes.
     */
    keepers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * - rollingUpdateOptions - RollingUpdate holds cluster rolling update options.
     */
    rollingUpdate?: pulumi.Input<inputs.ClusterUpdaterRollingUpdate>;
    /**
     * - validateOptions - Validate holds cluster validation options.
     */
    validate?: pulumi.Input<inputs.ClusterUpdaterValidate>;
}
